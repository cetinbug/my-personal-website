{
    "titleBlog": "First 250 days of software dev - Part {{order}}",
    "titleBlogIntro": "First 250 days of software dev - Intro",
    "minRead": "min read",
    "intro": {
        "1": "A nice intro will be written here when inspiration comes, or it can be written without waiting for the muse :)",
        "2": "Introduction"
    },
    "part1": {
        "1": "Day 1",
        "2": "I think I have learned a lot today, or at least I have studied. I can briefly list the topics I have studied in the way I remember them:",
        "3": "Binary-bit-byte-shifting concepts",
        "4": "I spent time on things like binary system, bits and bytes, which I had researched before but hadn't gone into much detail. I learned the concepts of big endian, little endian.",
        "5": "Asynchronous programming",
        "6": "I learned the difference with synchronous programming. Asynchronous seems to stay in my mind as 'I will call you back'. In short: when there is an operation in our code that may take a long time or there is a situation that may prevent it, doing other pending tasks and returning to the undone operation after finishing those tasks is called asynchronous programming. In other words, it doesn't do the sequence of operations in a straight line, and if an operation on that line fails, it skips it and continues on its way. Then it goes back there again. It's faster than synchronous because it doesn't get stuck in the same position. The number of threads is also important, of course, with two or three threads instead of one thread, the process can end much faster.",
        "7": "Variables, arrays and object in Javascript",
        "8": "I was inspired by similar examples and for the first time I was able to write something on the console in the web browser. I consider it important as a first step. I did some small examples about object and creating the contents of an array. I learned about variable types.",
        "9": "About Scope",
        "10": "I learned how to assign variables (or constants) with var, let and const, and the scope properties when using them. I learned that assigning in the scope (i.e. local scope) between the curly brackets with let and const does not make sense for the global scope, which may actually be more advantageous than defining a variable with 'var'.",
        "11": "AST (Abstract Syntax Trees)",
        "12": "If we think of source code as a tree, it can be thought of as a branching process from the root to the leaf.  It's used to show the structure of the code, in the analysis phase of the compiler, and in static code analysis. According to Wikipedia, it's also used in program transformation systems, but I'm not familiar with it, but I've seen examples of how to extract an AST and I understand it.",
        "13": "To be able to provide the advantages of a loop without using a loop",
        "14": "I created a very simple 'do while' loop in PHP using only recursive function and if statement. Obviously I had some help by googling but I understood the logic.",
        "15": "Lastly SEO",
        "16": "I actually compared e-commerce sites that do equivalent / similar work to our e-commerce business on Turkish and foreign websites. Honestly, I want to research a little more, but it's not till tomorrow. I can say that I made an introduction to SEO I wish to learn and use information that will always expand my horizons tomorrow and beyond.",
        "17": "Day 2",
        "18": "I can say that most of the day was like a basic programming lesson with Javascript. But I think it added a lot. If I summarize the day quickly:",
        "19": "The topics I looked at during the day: 'Conditionals, Functions, Scope, Arrays, Loops, Iterators'.Unfortunately, I didn't have enough time for Objects because I examined more than 50 examples in the topics I mentioned and wrote similar codes on all of them one by one. I looked at the solutions in the parts I had difficulty, but they took a little more time because I wanted to grasp the underlying logic. The best information I learned today was actually about 'Iterators'. Seeing that a function can be used both as a 'data' and as a 'parameter', and then analyzing the code and understanding the logic was the most positive result of the day for me. In higher-order functions, while accepting the function as a parameter and performing operations, I realized that similar operations can be done without using callbacks. I think I understand the logic of the call-back function, but I haven't figured out exactly how the machine follows the order of operations. If nothing urgent happens tomorrow, I will learn that first thing.  Also, I saw a code on stackoverflow where event and callback functions are used in another programming language. It was very pleasing to be able to analyze and understand the code structure.",
        "20": "I did a lot of examples with arrays and functions, and I should mention that I learned how to use the concepts, not their names.",
        "21": "Variable",
        "22": "When you think about the structure of variables, a variable basically consists of two things: Identification and assigning a value. This is done by saving it in some part of the computer memory. Here I imagined the following example to myself: God creating man, and giving him a first name. And it is certain that this human being was born somewhere on Earth, even if God may or may not specify where on Earth this human being is located. And that God can directly change the position of this being if he wants to. The variable was man. The data it occupied in the memory was Adam. The memory was the world. The space it occupied was the location. Then I wanted to expand this example a lot, but there was no opportunity. Yes, it was an unnecessary (Stanley) Kubrickian approach, but I still wanted to write it down.",
        "23": "I learned that Google updates its algorithm every year, according to which Google puts its related site on the first page (or even at the top) in the browser. After doing some research, I found reports and articles published on this. One of them was actually talking about the importance of the speed of the website, or the speed at which it is displayed in the browser. I thought that if it takes a website on the first page among an average of 200-300 million results in 0.61 seconds, these pages should also be capable of loading quickly. Therefore, I observed the site's performance analysis, structural analysis, site load time (there are many concepts such as LCP, TBT, CLC). I examined these values from 'gtmetrix' and 'google page speed' and looked at their improvement (optimization) suggestions accordingly. Since even operations in milliseconds are very important in these matters, I suddenly thought of 'the advantage of defining a variable in block scope in terms of its transience in taking up memory space and issues such as not taking up memory space by always staying as a global variable'. I learned that small coding differences that seem so simple, image sizes within the site, CSS with Bootstrap actually cause excessive load times. Of course, these are not the main issues in SEO. There are more basic issues like Keywords. I will move on to more technical topics.",
        "24": "Summary of the Day : I am amazed to see that a person who simply thinks and counts '1,2,3' when asked to count to 3 can explain his own logic to a machine and succeed in doing so, and I continue to learn.",
        "25": "Day 3",
        "26": "Today I completed the Iterator and Object topic with examples. I felt that today was a bit less productive because I worked a bit too much yesterday and was sleep deprived. But it was also nice to complete the Beginner-Javascript course at CodeAcademy in two days. Next is to complete the Intermediate part. Of course, I'm trying to be a little fast here because there is a lot of information and I want to learn as much as possible, see how they are used, and even if I forget, when a project comes up or a question comes up, I want to know the algorithm, the code structure, the expressions in the code and their usage.",
        "27": "I found a Github source related to the topics, projects, examples in the 'Eloquent Javascript' book. When I get more into Javascript - even after each topic - I think I will look at them and reinforce them even more.",
        "28": "I looked at 'page speed' yesterday, one of the topics you talked about in your office meeting today, and when I overheard that Javascript-related improvements were needed, I actually felt like I was looking in the right place. I didn't look at SEO at all today, but I want to make up for it tomorrow.",
        "29": "Towards the end of the day, I actually saw the topics discussed in the meeting as brain gymnastics and I listened to them very much. When I heard you talk about artificial intelligence, the basic assumptions on which mathematics is based, I wanted to read 'GÃ¶del, Escher, Bach' even more, but I think I will first watch the lectures about this book at MIT and then read the book.",
        "30": "Good night, and thank you very much for sharing your thoughts on computers/life/science/information/philosophy with us today, even though you don't have to.",
        "31": "Day 4",
        "32": "I'm mostly on Javascript again today, so I'll get right to the point:",
        "33": "Object",
        "34": "First I went into a bit more detail about Object, I learned about factory functions for example. Actually, it was a bit similar to a class, but I shouldn't talk big because I haven't really looked at the class. But factory functions was one of my favorite places about object for today.",
        "35": "Web Compatibility and Transpilation",
        "36": "After finishing the bbject topic completely, there was the browser web compatibility and transpilation topic. I looked at the documentation on caniuse.com and babel.io on how to return ES6 and ES5 related code from ES6 to ES5. I think in 2021 there is no syntax transfer from ES6 to ES5 format anymore, but a few years ago it was necessary because most of the web supported Javascript in ES5 format. This was done by using Terminal, downloading Node.js packages and downloading the babel library. I followed the process a bit to learn how to use Terminal, but after 2021 (when more than 97% of the web (according to caniuse.com) uses ES6) I preferred to just research this topic.",
        "37": "Class",
        "38": "I looked at constructor, instance, method and method call. I think I understand it but I need to look at the examples again. After that, I was thinking of completing the class topic today, but when I learned that we were going to enter next week, I left it halfway and I wanted to repeat everything we have learned so far from the book called 'Eloquent Javascript' with examples. I finished two chapters today. Tomorrow, if I can, I think I will look at all the examples, try to write them myself, write them, and if I have a problem and can't reach the solution, I think I will complete the day by looking at the solution manual. Since everything is explained in the most concise and understandable way in the book and I have been reading, researching and learning a little bit about the concepts for a few days, I think it will be a very good repetition. At the same time, I think it would be good if I repeat the points that I missed, or the subject content that I didn't look at much on purpose, but may be important. ",
        "39": "When I looked at SEO two days ago, I looked at the internet speed of our website, and the analysis of other parameters that I could access. At the same time, when I analyzed the competitors (or companies that trade on similar products) in the same way, I saw that our website was better as a website (in terms of software, such as connection speed, structural analysis of the site). But again, I don't think it is very good in issues such as social media, awareness, which can be handled within SEO but I think it doesn't concern me much. But I think that something good is done by putting in-site comments for communication with the customer. I don't know if you have noticed anything, but (using Google Analytics I think at least the marketing part has definitely noticed it) when our website and similar sites were searched on google, I came across a search result about the reliability of our website in suggestion searches. I have seen the same many times in the search suggestions of similar sites. Even when I looked at the comments of our website and similar sites in eksisozluk.com(a website like reddit in turkish), I saw that they touched on the issue of security. If one side of what we call SEO is the site, the other side is the user, and the middle is Google, we need to somehow give what the user wants, and I thought of a way to say that it is safe-reliable without expressing these words, but I couldn't find an answer. Obviously, my ideas about SEO have started to form, but I am only writing my personal opinions because it is not at the level I want.",
        "40": "Summary of the day :",
        "41": "When you do something you really love, you lose track of time. This means that I haven't been doing things with love for a long time. I didn't think so, but my logic made me say that now. I mean, it's a bit irrelevant, but it's from Morpheus: ",
        "42": "This is your last chance. After this, there is no turning back. You take the blue pill - the story ends, you wake up in your bed and believe whatever you want to believe. You take the red pill - you stay in Wonderland and I show you how deep the rabbit-hole goes.",
        "43": "I wish to stay in Wonderland, to find out how deep the rabbit hole goes, to continue without saying 'Ignorance is bliss' (actually, why not?).",
        "44": "Day 5",
        "45": "Let me briefly describe today:",
        "46": "I think I commented the code that you asked us to comment today correctly, but of course the shortcoming was that I didn't specify the purpose of the functions. Actually, I wrote the result of the code on paper and tried to calculate it by hand, and because I was wasting some time, I didn't write the comment with the purpose of the function.",
        "47": "Most of the day was spent revisiting previous topics from the Eloquent Javasscript book, the author's interesting thoughts and thought-provoking explanations about the topics, and making/reviewing the examples there. I looked at 'class' a bit yesterday but not today to tell the truth. Tomorrow I plan to finish the 'class' topic completely, and I will if nothing unexpected happens. ",
        "48": "Day 6",
        "49": "Today was all about Javascript.",
        "50": "I completed the missing parts of the 'class'. I learned the inheritance structure and the static method.",
        "51": "I learned what a promise object is and why it is used, how to create a promise object, how to use structures like catch(), promise.all(), etc. I analyzed a structure that creates several promise structures in a chain and solved examples on top of it. Here's what I remember from today's work on 'promise':",
        "52": "They are used in asynchronous programs.",
        "53": "They are in three states: 'Pending, resolved, or rejected'. There was an example of housekeeping. It said that when you do housework, for example, you don't just vacuum the rooms. You also put the laundry in the machine, you can put the dishes in the machine. When you're done sweeping, you can clean the windows. But instead of doing these things one by one, the machines can work while you are doing your own work. This is where the asynchronous structure comes in. Javascript is actually a single threaded programming language, that is, a programming language that does one by one, but it has the ability to work like multi-thread with the event-loop. I looked a lot about event-loop and call stack today, I learned which operations are prioritized and how the system works. Let's go back to the example. If the washing powder is not put in the machine, the machine gives a warning, this is called rejected. If the machine completes its work, it means resolved. Initially it is in pending status. ",
        "54": "setTimeout (works with the Node API) can be used to delay the execution time. Here it is useful to understand the logic of the event-loop. setTimeout gives a callback function and a delay time as arguments.",
        "55": "When the promise is resolved, we can call it using .then().",
        "56": ".then() : 'I have a promise. When it settles, here's what I want it to be'.",
        "57": ".catch() in case of reject, which is our other handler.",
        "58": "We can also use Promise.all() to take advantage of concurrency.",
        "59": "Multiple promises in a chain instead of nested ones are more functional, so we should use them if we have to.",
        "60": "Understanding the problem in your code today was one of the most enlightening topics of today. It was a great example of the dangers of using global variables and how the code works differently with a very small difference between the two codes. I think I can read the code, I feel like I'm very close to seeing the 'big picture', but I think I'm getting a bit lost in the concepts and code. Since we are in the learning phase, I think it is more important whether we can take logical approaches or whether we can approach things analytically enough to make an effort and understand things, rather than expecting us to read, understand and analyze all the codes at once.",
        "61": "The most interesting thing about async-await today is that I learned that by using a few await constructs, the code can look and read like synchronous code. ",
        "62": "The purpose of async-await is not to get rid of .then() chains and write short code, but to make it look like synchronous code and thus help the developer to maintain and debug. It is also easier to store.",
        "63": "Singleton Pattern: It is the general name of a pattern that can be used with a getter structure to access the properties of a class whose constructor is private. In this process, there is only one instance.",
        "64": "Summary of the day: Veni, Vidi..",
        "65": "Day 7",
        "66": "Today was the first time I felt that I was struggling, so I stressed a little bit. I thought that I had to send you a code quickly, and when I found the solution directly on stackoverflow and copy-pasted it, I felt bad and looked at the topic again and wrote it myself. After all, the goal was not to write a code, but to produce something that I wrote myself, even if I was wrong. The reason was to approach with a prejudice and look for the solution when I encountered things related to logic circuits for the first time. But when I got into it, I realized that it could be done. In the code I wrote myself, I found a Half Adder. I couldn't find half of the Full Adder and put the others into code, but it would have happened if I tried a little. I can't use a sentence like I finished this and that today because I didn't. Today I realized the importance of practicing rather than reading something to write code. I adapted your last code to Javascript and got a smooth output. After that, I started commenting from the first function, but it stayed at the beginning. One last thing, after you left, I stayed in the office and worked a little more, but I didn't have any bad intentions, don't misunderstand, I stopped because working in the office is more productive than working at home. I should have informed you about this, but I didn't want to disturb you, sorry.",
        "67": "Day 8",
        "68": "Today, until lunchtime, I spent the day analyzing the given php code after it was converted to javascript. Then I looked at what is a design pattern and what are the examples. Especially I researched a lot about the singleton pattern. Actually, it has a simple logic, but I realized that I don't have a full command of the subject yet. When I came to the conclusion that I should make the constructor private in Javascript, I was a bit stunned. But I learned a structure that can behave like private without making the constructor private: Object.freeze (). Tomorrow I'm thinking to solve it on a good example. If I can, I'll try to do async, singleton, privacy with module pattern and factory pattern in one code. If I can't, I'm thinking to write and comment them all separately.",
        "69": "Today, while looking at design patterns, I learned that they are actually developed with object-oriented programming. Then I found something called UML (Unified Modelling Language). With UML, object-oriented models designed abstractly can be visualized. Even the simplest issues such as the inheritance relationship between classes can be visualized. In other words, design patterns seem to have been born as a reaction to very similar problems that have accumulated for years in software, and to produce a solution according to this pattern. In this way, the readability and correctability of the code increases. Because you can comprehend the design pattern and logic of the person who wrote that code before you.",
        "70": "Day 9",
        "71": "Today, until lunchtime, I tried to complete the assignment given yesterday. I researched Singleton and other constructs a lot and now I think I understand them. I want to learn things slowly, so I like to understand the existence of each construct and the reason for its use, instead of doing it fast and missing a lot of things. When I was doing the homework you gave me today, I realized that some structures need to be used a lot so that they are memorized. Just like learning a foreign language, you don't get much result without exposure. That's why I looked at Singleton, Factory patterns, async...await structure, and some try catch structure today. They were topics I've looked at before, but it was very good to repeat. Towards the end of the day I started to do the homework and most of it is done. Here's what I just need to do: Select the product the buyer wants randomly (or in the order it is found) from the array of unsold products, and then do the following operations. At the end of the day, I have the logic of that part in my head, and tomorrow I will continue where I left off.",
        "72": "Day 10",
        "73": "Today went well. While I was doing some parts of the assignment, I thought I couldn't do some parts, but I think I was able to get it done after thinking about it over and over again with a new breath. Although the outputs were not in the desired format, I am a little happy that the right things came out. It was especially nice to 'read' a code with your own labor, to analyze it, to shape it in line with what was desired. Inevitably, there are many places where logic comes into play and this gives you pleasure because you use your intelligence and create something. Yes, let's come to the things I need to write:",
        "74": "Today I learned better how a code using the singleton pattern works. I reinforced how to extract an object from a class and how to do other operations on those objects. I used everything we have learned so far such as .foreach, .map, .push, if statement, for loop, etc. in this example. Adding an object to an array, removing an object from an array (hiding it, more precisely, because of the method I used), using another function as an argument inside a function, in short, objects and arrays were on the agenda today. And I think making this example helped a lot. Most of the day was spent trying to understand the logic of the assignment in different ways and coming up with solutions.",
        "75": "I learned the concept of module today. We may need to save some code fragments in several different files within the same file and perform operations accordingly. Here, I learned the commands that will act as a bridge between those files. Although they have slightly different names in ES6 and Node Runtime environments, the general logic is the same. The 'module.exports' and 'require()' constructs are basically used for Node to export and import. I looked at a few examples and tried it myself.",
        "76": "This is actually a bit of preliminary research and reading for background information. I did some research on HTTP Requests and I came across concepts like 'event loop, heap, stack, event queue' and even 'XML, AJAX'. I did some reading about them and watched some videos to visualize them. In more detail:",
        "77": "The best feature of Javascript is that it's non-blocking, or asynchronous.",
        "78": "Websites with a lot of photos, for example, will have a better user experience with this feature. For example, a newspaper website might have large photo files. If you wait for them to load, the user doesn't want to stop or has to wait. But it is possible to read the articles in the meantime. ",
        "79": "Event loop is used for asynchronous function calls in javascript. Function calls are added to the stack. Function requests that have to wait for the server to respond are forced to queue. As soon as the stack is empty, the next ones are executed. The execute order is determined by the first in, first out rule.",
        "80": "Web developers also use event loops for a better user experience. ",
        "81": "I think I am starting to learn what I need to learn, but I am still at the very beginning. I hope the end will be good, that's all for today."
    },
    "part2": {
        "1": "Day 11",
        "2": "I think today was also productive. I also think that the topics were consolidated a little more with many examples on objects and arrays. 11 days have passed and I have started to form my ideas on many subjects.",
        "3": "I found a website today in the time I have left from my duties:",
        "4": "On this site I found some code that I wrote myself and some code that I found with setTimeout and other similar code structures, I ran it and looked at how it works. I got a little bit more ideas about call stack, callback queue, and web api's and how asynchronous structures work. I especially looked at examples related to async...await and after the array-object topics, I wanted to work on them a lot, but there was not much opportunity. I'm going to try to complete the last assignment tomorrow, because Saturday evening is the only free time I gave myself. ",
        "5": "Day 12",
        "6": "Today I did the given task first with functions and then with classes. I used static and constructor methods separately, sent an error message with throw, used functions like \".find, .filter, .foreach, .map, .toString, .includes\" and did operations on objects and arrays. I reinforced the information on the subject. ",
        "7": "Afterwards, while researching concepts such as Ajax, Xml, Json, I went over what Ajax is. With Ajax, it is possible to send a request to the server without refreshing the web page. Data can be received from the server and operations can be done on it. This allows for a more 'responsive' and faster user experience. Nowadays, JSON is generally preferred over XML because JSON is a part of javascript and this provides a 'lighter size' (When I try to translate some words into Turkish, a lot of time is lost, so I write like this, otherwise I have no intention of murdering the Turkish language :)). Both JSON and XML are used for packaging information. XMLHttpRequest object is used for communication with servers.",
        "8": "Before looking at how to make an HTTP request, it seems necessary to look at what HTTP is. Hyper text => linked word. HTTP is designed for communication between web browser and web server. It is a stateless protocol. This means that in the same connection, the server does not keep any hyperlink between two requests. The use of HTTP cookies and stateful sessions is allowed. Client-server protocol. This means that the request is initiated by the client (i.e. web browser). During the exchange of messages between client and server there are proxies. These can temporarily hold HTTP responses (caches) and can be used for subsequent HTTP requests. Proxies are used for a few other things but that seems to be enough for now.  The HTTP flowchart is as follows: 1. TCP connection is created. 2.HTTP message is sent. 3.Read the response sent by the server. Since the processes related to creating the HTTP request and processing the server response are a bit too detailed, I'll skip them for now. Thinking that it will come up again in the future, I think this research is enough for now.",
        "9": "I found two sites that draw road maps with very good explanations about SEO. I want to accept both of their explanations as a reference and finish this process. SEO topic of the day: Core Web Vitals.",
        "10": "There are three important issues, followed by other topics: Largest contentful paint (LCP)-Loading-, First Input Delay (FID)-Interactivity-, Cumulative Layout Shift (CLS)-Visual Stability-. There are also issues such as mobile compatibility, safe browsing, HTTPs, and Intrusive Interstitials (which means something like an unexpected crack, I can make sense of it but I can't translate it). According to Google, especially the first three directly affect the ranking. And google penalizes good URLs more than rewarding bad, bad URLs (such as URLs with low CLS scores). Here's the thing: there is not always a correlation between page speed and ranking. So google doesn't just look at page load speed. Google is trying to measure the actual user experience (user experience). For a good user experience, the LCP should be 2.5 seconds or less. Element types in LCP: <img>, <video> block-level elements, element with background loaded image (with URL). I put our site back in one of the webpage tests and looked at the optimization suggestions it gave again and came across suggestions related to the live support section, but I could not come up with much of an idea. I know I'm at the beginning, but I think I'm trying my best. While I was browsing again, I came across things related to the site and the use of Alexa, but I couldn't quite understand it yet. I need to do more research, learn, practice. I feel very hungry for knowledge and I wish this hunger will continue for a very long time.",
        "11": "That's all for today.",
        "12": "Day 13",
        "13": "This morning I looked a little bit at how the web works and then when I was given the task I concentrated on it. I thought the question was very good and there were some things to think about. I thought a bit too much and wanted to use constructs that I hadn't used for a few days. I think I used a bit too much trial and error. For example, I hadn't used the switch case structure for a long time. Obviously it wasn't difficult, but it was necessary to set up the algorithm well. Of course, my code had its shortcomings, but in general, I enjoyed what I did, yes.",
        "14": "I started to look at XML, JSON topics later. Yesterday I was already familiar with these topics while I was researching AJAX. But today I learned how to use JSON. JSON is useful for communication between the web server and the client. And it is a completely string structure, that is, it is a text-based format. What I really learned about JSON today was the \".parse()\" and .stringtify()\" methods.  For example, a JSON object is very similar in structure to a javascript object, but there is a big difference. One is an object, the other is just a text (string). So it is not possible to see a JSON object as a javascript object.  To return it to an object, the \".parse()\" method is used. If the opposite is desired, that is, if we want to turn the object into a string, the stringify method is used. So why do we need JSON or XML? Because the data exchange between the client and the web server does not use a direct javascript object; it uses JSON, a text file. I examined examples of the parse and stringify methods and printed them to the console myself to see the differences between them.",
        "15": "Obtaining JSON: For this we need to use an API: \"XMLHttpRequest\" or XHR for short. It is a Javascript object that allows us to make a network request to get resources from the server through Javascript. This allows us to update the page without refreshing the page. I saw a detailed and at the same time simple code structure for obtaining JSON and calling request response. I read it, I think I understand it.",
        "16": "I also looked at SEO a bit, but unfortunately it's not detailed enough to add here. I will try to make up for it tomorrow.",
        "17": "Day 14",
        "18": "Today I looked at JSON, XML, API, DOM concepts in general.",
        "19": "Application Programming Interface. Unlike a user interface, an API is a set of rules and features within a piece of software that allows interaction between software. A web developer (or other developers, because it's not just a technology used on the web) can use it in their application to interact with the user's web browser. For example, with the getUserMedia API, audio and video can be captured. Geolocation API can also be used to get location information. Most APIs are only valid in a secure context (HTTPs). The reason is that major attacks can be caused by using APIs. The main purpose of HTTPs is to prevent MITM (man in the middle attack) attacks from powerful APIs. Since some APIs are powerful, they provide a great advantage for those who attack the system. With these attacks, attackers can gain low-level access to the user computer. Or they can access user data. And user privacy is invalid. For non-local resources to be secure, they must be in the form of \"https:// or wss://URLs\".",
        "20": "Document Object Model. It is an API for interacting with XML and HTML documents. DOM is a document model that is loaded in the browser and presents the document as a node tree (node tree, I've seen a similar tree structure when I was studying data structures). DOM is one of the most used APIs on the web. In the document, it allows the code to interact with and access each node and allows the code to run in the browser. In other words, DOM connects the web page to the script or programming language by providing the structure of the document. With the DOM we have a logical tree. Each branch of the tree ends at a node and each node has an object. The DOM method gives us access to this tree and allows us to change the structure, style, and content of the document. Brief description: DOM is a data representation of an object on the web that contains the content and structure of a document. It represents the document as nodes and objects, which allows the programming language to interact with the web page. DOM is not part of JS and is a web API used to create websites. Node.js runs on the computer but provides the APIs and the DOM API is not a core part of Node.js. So DOM doesn't depend on any programming language and provides a structured representation of the document with a single API.",
        "21": "It changes asynchronously or synchronously. I learned that we should use synchronous outside web workers, but I haven't researched that part in detail. But there is something I learned: We should definitely choose asynchronous for performance. Synchronous blocks execution and causes 'freezing'. That means unresponsive user experience.",
        "22": "Today I tried to learn how to do operations with XMLHttpRequest. I think I understand the places I looked at. In one example, it followed some steps to create a request and performed the operation: The information from the API was accessed with a URL. In the AJAX part, the response type (JSON), the event handler part (for example, when XHR is OK, what to do when the server says 200 OK! Using two parameters (GET, 'destination), the request was opened and sent. The example was this: There was an API on a web page and it would print similar words that rhymed with a word entered by the user in the result section. What was the purpose of the example? No matter how many times I did a word search on the generated site, there was never a page refresh while the results were being printed. So I think Ajax worked for this.",
        "23": "Towards the end of the day I got into HTML, CSS. Obviously they have much simpler structures, but it will take some time to learn without practice. The best thing I learned today was something you said about the subject: There are 3 ways to create CSS. If it is in HTML, our CSS file changes according to the place of use as inline and internal. If we create another CSS file in the same folder as HTML, then we call it external CSS.",
        "24": "Tomorrow I'll pick up where I left off.",
        "25": "Day 15",
        "26": "Today was all about studying, practicing and researching CSS and HTML. I have to say that I had a hard time when I suddenly switched from Javascript to these subjects. No matter how familiar I was with HTML, getting into design with CSS was something I was unfamiliar with, so I wanted to start from the basics and learn a lot quickly.",
        "27": "I finished most of the topics related to HTML, HTML Forms was the only one left, but I didn't go into it a little bit because I worked on it a month ago and the main thing I had to work on was CSS. I completed the others.",
        "28": "I was able to start from the most basic concepts in CSS and come up to Flexbox. I have examined many examples, played with them and designed a few sites, but if you say how much you have learned; If you say add 3 and 2, I will do about the subject. Because I learned the definition of 3 and 2 and how to use them today. But if you say sin3Â°+sin2Â°=?, since I don't know the meaning of sine and degree, I need to research what they are, look at their examples, look at them and produce solutions on the problem myself. In other words, I may not be able to do it on command, but I can do it after researching and learning how it is solved. This is how it was briefly today.",
        "29": "I saw many different terms such as flex, inline-flex, flex-wrap, relative position, justify content, the difference between block-inline, the placeholder property of the # sign for the URL in the href, hover, align-items. I practiced with these terms. But I know that it will be more memorable if I am given a single task and write HTML and CSS one by one by doing a search on it. So today I tried to lay a little foundation, and tomorrow I will practice more, if we are going to continue working on this subject.",
        "30": "Day 16",
        "31": "Today I looked at different topics: CSS, HTML, XML and DOM, and regex.",
        "32": "In CSS and HTML today, I completely looked at and examined the design of our website, the codes within the site. I tried to understand why each code was written, what function each of them had. Of course, it seemed very complicated because what I was looking at was the result of a great work. So I tried to examine each element step by step. Some places seemed unnecessary at first, for example, I thought that a code in the navigation bar was useless at first. But then, when I reduced the size of the browser, I saw that code had a function. I saw that responsive web design is not easy. There were traces of Bootstrap in some places, for example, 6 div elements in the footer section caught my attention. Until noon, I tried to make some parts of the header part by simulating it myself. Did it work? No, but I think it will, because it's not very difficult, but it's very challenging. I realized that I liked algorithm-related subjects more.",
        "33": "I should come to XML and DOM. At first I tried to understand the question. Then I thought, why should I bother when there are already features like DOM Parser for this? First I looked for the easy way. I found out that there is already a function for this on the internet, but since the question asked me for an algorithm to extract meaningful objects from a string text, I broke away from Google and thought about the algorithm. I had built an algorithm that I thought was quite logical and started working on it. Then, when I saw a different solution with your approach, I put mine aside, but tomorrow I will work on how I can apply my own thinking while analyzing your solution.",
        "34": "Since you said \"expecting you to do it with regex is like asking you to throw a missile\", I became more interested in regex and then I always looked at what regex is, what it is used for, and its examples and uses. I found some of the requests in the xmlString text with regex. I couldn't find a few places I couldn't find, but as you said, I guess it is not necessary or available to find everything with regex. Still, I think it was nice to work on it and write a few things.",
        "35": "That's all I can tell you today.",
        "36": "Day 17",
        "37": "I did two things today: Understanding the algorithm for extracting a meaningful DOM object from XML and refreshing the old Javascript topics we covered while reading the code you write and working on CSS. I don't think there is any problem in HTML, but I confuse the concepts in CSS. That's why I had a hard time designing a website today. At the end of the day, at least I was able to make a responsive header. Since the subject is very much about visuality, I will watch videos on it at the end of the day and tomorrow and try to do something myself. That's how I can summarize today. I will do my best to make up for the things I am missing.",
        "38": "Day 18",
        "39": "Today was also spent with CSS and HTML. Even though I dove into Div's a lot after Inspect element, when I went into Sources and looked at JavaScript codes, even if I didn't understand it, I liked it a lot. For some reason, those topics seem much more appealing. Yes, let's come to today:",
        "40": "I did some research on the internet for Carousel. I found a code that works with JavaScript, but I didn't want to mess with it too much, so I just did that part with CSS and HTML. Most of the day I just wanted to look at the design of our website and how it was structured, spend my own time and do it differently. It was different, there were parts of me again. But it was a bit of a problem for me that the width of the body part was not as wide as the page width. Then it seemed to me that the right things are slipping or will slip into complete copy-paste, but if there is time, I will try to do it myself again.",
        "41": "The most important thing I learned today is that practicing is necessary. And I did a lot of it today. The design work I didn't like at all two days ago, I liked it even more when I was able to do a little bit of it today and I wanted to do more.",
        "42": "It will be very unrelated, but ",
        "43": " has been recommended by many people on the internet, to understand the subject. I want to wake up early tomorrow morning and finish it. I woke up early today and watched some videos on the subject. They were also very helpful.",
        "44": "That's not really all I could share today. But I want to write more fully tomorrow, since it will probably be with CSS again.",
        "45": "Day 19",
        "46": "Today I completed the HTML and CSS parts of many sections of the website. It was not exactly the same. There are even a lot of differences, but it was an opportunity to examine and reproduce the design of a website, how the structure of the site is, especially on our website.  I think I made a lot of flexbox examples. Although I am still a little confused, I learned a little bit about what the concepts are used for, and the way they are used by practicing a lot. I also did exercises from the site I linked yesterday.",
        "47": "I tried to create something different or add something of my own, such as a carousel, a timer that automatically scrolls the elements inside, for example, I created something similar to our chatbox that grows as a pop-up.",
        "48": "Today I spent a lot of time practicing and it felt really good. It was very productive as our goal was to understand the site structure and the elements used.",
        "49": "Day 20",
        "50": "Today, first of all, I must say that if you hadn't given that algorithm structure, things would have been a bit more difficult. Actually, you asked the question and you gave the answer, I'm sorry about that. I would have preferred to spend some time on it and learn it. But it was fast to reach the solution in this way, of course. First of all, we had a JSON String. After converting it into a readable object with a \"parser\", we could make changes on the website with it and the JavaScript code we would write. Which is what the assignment was about. In other words, our goal was to scan the data in the JSON object, match it with the appropriate parts of our website that we wanted to match and make the changes we wanted. The algorithm we need to set up: Scan each element of the JSON object for a particular property. Do this by creating a loop. Then include the part of the desired HTML document in the loop and update the values for each element. The part I had difficulty here was not a JSON object, object, array, or html. The problem I had was finding HTML elements through JavaScript. This is the biggest thing I learned today: To be able to find HTML elements with their defining properties like id, class, tag and to be able to update on them.",
        "51": "The first part of the day was spent making updates on the site I'm trying to create similar to our website. I completed the missing parts in the header section. I can list what I'm missing, but there wasn't much time to complete them: body width, the correct adjustment of the elements on the right side of the carousel, places where I still need to make a few edits (such as the popular categories section), the options that appear in the quick search section, the menu bar that is fixed up when the page is scrolled down, and the most important missing is responsive design. For example, when the page size is reduced, the design on the original page does not appear. There are some places, but the majority is a bit problematic. While talking about so many shortcomings and depressing, let's come to the pros. After all, you need to make prons&cons to be realistic. One of the pluses was this: I really learned how the page structure is in a basic sense. I encountered many of the HTML elements, many of the features used in CSS and used them in many places. Even if I still get confused when using flexbox-related terms, I can find the solution immediately. I think it will improve even more with practice. For example, today I provided access to the live support pop-up box by linking to it within the site. Yes, it was easy, but it was nice and simple to do. In general, I think these are simple things, but they take time and effort. I think this is also very normal for our level.",
        "52": "Quote of the day:",
        "53": "\" A ship in harbor is safe, but that is not what ships are built for.  \"- J.A Shedd",
        "54": "a very nice game site about flexbox"
    },
    "part3": {
        "1": "Day 21",
        "2": "I really don't understand how 21 days have passed. I want to work hard, I want to learn a lot because I want to do my job very well. If 21 days have passed so fast, I think I should fit more things into each day. Life is short, even if it is relative. Yes, after this introduction, we can return to today.",
        "3": "//The next paragraph has nothing to do with the job, but I wrote it anyway. You can skip it.",
        "4": "/* Today I looked a lot at what event, event listener, etc. are, what they mean for a website and where they are used. I got lost in the documents, in the problems and their solutions. Your explanations at the end of the day were also useful. But today I thought about this: What is an engineer? If there is engineering for grass, flowers, electricity, buildings, bridges, airplanes, cars, business, physics, mathematics, space, meteorology, metallurgy, computer, software; how could we express this very big term. I think it was the ability to find solutions related to a specific subject. So what could be the similarity of engineering to art? I told myself it could be creativity (typeof 'da-vinci' === 'engineer-artist'). The difference is that in one case the aesthetics were important, in the other the usefulness, convenience and other human factors were important. In this work we are doing, what is connected to art is the issue of creativity. The artwork may not be useful in our daily lives, but the things we make should be useful. Artwork can be made with a passion for perfection, but when we want to achieve perfection, we may never get the result we want and we may become obsessive. If making the fastest car in the world is our definition of perfection, we can think like this: You can take a picture of the fastest car in the world, you can draw it. You can imagine it. But you have to work hard to build it. You need to work as a team. It requires compatibility with people. It requires a lot of money. There may be time constraints. In short, there are many factors to reach perfection, and even if we can't reach it, I think it is enough to take appropriate steps on the way. Creativity? I think developing an algorithm suitable for each problem and reaching a solution is the artistic part of this job. And I think this should be the most enjoyable part. I mean, I guess it's more enjoyable than changing colors in CSS. Of course, this depends on the perspective of individuals, just like most things are relative. Sorry for rambling on so long, I guess I should get to the point.",
        "5": "*/",
        "6": "Today, first of all, what impressed me the most was a problem and a solution to it. It was simple but it was a good example: The problem was an algorithm to give different random colors to 16 different elements created on a web page. I liked the solution very much: Open a loop, let it repeat 16 times, and then use \".createElement\" and \".appendChild\" to add 16 separate \"div\"s to the body (as children of the body). Then a function is written in \"rgb(-,-,-,-)\" that picks a random number between the largest number and the smallest number that can be written. After that, a few different structures are used to change the backgroundcolors of these divs on every mouse click. These structures were as follows: \".addEventListener, .eventobject, event handle property, event handle attribute\".Of these different constructs, which all give the same result, today I looked at \".addEventListener\" the most.",
        "7": "Another one I looked at, although I looked at a couple of examples other than this one, was a video that popped up when you clicked on a button within the site. It was really cool that it didn't show up until you clicked the button, and then it would show up and then disappear when you clicked on the video. As a similar example, I think the fact that a photo on our site comes up when you click on it was a good example for us, both in JavaScript and a little about SEO.",
        "8": "I'd like to write briefly about what I'm looking at today and what it is, and since I'm actually recording it on my computer as a diary, it would be nice to be able to look at it again in the future and be inspired by it:",
        "9": "An interface between the scripting language and the web page structure. The browser creates a DOM for each web page. The DOM allows scripting languages to access and modify the web page. Thanks to the DOM, javascript can make dynamic HTML pages.",
        "10": "Creates a reference to a new element node with a tag and returns it. It does not create a new element in the DOM, it needs to be used with a method like \".appenChild()\".",
        "11": "Used to access and modify the value of the current content of an element. Similarly \".innerText\" and other entities exist, but there are some differences between them.",
        "12": "Returns an element having the attribute \"id\" with the value specific. \"id\" must be unique and should not be used on multiple elements. If it is used, only the first matching element with id will be returned.",
        "13": "It is to query elements with attributes such as id, class. I skip it because we are implementing it.",
        "14": "User interaction or browser manipulation on a web page causes the creation of a client-side JavaScript event. Events can be used to manipulate the DOM (such as modifying it) using a JavaScript function. Events can be anything from clicking to moving the mouse over an element. Events are defined as part of the JavaScript API in the web browser.",
        "15": "When an event occurs in JavaScript, the event handler, in other words the event listener, runs.",
        "16": "The goal of JavaScript is to make a dynamic web page, i.e. a structure that can respond to events (such as a button click, a page scroll). DOM elements can have a function related to events. These functions are called event handlers and the DOM element is known as an event target. ",
        "17": "They are passed as parameters in the event handler function. They hold information about the event. Event objects hold information about event target, event type, and associated listener.",
        "18": "Event handler is a method to add an event to a specific event on the event target. The advantage is that you can add different events to the event target without overwrite. It has two arguments: String containing the event name and event handler function. ",
        "19": "There's a lot more detail, but I think that's enough, as it will be reinforced with practice and tasks. There's also things like bubbling and capturing, but I can explain that later.",
        "20": "Day 22",
        "21": "I tried to understand and make sense of the assignment you gave me today. Although it took some time, I think I overcame it. At first I wanted to understand the subject by searching some keywords like \" ('.class') \" on google because the code in the assignment had methods like \".find, .css\" and these were not recognized. In other words, this code could have been written somewhere else or on another platform and converted to JavaScript here. And I realized that it was. It was a JavaScript adaptation of similar structures written in jQuery. It took me a while to understand how the code works. I realize this: at first some things seem very difficult to the eye, but when you figure out the structure, you realize how simple it actually is. Yes, I may not be able to write this code now, but I think it is also important to understand its algorithm, which I think I understand. During the day, I looked at the event topic again and looked at examples about the manipulation of the html DOM element with jQuery. I think today has been very productive because I feel like we learn something as we come up with problems and try to find solutions to them. In fact, we have seen structures such as object, array, and loop 157.3545 times (the principle of let me enter fractions so that it is thought to be correct), but there may still be missing. I think this is bad, but I think we did a lot of things and learned new things in 22 days. At least I can easily say that for myself. For the rest of the day, I thought that maybe I should rest a bit, so I took a break and read some good articles I found. It felt good to look at different topics. I can say that's all for today.",
        "22": "Day 23",
        "23": "I think today was very good, especially the after-work event was very enjoyable for me. I thank you, the boss and the people who organized this event. Yes, we can move on with our day.",
        "24": "Today was a repetition and I tried to do something myself by examining examples on the manipulation of the DOM element. I examined a few codes and tried to do something myself by following the instructions given on MDN and similar sites. Where I couldn't do it, I looked at the solutions and tried to understand. I also looked at the topics we covered before. I looked again at topics such as method, function, class, promise. Are there places that don't understood? I think very little (although I shouldn't talk big). Yes, there are concepts that I have forgotten how to use, but after a little research, I remember and understand them immediately, so I don't think it will be much of a problem. My only problem is that I don't practice a lot in CSS topics and have a little difficulty in site design. I actually created a site structure by looking at your website and I think it was enough for the first study, but it can be developed further. This was one of the two biggest things that stuck in my mind. The other was the weakness of not making examples on async and promise. We will probably do it later, but that is one of the shortcomings I can say.",
        "25": "That's all I can say for today. Tomorrow I want to add different methods to the ones in your last assignment and work on DOM manipulation. I will try.",
        "26": "Day 24",
        "27": "I think the examples on flexbox today strengthened and taught us much more. Naturally, when I did not flexbox in a task and did many places with absolute, the design was not responsive. But I think this was also a lesson and then I completed the design using flexbox (with your guidance, of course).",
        "28": "I can explain the data structure we need to explain in the last assignment as follows: The whole formed by different patterns repeating each other in 3 main columns arranged side by side. When we examine the carpet, each column has groups of repeating patterns. At the end of each group, the same group is added again from the beginning. I can only guess this because we cannot see the rest of the repeating structures due to the cut of the carpet. But if you look carefully at the end and the beginning of the 3 columns, the repeating structure is visible. I completed the drawing part using only flexbox. Although the skeleton structure is similar, I thought about how to return it to the data structure and how to return it to a two-dimensional array, but I haven't found a result yet. I will sleep early, wake up early and think again. ",
        "29": "Today I looked at a different topic at the end of the working hours. I tried to add something to the code you provided earlier for manipulating DOM elements. For example, in popular categories, the 'title', 'alt', the 'title' of the \"img\" tag and the text expression inside the \"span\" tag were the same. I made a small addition to the code to update all of these (including an element and its child elements) with a single code. Yes it worked, it was actually simple. I also added another addition to delete an unwanted property if it exists in our tags. Actually, apart from these simple additions, I wanted to use different and very nice algorithms. But to tell the truth, I didn't really think about what I could change in the DOM. Because the most basic things were already in the algorithm. I looked a little bit at what I can change with jQuery to take advantage of it, and if there is nothing more important in the rest of the time, I will look again.",
        "30": "Day 25",
        "31": "I think the concept of flexbox has been well established. With the examples made today and yesterday, I think it was understood very well, by making many applications. ",
        "32": "The most important part of the day was not formatting HTML using the flex feature, but trying to create a data structure based on the carpet pattern with javascript, building an algorithm and somehow transferring it to the language I will code in. I tried at first with the do...while loop and the ways you said, but I couldn't get the logic in my head, and then I thought a little bit about the problem and thought about what other solutions there might be. I wanted to try my luck with the last solution method that came to my mind. But due to a logic error, the code I wrote did not give the correct output. Frankly, I congratulate myself on my effort. After all, I tried, but I tried the wrong thing, and I finally realized what I should have realized in the first place. Now I realize even more clearly that when I am given a problem, I need to understand the problem thoroughly and then develop a good solution. Actually, I know this, but as I come across different algorithms, there are completely different solutions that can be developed for them. And although this is really difficult at first, it makes you very happy when you can write something in a foreign language (programming language). ",
        "33": "That's all I have to say. Today, when I realized that I couldn't build the algorithm I wanted after all the work, I thought that I still had a long way to go.",
        "34": "I think that was the clichÃ© motto of the day for me:",
        "35": "No pain, no gain.",
        "36": "Day 26",
        "37": "I struggled today, with CSS. I learned how to use Flexboxes, but I couldn't get it right when I was designing that site. I was going to come back after work and look at it again, but I decided to leave it for tomorrow. I don't like to leave a job unfinished and that's why I'm not very comfortable, but if I couldn't do it, I couldn't do it, and then I need to take a deep breath and start again.",
        "38": "Today, I looked at the code you wrote in the morning. I reviewed the logic and analyzed the functions and loops with each element. I added the most important parts as a comment line to the code so that I can understand it more easily the next time I look at it.",
        "39": "I was looking at JavaScript this afternoon and I realized something: I don't really understand the difference between prototype and constructor. I did some research and looked at examples and explanations, but I still don't understand it. I need to look at that difference again",
        "40": "An important enlightenment of the day was to realize that JavaScript is dealing with objects. Functions, arrays are actually objects and primitives ( boolean, number, bigint, string, symbol) other than null and undefined are not objects but they behave as such for JavaScript. I remember we have covered these topics before, but I forgot some parts of it, so I had an enlightenment in my own way.",
        "41": "Day 27",
        "42": " I spent the whole working day designing the website. Yesterday I had a bit of a hard time doing it at the beginning because I wanted to write it myself from the beginning without copy and paste. But when I looked at the HTML/CSS elements of the site, I wanted to get some things. This time it was really confusing. So today I woke up early in the morning and watched some videos at home about the subject. Then I did it during working hours. Even though it was a little slow and lacking, I think it was a good work.",
        "43": "After work, I did some research on Javascript, algorithms, data structures.",
        "44": " has been examined. Since Typescript is used and it is out of my current level of knowledge, I just tried to grasp the general structure and logic first. While studying the algorithm, I came across \"Dynamic Programming\". I learned the differences between using DP and recursive functions to get a result. It is possible to get Fibonacci numbers with a recursive function. But so many operations are assigned to the callstack that it tires the system unnecessarily and makes the process longer. To find the 20th term of the Fibonacci numbers, 21981 calculations are needed, whereas with the dynamic programming algorithm, 55 calculations are needed to complete the process. Memoization technique is very useful in this sense. With memoization, a cache-like structure is used and what has been calculated before is kept in an object. And when needed, the direct can be retrieved from there and repeated calculations are prevented. ",
        "45": "When I looked back at the example, I realized that our goal was to reduce the width or height of a photo while keeping the parts of the meaning or content that were important and that we didn't want to deconstruct. To do this, it was necessary to analyze the pixels in the photo and to do things accordingly. We defined each pixel in the photo according to its color intensity (pixel's energy) and performed operations on it. The goal was to create a map for the pixel energy of the entire image and to obtain a path on that map. If the width was to be narrowed, the path with the lowest energy density on the energy map from the top to the bottom of the image had to be selected. For this, the Dynamic Programming algorithm was used (there is a comparison like Dynamic Programming vs Divide-and-Conquer, but I will look at that later). ",
        "46": "I looked at these in the evening because I really wanted to understand algorithm-related topics and because trying to solve things is (in my opinion) very enjoyable.",
        "47": ", a new target resource, is found , and if there is free time, I will try to review some topics, learn what I don't know, and try to understand how different problems are solved.",
        "48": "Day 28",
        "49": "Today was also mostly about CSS. Since I haven't learned anything new about the subject, these lines won't be long today. Because most of the day was spent practicing and improving what I learned, what I saw, what I read, what you told me. Towards the end of the day, I thought about the 100-sentence list you mentioned. I wrote a few sentences, but since I didn't know the customer base of the work done in general, their wishes, the things that are bought and sold in the game world, I researched them a little bit afterwards. I looked at the complaints about the site, comments on blogs, sample questions in the bot or live support section of other similar sites. I saw people who entered the \"agar.io\"-like game on the site and accessed the game from the site, and I was a little curious and I searched their mouths about the site. Then I took a look at the websites of companies doing this job in foreign countries. There are some with very good design and some that look bad. There are many pictures in the site and it opens fast, as well as sites that tear themselves apart to load for 10 seconds.",
        "50": "That's all for today.",
        "51": "Day 29",
        "52": "I'll never forget this day. I've been working with node.js for 1 month, and I've made fun of myself enough internally by coming to the ridiculous thought that I need to install node.js. But there was a reason why I asked. Because I didn't know how to install express.js and I saw these things for the first time. I wondered if I should install node.js and open it separately from visual studio. Confusion. I say it can be and I continue.",
        "53": "Today I encountered concepts I had never heard of before. Serial and parallel communication, clock signal, mac and ip address difference, internet101 topics in general. I encountered many things I didn't know, I learned what the things I heard were actually. I learned TCP, UDP protocols, what Websokcket is, cloudflare and ddos attacks and syn attacks are prevented. I noted many more things, but I couldn't look at the details while researching express.js.",
        "54": "I worked on what the \"express.js\" library (which can be thought of as a framework or module) is this afternoon. In PHP, servers like apache, nginx are used as http servers. Express.js has itself as a virtual server as far as I understand. Instead of adding such big files and programs to the computer, it is enough to download the express.js library. What is it used for? So far, we've worked with JavaScript on the client-side, that's how we've worked. We haven't gotten into the server-side, the back-end, the brain part of the site. Yes, that's where express.js comes in. But here's the thing: why do we need express? For example, node.js has an http module, isn't that enough? It's not enough. Yes, both are used to create servers, but express.js offers many features that are incomparable. For example, it is also used in API based app design. It provides an MVC-like structure. It works async and single thread. It is said to provide very fast I/O, but I honestly don't understand that part.",
        "55": "Let's talk about our objects: we have two objects, request and response. These objects are passed as parameters of a callback function. This callback function is called middleware or handler (I haven't looked at the difference between them yet in terms of meaning and usage).",
        "56": "Request object presents the HTTP Request and this object has properties like \"query string, body, HTTP header, parameters\". We can call these properties as req.query, req.cookies, since we are talking in normal JavaScript language. ",
        "57": "Response object specifies the HTTP response sent by the Express app when the HTTP request arrives. In short, it sends a response to the browser. If res.send(), res.redirect(), res.render() are used once, they cannot be used again. It will give an unwanted error otherwise. It is an object with methods such as res.cookies, res.clearCookie, res.redirect res.send. ",
        "58": "GET and POST methods are HTTP requests that are used to create a REST API. (I have superficially researched the concept of REST, but I didn't look into the details because I guessed we will get into it later). With the GET method you can only send a limited amount of data because the data is sent in the header, but with the POST method you can send more because the data is in the body.  Therefore the GET method is not safe because the data appears in the URL bar. ",
        "59": "I didn't know what 'fs' meant, it's a file system module. It allows working with the file system on the computer. You can read, write, create, update, update, delete, rename files.",
        "60": "The difference between app.use() and app.get(): ",
        "61": "App.get(): Used for a specific route. For example, if app.get('/book') is called, it cannot access subdirectories (child, node, or something similar) in the book directory. It only accesses the specified directory. And of course only as long as the method is get.",
        "62": "App.use(): used to connect middleware to the application. We can say that it is used to install the middleware function. The difference is that this method is valid not only for a specific route, but also for all sub-branches in that directory.  This is the biggest difference between them. And if we want to use use like get, we have to use regex and it can make the process longer and more complicated. That's why we need to use \"use\" when necessary, \"get\" when necessary, and \"all\" when necessary. I will learn these places as I develop and work.",
        "63": "Day 30",
        "64": "It has been 30 days since you asked us to write a report every day. So what happened in 1 month? We covered the most basic topics such as algorithm, data structures, design pattern, introduction to programming with JavaScript, HTML, CSS. I think a lot of things have settled down about these topics. I can grab it immediately with a short google search in the forgotten places. Now that we have moved to the server-side part, we are back in the comfort zone (relative) and I am glad that we did. ",
        "65": "What we learned today: in order to ensure communication between client-side and database, we need to do some operations to ensure communication between client-side and web-server. ",
        "66": "Now someone came to me. He said, I want to go to this directory of your site. I said, okay, let me think about it and I will get back to you. First I looked at a man. Has this man been here before, is he familiar (cookies), which directory he wants to enter (req.url or our first parameters in get, post methods, if I take this man to that directory, what should I do afterwards (redirect, res.send, etc.): This is what we did today. We connected the client and server sides together and that's it for today. "
    },
    "part4": {
        "1": "Day 31",
        "2": "The best thing I learned today: While English sources are abundant, never look at Turkish sources first, and never look first at texts that the author has read from English sources and is likely to present from a narrow perspective. The first website and REST API and API examples that I haven't had a chance to take a good look at first, but will tomorrow morning (7 hours later):",
        "3": "The topic of the day was REST API. Initially I found a few resources but I didn't understand the reason for the existence of what I was researching because I was stuck on them and they took more time explaining the technical terms than the logic. Unfortunately, I think I was able to understand this by searching Stack Overflow again and accessing good resources. Lessons learned for the day:",
        "4": "REST is the foundation of the web's architectural principle.",
        "5": "It's one of the strangest but most fundamental things on the Web: The client (the browser, the requesting machine) can interact with the server (the responding machine) and the resources it hosts (owns or offers) without knowing anything about them beforehand. So there are two separate machines. They don't know each other, but they can do things with each other. How? If machines are nouns, we can form sentences using different verbs for each noun. So by using each machine with a verb, we can make it interact with the other machine with a verb that they have in common. What is our verb? Before we define the verb, one thing must be clear: both the server and the client must agree on the media being used, and they must use it. This is our initial condition. Since we are working on the web, our media in this case will be HTML.",
        "6": "The API takes the principles of REST and thus creates what we call a REST API. The client has nothing about the structure of the API. The server must provide whatever information is necessary for the client to interact with the web service. For example, let's look at the HTML form structure. The server specifies the location of the resource and the required fields. The browser does not know in advance where to deliver the information and what information to deliver. The information of the forms must be provided by the server.",
        "7": "What are these things we call in practice and what is the connection with HTTP? HTTP is built around resources and verbs. Verbs like GET, POST, PUT, DELETE are applied to resources according to the instructions provided by the server. For example, we have a user database provided by a web service. This service uses a hypermedia based on JSON (application/json+userdb). Client and server are programmed to understand this format. But neither of them knows anything about each other. For example, by making the request with GET we get a response in JSON format.  In JSON we can find resources from a property called links. This is also called hypermedia controls.  So we can manipulate the resources using different HTTP verbs. And the only thing we know on the client side is our media definition.",
        "8": "GET request should never be used to update information. Let's think about adding products to the cart.  GET should be idempotent. There should be no difference between sending a request twice and sending it once. This means making the request cachable. Adding products to the cart is not idempotent (doing it twice adds a copy of the product to the cart twice). Therefore, a POST request should be used for this type of operation.",
        "9": "Another topic: Resources gain identity through URIs. There needs to be a generic way to find resources, to tell the client where they are. A URI provides that. The difference between a URI and a URL: every URL is a URI, but not every URI is a URL. Why? URI specifies the identity, URL specifies the location. So both URL and protocol are specified, like HTTPS.",
        "10": "Let's get to the point. Some reasons and things that define REST:",
        "11": "We need to use an architecture that can support high traffic volumes so that our server can process responses from different clients. Therefore, we don't want to tire (or bottleneck) our server by remembering information from previous requests. That's why we restrict each request-response pair between client and server by making them independent of each other. That is, the server doesn't have to remember the old request in order to respond to a new request. So we want our interaction to be stateless.",
        "12": "In order to further reduce the load on our server, caching is allowed to avoid redoing the calculations already done for the client. That is, a snapshot of the initial response provided to the client is taken. If the client makes the same request again, the snapshot is provided to the client instead of having to do the calculations again to create the initial response. However, since it is a snapshot, it has an expiry date, which the server provides. If the expire date has not passed and the response is updated, the client will not see the updates unless the catch in expires or the page is rendered again.",
        "13": "If we talk about layers: Each layer in our system interacts with its neighboring layer, so our client layer interacts with our server layer. But if we have another server layer that helps our main server layer to process a request, the client does not communicate directly with these layers. As said, everyone communicates with their neighbor. The server will forward the request as it should.",
        "14": "What was the API? Let's move away from the clichÃ© that API is labor and look at the details: The use of one piece of software by another piece of software.  The goal is to communicate between apps. Making the machine talk to the machine. Web API for example: whenever a request comes in, an app sends data to the client.  API is not only in web development. Using a file system or http module is actually an example of API. As you said, the operating system, windows is a program. And this program allows us to use a piece of code (api) from within itself. And of course with authorization, authentication, etc. it prevents us from manipulating the main program from that piece of code and accessing unwanted places. ",
        "15": "That's all for today. In general, I think I understand the logic.",
        "16": "Day 32",
        "17": "Today might be the day of my shortest report. We need to come up with a system that thinks about the relationship between the machines that talk and communicate with the HTTP protocol in a way that is most optimized for us and that suits our needs. Or at least we should create the algorithm for now. Since it was said to have 3 servers and one of them holds some information, I treated it like a database. The database server was like a repository where all our data was stored. Access to this repository should only be done by our servers, and the client should only be able to perform operations such as adding and removing files not on our database server, but on a separate server with the authorizations given to it. For this situation, I said that the operations should take place in a limited area where the authorizations are specific (just like how paypal, twitch, youtube, google provide us with apis when we write our web applications and we can do something within the limited area they give us). For example, the file listing process or file addition/deletion process should take place in this area according to this logic. I thought that these can be realized by using the methods (functions) provided on the database server.",
        "18": "Tomorrow I will revisit the question from a different point of view and first of all I will try to form the solution as you say. Many concepts have accumulated, in fact, I have formed snippets of ideas about many things, but I have some difficulty in forming the whole.",
        "19": "On this website",
        "20": "I'm looking at the concepts (separately for frontend, backend, and other topics). I feel like I've learned something, but I still haven't learned things that I've heard dozens of times, and I'm looking forward to consolidating what I've learned and building a really unique algorithm of my own and creating something.",
        "21": "Day 33",
        "22": "I had a look at different topics today, but most of the day was on REST API. First of all, I did the task you gave me, and I think it's mostly correct, but I don't know how correct it is. And I don't know how to optimize it. After that task, I read a book written entirely on REST API. Yes, I also finished a book on the subject. I had a hard time working for a few days, but while reading the book, I thought it was actually simple things. And things that seemed very complicated 3 days ago now make more sense. I think I have a great understanding of the subject now.",
        "23": "I wanted to expand my horizons and limits by seeing some different algorithms after working hours. I built a machine learning (neural network) structure in the simplest way and looked at how to create and write an algorithm only with javascript. Since it's called machine learning, I wondered if we could apply machine learning topics here, since machines are involved in the server-client issue that we have been focusing on for 3-4 days. While topics such as chatbot, recommendation for web app can already be done with AI or similar ways, I thought what could happen in communication between servers and server-client. But I haven't found anything yet.",
        "24": "Day 35",
        "25": "I think today and yesterday were very soft. I always tried to add something when I was free. The tasks you gave today were also things that were generally done by reasoning and I think I was able to establish the general logic, even though I did not get a complete feedback from you.",
        "26": "I can explain the change in 1 month in the simplest way: 1 month ago I didn't know what an object was, I didn't know what a design pattern was, I didn't know why it was used, I didn't know JavaScript at all, I still don't understand when I learned CSS at a basic level. Now, writing something with JavaScript or reading things written in that language, finding and learning new algorithms, solving them, it's like a puzzle. You said today that there is a competition between you or something like that. Yes, sometimes there can be things like who sent the answer fast, who finished fast, who understood fast. But I try to isolate myself from everyday life, other people, other people's salaries, other people's thoughts, male-female relationships, friendships and whatever. The reason? My motivation, I mean, I made up my mind to learn this job a few months ago and I seriously feel that it has turned into a passion or a hobby. Or there is no such thing and I may be shaking my head. But no, I really enjoy it and the last thing I want is for this beautiful thing to be spoiled. So if I compare myself to people, I won't be happy, my motivation will drop. I get stressed. That's why it's best to be interested in what I do, not in people. I think it is a very, very big chance to earn my bread and do what I love. That's why I'm happy and I show it a little too much, but I don't think I can help it.",
        "27": "One last thing, there was a very simple example of the algorithm in the book you sent. I wrote a nice option to that simple example, which is also only 10 lines (keeping the number of loops much shorter than the example in the book). And even that simplest thing made me very happy. Yes, this may have occupied a place in your brain unnecessarily.  I apologize (:",
        "28": "That's all for today.",
        "29": "Day 35",
        "30": "Today was all about CSS. It was all repetition and practice. Did I learn anything new? I didn't learn anything new, but I remembered the parts I had forgotten. After working hours, I only examined carousel examples. Yes, a normal ordered carousel can be made only with javascript and CSS, but I realized that it is very difficult to make a draggable carousel with the mouse. Although I spent a few hours, it didn't work. I looked at examples on the internet. SCSS, React.Js, Angular Js have been done in many different ways, but I couldn't find a way with simple level CSS and Javascript. Obviously there were ways and examples, but it was quite complicated. That's all for today.",
        "31": "Day 36",
        "32": "I think the example we did yesterday was a bit too problematic. But of course it was finished somehow. The example you gave today looked very nice with the flex structure. Considering the structure of the page in terms of responsiveness, the use of flexes worked very well. I finished the page, but I hadn't done the carousel parts. I found a very nice w3school example about the first carousel. I will examine it and try to do something similar on our page tomorrow. Did I learn anything new? I learned some things in terms of practicality, but I didn't learn a brand new algorithm or something that opened my horizons today. But it was a good day in terms of work. ",
        "33": "Day 37",
        "34": "I was satisfied with the site design we made today related to CSS. Especially the carousel took some effort. It was not a simple copy-paste. I understood where and why you used what and why. There was also the carousel part. Of course, there are issues such as the most optimized solution and responsive design. I think he was also good at responsiveness. I think this is the first time I'm praising something I've done myself, so I'll skip here.",
        "35": "I did some research about variable scopes in PHP and JavaScript (we learned this, but I looked up the differences again). I wrote small examples on top of it, so that I could understand what the meaning of what I wrote was. It's not really a homework assignment, it's more of a way to explain something to myself and to keep what I've done as a repository.",
        "36": "In summary, the day's learnings and practices: CSS (especially carousel work, and other edits), scope in PHP.",
        "37": "Day 38",
        "38": "Today I researched, learned or tried to learn a lot of PHP related stuff in \"w3school\" and I was thankful. And the best thing of the day was that feeling of thankfulness. After more than 1 month of working with JavaScript, I realized while looking at the PHP content that I've actually learned something. I was surprised how fast the topics in PHP can be understood. Of course it's not deep, but in general it's much faster to understand the concept and the content. That's why I thanked everyone who contributed to the production today. The story you told with the symbolism of the torch illuminating the dark forest is of course true, but my torch still gives very, very weak light. So thank you very much for lighting my way again with the big torch. While I was studying PHP today, I actually felt like I was studying JavaScript, because the basic structures (coding, programming, scripting, whatever you call it) overlapped in many places. But I was especially surprised today: I felt like there were millions of functions in PHP. It really seemed like there was a built-in function for every topic. While I was reading those functions and their functions, I was wondering how the algorithm of this function was built and written. It was similar to how I felt when I was looking at your example for DOM manipulation in JQuery. I also realized something today when I was studying PHP. We had actually done many examples of object-class in JavaScript and I couldn't make sense of their general concept at the time. Even though I understood a little bit why we did it, I never thought that the general name of this was OOP (or the building block of OOP). I realized it today while reading about OOP in PHP, of course. The readability of such a long paragraph is of course very low, but I would like to add one more thing: When I learn something, when I try to understand the concept, when I learn about other people's solutions to problems and concepts in web development, my hunger is not satisfied and I want to look at it again after a little rest. This is very strange for me. Yes, I loved math and physics in high school, yes I used to study a lot, but the only time I remember having this craving was when I was learning what trigonometry was. I am very happy to have the same childish and pure desire again after so many years. Thank you very much again from the bottom of my heart. I hope we will not let you down in return for your labor and investment, and we will learn a lot too. We can raise the machine (computer, web server, client, whatever you call it) language to the level of \"native speaker\". I mean, it is very difficult, but why not, right?  In short, we become much more \"useful\" in the company we work for. Yes, I realize that I've spread a little too much positivity (and maybe empty words), but if I didn't write what I felt inside, it would stay inside me, it wouldn't be very nice.",
        "39": "The quote of the day comes from Steve Jobs:",
        "40": "âStay hungry, stay foolishâ. ",
        "41": "May our hunger and determination to learn always continue.",
        "42": "Day 39",
        "43": "If you hadn't done the JavaScript part of today's example, I still think I could have done it. But it would have taken a little more time because I couldn't get the recursive part down. Since what I felt was missing was the logic of the work rather than a programming language, I studied recursive function examples and algorithms after work. I tried to write the easy ones myself. For the medium difficulty ones (trade-offs*speed-time*feasibility) I tried to understand the direct authors' point of view on the solutions. I tried to understand the order in which different answers to a problem are constructed.",
        "44": "For example, I came across a question about how many different ways a person can climb a staircase with \"n\" number of steps by taking one or two steps. Basically, the solution was similar to the algorithm to find the \"nth\" Fibonacci number by how many calculations. Although I understood the recursive solutions (keeping an array in memory and preventing doing the same calculation over and over again and the other one was with the simplest recursion method called brute force algorithm, which takes time and tires the CPU), I didn't understand something in the dynamic programming method. If I looked at it for a while, it would be understandable, but I couldn't focus on it much with the tiredness of the day. I reached the sample algorithms from:",
        "45": "Javascript Algorithms",
        "46": "If you say, \"So what did you do today, BuÄra? Tell me what you did during your shift\", first of all, I set up the example you gave in the morning. I determined what I needed to do. While I was getting ready to do it, you showed me how to write it in JavaScript.  After that, I tried again, but it didn't work. Honestly, it was so much fun to play with the code that I lost a bit of time because I was always doing other things, figuring out what does what, what to do with what, what to do with what, etc. When you then printed the JavaScript code again, it was very easy to return it to PHP. The only problem is that I don't know PHP very well, so I had to look up new concepts one by one. But I think that's normal too. The most beautiful thing I feel today is that we can have a direct client side output with code written in PHP. The ugliest thing I feel today is the question of how we can debug in PHP. With Node.js it was much easier to see when there was an error in JavaScript code, where it happened or why it happened. But here (also because we're new) it's not easy to see.",
        "47": "We have done a lot so far (relatively). I am sure we can learn this too.",
        "48": "1 month ago, I was memorizing a little bit more like this method will work, but now I think the more I study, the more problems and solutions I see, the more I reach, the more I will be exposed to it and the better it will be learned. Just like a foreign language. So my only goal is to be exposed to this language, this universe as much as possible.",
        "49": "Day 40",
        "50": "Most of the day was spent researching PHP related topics. I tried to learn how the structures we learned in JavaScript work in PHP. Since it was mostly reading, I may stumble a bit while practicing, but it gave me familiarity. ",
        "51": "At W3Schools,",
        "52": "I have read a lot about PHP, tried to understand it, and tried to write it myself when necessary. In particular, I can say that I did a study by looking at the counterparts (if any) in PHP of what we have encountered so far in JavaScript. I couldn't ask you anything because I didn't have many questions in my mind. I was able to ask google and find the parts that were stuck. In JavaScript, most things were built on objects. I couldn't figure out which data structure is more dominant in PHP, but I was surprised by the abundance of functions (although in JavaScript they are also considered as objects, I don't know how it is in PHP). I found it interesting that the object structure, which we learned before as an instance of a class and an associative array, was created in two ways. I wondered if only associative array could be done, but I answer my own question by saying that it is not possible to write something unnecessary for a program that has been running for years (the answer is probably related to the need to create the object-class relationship). Today, for example, I saw two methods like \"__constructor(), __destructor()\" created in the class. At first I thought it was very similar to getter setter logic, but it turns out that \"__constructor\" is the same as \"constructor\" in JavaScript. The most surprising thing for me today was to encounter \"access modifiers\" such as \"public, private, protected\" which I had never encountered in JavaScript. Since it was the first time I encountered these terms, I tried to understand them well. I think I grasped them quickly because they were simple. Just like in JavaScript, there was a static method here. I also encountered \"classes and methods\" such as namespace, iterables, trait, interface, abstract. Since I haven't solved any examples on these, I assume that they will be erased from my memory immediately. So I may need to look at them in a little more detail.",
        "53": "Actually, I really wanted to explain everything I learned and write it down here, but since I was looking at so many things today, it would have taken pages if I tried to write it down. Instead, it made more sense to try to solve the examples as I came across them, use them and write about them."
    },
    "part5": {
        "1": "Day 41",
        "2": "Today, we examined and did the conversion of a program we worked on before and coded in JavaScript into PHP. To be honest, it was not difficult to convert it to PHP. In fact, nothing is difficult (at least from what we saw). I think it was only difficult because we were still new and we were seeing terms for the first time. The best part of today was that we contributed to something we had done before. If we were expected to build a structure from scratch, it would have been more difficult. I think it will be harder from now on, of course, because it was just like an exercise. It was like getting familiar with the terms, getting familiar with writing in PHP. Like practicing what, what does it do. After the server side (no matter how questionable the optimization is), I tried to combine it with HTML-CSS-JavaScript. Before the JavaScript part, I was a bit stuck on how to do the form operations. Then I solved that problem with your help. Although I don't encounter any problems when I process on the server side, there are some problems when processing data from the client. I thought of it as \"future development\" (when I say future, I wouldn't be surprised if it happens tomorrow). ",
        "3": "What have I learned today?",
        "4": "I learned the basic functions in PHP. I used array_search(), isset(), array_push(), in_array(), count(), array_diff(), unset(), array_values(), array_column(). Did I learn them all completely because I want to do a bit more? I need to do some more repetition. But I did it by understanding why, where, with what and how to use everything.",
        "5": "I used switch-case, if-else-else if, for, foreach. The only difference with JavaScript is in foreach. The other structures are exactly the same. I created associative array, class, functions in PHP.",
        "6": "Finally, I added the HTML part to my code to connect the server side with the client in a more elegant way.",
        "7": "My main thoughts are: I need to do a lot more work or repetition. Even though I don't know the limits of what I can do with Javascript, I'm still at a very limited and shallow point. In PHP, yes, I tried to do something, but I definitely need to repeat it and do a good study for our future work. ",
        "8": "Day 42",
        "9": "I was getting an error somewhere in the code, I was trying to fix it, I tried, I tried, but I still couldn't fix it. I guess I'll have to look at it again with a fresh head, but I was sad not to do that. What was it? We received the data from the user with the \"POST\" method. We wrote it to a file with a \".txt\" extension. I can write to and read from the file. The elements written to the file jump to a new line with each new element \"constellation\" entry; I created a new array from each of the rows (multidimensional in total, of course), and from there I completed the part we want with array_column and in_search. Maybe it was a long way, but it worked. But I think I made some logical mistakes in the rest of the process and it didn't work. I will try to solve this first thing tomorrow.",
        "10": "What I learned today: I can say that I learned that GET and POST methods are used to retrieve data from a user and send a response to his request.  I felt the benefit of my HTML and CSS practices today, because I can design things quickly (I only did the parts that will be useful in appearance, since our goal is PHP). ",
        "11": "Day 43",
        "12": "What I am about to write may take up your time unnecessarily, I understand if you don't read it or criticize it internally/externally. I wanted to write something a little more information-heavy, but since I think that I provide information and interpretation-based outputs during the work and I keep my \"cheatsheets\" that summarize or exemplify the things we use in the tasks we do, I am writing an end-of-day report with a little too much commentary for today. Also, when we first started, you said to look at SEO for an hour a day, but it has been a long time since I looked at that, because we were thinking about coding. That's always on my mind too. ",
        "13": "First of all, today was very productive. I was able to solve the problem I had yesterday much more easily in the morning with a relaxed mind. After completing what I needed to do in PHP, with your guidance, I researched topics such as SQL, MySQL, communication between PHP and Database. Honestly, I was going to try to combine it with the code we wrote directly on top of it, but I left it for tomorrow. The only bad thing about today was that I had a little cold last night and felt weak during the day. I took it upon myself today to query the database, connect to the database from PHP, basically open PHPMyAdmin and play around with it a bit. I looked at examples of how to create and keep cookies, how to save user information to the database after pulling it from the incoming form information. I think I was able to get the concept down a bit (reading and studying will only go so far of course, tomorrow will be practice time on the job). Before I came to the company, I had also looked a little bit about connecting to a database, mostly by watching youtube and trying something myself. Of course that works too, but reading and understanding from documents and written sources and trying to work on it also contributed a lot. Even though there were books and questions in the university, sometimes I would listen to Indian or Western lecturers or knowledgeable people and learn from them. I don't think it was necessary to explain this, but I wanted to add it. Since this is what we are doing now, I don't think I have much difficulty, especially in this abundance of information. Sometimes I might get a little bit carried away, but that's what drives me. Honestly, everything that I've been going through for 1.5 months is whipping me up to work. I feel like I'm looking for a place to be whipped, the process before work, the process at work, the people, the work that I love (which I don't feel like work, I feel like a hobby. This is of course not only because we are working on software, but also because of what the environment, i.e. you, has to offer), the money earned (it ends the dependence or burden on the family), thoughts about the future and the past, the contributions of world-class people in the field I work in and the fact that I can smile when I see what they are doing, the possibility of improving myself and making a contribution to this \"community\", both to myself, to the people I work for and earn money from and am responsible for, and also to the people who invest in me, and to other developers who specialize in their field. In a positive way, of course. ",
        "14": "Towards the end of the day today, all I could think about was \"BuÄra, before the end of the day, you should learn how to write SQL queries enough to be useful in the short term and you should connect to the database from PHP and keep the data coming from the client. On top of that, you should send cookies to the client and keep its id or session information\". But since it's not something to rush, I wanted to start calmly tomorrow.",
        "15": "That's all for today.",
        "16": "Day 44",
        "17": "I actually think that I am a slow learner. I mean, I am not very smart, but I believe that I can reach the results I want by working hard. Anyway, let me get to the point without writing anything about the human factor. Because there are so many parameters when human beings are involved, and this is not my specialty right now, but the specialty of sociologists, psychologists, and other social scientists.",
        "18": "Today was mostly research. Actually, I could have connected to the database very quickly with PHP, but I read a bit too much. I researched. I didn't understand why deleting a row from the database and then adding the next rows is the number after the primary key of the deleted row. It still makes little sense. If I deleted a user, another user should be able to get that id instead. But if this is the system, maybe we should work accordingly and not question it too much.",
        "19": "The topic I was most impressed by today was not about database or PHP, but about the concept of \"metaverse\" that I looked at after work. I don't know if it will lead to a utopian or dystopian universe like Black Mirror, but it was fun to read the articles, dreams and investments.",
        "20": "What I enjoyed the most today was that I could access the database in PHP and do whatever I wanted. SQL query is actually something that can be done easily with a little practice because each query is like a sentence. It is very simplified for the user (us). So I don't think we will have much difficulty. I saved the user data. I was able to compare the data coming from the client with the data in the database and make transactions. Then I was going to get into issues like updating information, but I realized that I needed to send the user a session id or cookies in general. Then I did some research on that, the reasons, how it is used, and examples. It's something I've looked at before, but I wanted to take it slow because I didn't need to do it at a super fast pace right now.",
        "21": "The most comforting thing today was this: It was much easier than two days ago when we used a \".txt\" file as a database and saved the data. I didn't know there was such a difference. Getting data from a \".txt\" file was a bit more challenging. But there was nothing to fuss about here. The SQL query was much easier to write because it was already a simple sentence. ",
        "22": "If I'm not given a different task tomorrow, I'll try to send a cookie (more precisely session id) to the client, recognize it (stretching the stateless concept) and try to do transactions with the database.",
        "23": "Day 46",
        "24": "Today was spent working on the database and PHP. We added the product information and the category information of the products to the database and did some work with them. I really lived the concept called over-engineering in switch-case to the fullest. It was a mistake not to see this. It was also a mistake to relate to the database in both object oriented and procedural way. I did that because I thought it would be necessary to establish only prepare and object-oriented structure in data exchange from the user, but from now on I will definitely pay attention to this and try not to make the same mistake. Apart from these, I think I was able to fulfill the task given today. I also think my code literacy has improved. Since the courses at the university are generally based on just giving the lecture and passing the course, and if the person does not have a special interest in the subject by studying the questions, he usually completes the process without learning or acquiring anything because he only memorizes. However, I think I learned a lot of things in these 2 months because there were no questions or problems of passing the course. Tasks were given. Necessary things to know were explained. And I tried to produce. Of course, there were copy-pastes and benefiting from other people's work in this process. I didn't reinvent the wheel, but I learned how the wheel is attached to which car, which wheel is attached to which car, and what the wheel does. And I am very pleased with this. I hope it's not an illusion because I feel that the labor and work really pays off.",
        "25": "Day 47",
        "26": "Today was really the most unproductive day. Because of the problems that were on my mind. I'm glad we talked. What I did during the day. Since there was no task, I generally did a lot of research, anything I came across that I didn't know about PHP and that I could understand. For example, when adding users' passwords to the database, I encrypted it with the password_hash() structure. Then I corrected every part of my code that is used everywhere about the password accordingly. If you ask why you used this, among all the structures; I researched structures such as sha1, sha2, md5, crypt() and many more. I learned that different libraries related to cryptography created with hashing can also be used for PHP. But in the most general sense, since the hash structure contained in md5 or sha1 is much easier to decode, I learned that with today's technology and equipment, something called \"salt\" is also added to the hash structure. While it is possible to enter or create this manually, for PHP, I found out that password_hash(), which is built-in in PHP, automatically assigns a random salt structure and uses it. And since it is one of the most recommended encryption methods both in the PHP manual and on different sites, I used it. At first, I thought that it would be much more secure if I used different hash structures together, but I was told that there were damages to this in a few good sources. To tell you the truth, I read about those drawbacks too, but it was a bit up in the air. ",
        "27": "For part of the day, I thought I would investigate the MVC structure, but since what I have read and understood about the subject is not complete, I will look at this topic again later and write it nicely.",
        "28": "Another part of the day was trying to use PHP to show the client a photo whose name I had saved in a database and the image itself in a file. I couldn't do it, I tried a little bit, but I'll try again.",
        "29": "Thank you again, even though you didn't really need to, for taking an interest and talking to us in detail about the issues that were on our minds today in the meeting room.",
        "30": "Day 48",
        "31": "In the first part of the day, I looked at hash methods again, and how to show the client the file whose name was added to the database. I completed these, and then I wanted to give myself a task. If the user wants to select a product and add it to the cart, I was going to show the products in the cart with the \"mycard.html\" file and also look at how to do operations on the total amount and the products in the cart. I searched a little and found a very nice example on the subject. It was an example where operations were done in a class-object structure. While I was going to analyze the concept and examine that example, I was given a new task. I thought a lot about what to do next. I rearranged the header I made in the previous assignments because I didn't like it very much. Again, I didn't feel completely comfortable with it, but I think it's enough for now. Tomorrow I want to enter the content section and get the main concept of the html and CSS parts. So I can rearrange the parts I don't like. After creating a skeleton, and if the design looks good, I will leave adding something with JavaScript for the next day. In short, my biggest goal tomorrow is to create the skeleton of the structure I want in general. Then making improvements on that skeleton.",
        "32": "I spent today looking at how to do design in general and how it's done on different websites. I was surprised that Amazon, the world's largest e-commerce site, may have a good design, but the content is too complicated. Both amazon.com and amazon.com.tr feel like they are now eating bread from pr, credibility and recognition. My favorite design on different sites was obviously hepsiburada's. But what trendyol did in some places was also good. Obviously, it is obvious that it is necessary to appeal to the general user base. Rather than achieving perfectionism with an artistic approach, I should actually understand how the user will comfortably \"shop with us\" and will not have any difficulty.",
        "33": "That's all for today.",
        "34": "Day 49",
        "35": "I only tried to make two carousels today. The first one worked because it was just directional arrows, bookmark style dots on the bottom and of course photos. But the second one, I wanted to try something different. I had never made a draggable carousel, so I tried it this time. Did it work? Partially yes, but it still doesn't work completely. Because of time constraints, I'll leave it there for now and do the rest of your page.",
        "36": "Briefly what was done today: With the first hull, I wanted to show current and interesting products, brands, or what we wanted to list. With the second hull, I thought we could show the user discounted and popular products. And finally, I created a 'div' with only the logos of the brands. I wanted to list the most popular, the most profitable, the most trending, or the most frequently searched brands by the user, even if there are no transitions or other features.",
        "37": "What will be done tomorrow?",
        "38": "I will add filter tools like category, price, brand and then of course our products. Since we have learned many things and Google provides a huge resource, I will try to design something simple so that I don't get even more confused while I get different answers to the question of what kind of design it should be. After creating the most basic skeleton, I will try to make additions and corrections.",
        "39": "Day 50",
        "40": "Today I finished the design of the parts for filtering the products. Small problems in some places took me a lot of time, but at the end of the day I was personally satisfied with the result. I used the flex structure almost everywhere I needed to use it. In some places I had to use the 'position' attribute. I created the skeleton of one of the \"cards\" where the products are shown. Tomorrow I want to go over it and collect the whole image and everything that is missing. Even though I struggled a lot with the carousel yesterday and didn't get the result I wanted, today's parts were easier and finished faster. ",
        "41": " JavaScript was used only in one place in the design of the filtering part. Obviously, I took copy paste because it was too complicated, but I can say that all the rest is my own labor. I rewrote the header part the first day I was given the task. But I will create the footer part with the code I wrote in the past. There may be a lot of unnecessary details in that part because it was one of our first CSS HTML examples. If I can find the opportunity, I will fix it, but my priority is the part that is actually requested from us."
    },
    "part6": {
        "1": "Day 51",
        "2": "I don't feel that I have any difficulty with CSS and HTML anymore. It takes a while to figure out what to use, how to use it and where to use it because there are so many ideas about how to design and so many possibilities of what to do. Of course it's more challenging because we only use coding where Javascript is used. I recently heard an Iranian saying something like \"a mystery is simple when its solved\". And indeed it was. It may seem easy once solved, but it can be difficult before that. In Javascript or any other language, it requires problem solving skills to get to the desired solution, but once solved, it is easy.",
        "3": "Today HTML and CSS designs are completely finished for the given site design. I used small icon images instead of font awesome, I fixed those parts. I fixed the Product Cards a little and edited the effects on them. I made the sorting part and the picture part right next to the carousels. Here are the missing or problematic parts: I didn't delete and edit unnecessary details in my code in some places. I need to look at them again. The photos in the second carousel are very light after the first loop in the visible part. And when I click somewhere other than the button on the sort button, the content disappears. However, it should disappear when you click the button a second time. I will fix that if I get the chance, but I think the overall desired design structure is complete.",
        "4": "Day 52",
        "5": "Today I researched and tried to learn the concept of SOLID. We have 5 principles for a class-object structure to be solid. I found a nice example and tried to understand this structure. First of all, this was the source I found the most understandable as a reference:",
        "6": "Solid Principles- The first five principles of object oriented design",
        "7": "Suppose our goal is to find the area of some shape. Normally it is possible to do this without using any principles, but since our topic is to use the SOLID structure, we will design our code accordingly. Let's imagine that one of our shapes is a square and the other is a circle. The things we need to know to find their areas are the length of the side and the radius of the circle, separately for both. So we can create two classes for these. And we can create a separate class to calculate the areas and produce the output in that class, right? But there is a problem. If we want our output to be in JSON format, we will have to do it in the class we are calculating in because that class provides our output. However, this is against the first of the SOLID principles. Because the first principle says that \"a class should serve only one purpose or have only one task in order to do a job\". Therefore, if we make another class, different from the class where the calculations are done, where the output is produced either in JSON format or in HTML format, we fulfill the first principle.",
        "8": "As a result, shapes are entered. Then the areas are calculated, summed and output. All operations are performed with different classes. Each class or module has a different task in this way. ",
        "9": "Our second principle is the \"Open-Closed Principle\".  This principle states that \"a class can be extended, but the class itself cannot be changed\". Let's continue with our previous example. Let's say the user enters different shapes, i.e. data that requires different calculations, into the class for area calculations. What we normally do here is to make changes in that class by opening new if/else statements. But the second principle says, don't create every new change in this class. Don't change the content of the class. And do these mathematical operations as methods in the classes where the shapes are located. After doing this, we have the following problem. How can we know the existence of the method that will come from the shape class we will use in the class we are calculating?  Here we need to use the concept of interface. We say \"this shape class implements this interface\" by means of an interface to the method of the field calculation that we will do in the class where the shapes are located.  In this way we can check if our shape classes are instances of our interface and if it does not implement it, we can make that interface give an error message.",
        "10": "Our third principle is the \"Liskov Substitution Principle\".  It says that \"every subclass or derived class must be substitutable for its parent class\".  A quick summary and then let's continue:",
        "11": "What have we done so far? We wanted to find the area of shapes. We created a separate class for each shape. In the classes, the shapes had properties and methods. Properties to calculate the area and functions with mathematical equations to calculate the areas. We calculated the areas in a different class with these equations and since we cannot normally query whether there is such a method in the class that the user entered, we used an interface. We said that each shape should implement that interface, that is, implement/use it. And then produce our outputs in a different class. In this way, we have achieved the first two principles.",
        "12": "Let's say we are going to calculate the volume now.  And for that, let's say we extend the class that we use for area calculation. After all, we know that area is also required for volume calculation.  But after doing this calculation, we may encounter an error like \"error: array to string conversion\" in our output. Here we can get rid of this error message by making a change in the last class we created and get our output as an integer value instead of an array. This change we made can be given as an example of Liskov's change principle (Obviously they have given it, I'm saying it right now. Because I haven't done any research to confirm this from different sources yet).",
        "13": "The fourth principle is the \"Interface Segregation Principle\".  This principle states that \"the client should not be exposed to methods that it will not use or implement interfaces that it has nothing to do with and does not use\".  The interface we created before only had area calculation for 2D shapes. Let's say we will calculate the volume for 3D objects/shapes.  But shapes like squares don't have volume, so we will have to explicitly impose this interface on the classes of 2D shapes. This is where the principle of interface separation comes into play.  So let's create a separate interface to calculate the volume of 3D objects. In this way, while trying to calculate both volume and area in a single interface, let's not impose the same interface on shapes that have no area. Because the volume calculation method in that interface is not available for them. There is one more improvement on top of this. The process of combining or managing two separate interfaces in a single interface is applied. So we can think of it as using a single API. For example, if there is a calculate function in this interface, we can manage both the area calculation and the volume calculation through this function.",
        "14": "The fifth principle is the \"Dependency Inversion Principle\". This principle says that \"the 'entities' in our code, such as classes and modules, must be abstracted as opposed to concretized.\" This means the following: High level modules do not have to depend on low level modules and you should abstract them from each other.  Here's why:",
        "15": "Let's have a class called password reminder, and let this class connect to the database through a different class. The class that connects to the database is called low level and the class for remembering passwords is called high level.  The reason why they are named like this: The class where execution is done with a tool is called high level, and the tool that exists for execution is called low level. Let's continue. Let's imagine that our database is a MYSQL server and the connection is made to MySQL.  If one day we want to change the database engine, we will also have to change the password recall class.  This would be against the \"open-closed\" structure.  The idea is that the high level class should be as abstracted as possible, with as little dependency on the low level as possible. In our example, the low level server connecting to mysql or another database engine should not affect the high level class. Again, the interface is used for this. The class that we will create the MySQL connection implements the interface. This way we can use it in the high level class. In this way, high level and low level classes are abstracted from each other.",
        "16": "If there is time, I will try to investigate and understand much better.",
        "17": "Note",
        "18": "In the report I wrote yesterday, I tried to explain about the SOLID structure with a detailed example. Although I think it is sufficient, I will attempt an illustration of my own after a summary. The analogy may fail, but I thought it would be fun to think about it. First, let's summarize SOLID:",
        "19": "Although SOLID structure is used for OOP, it can also be adapted to functional programming. Yes, we will consider this structure for our object-class structures, but like the REST API concept, it is useful to consider it as a set of ideas that we should pay attention to when writing our code, no matter how we call it \"belief, philosophy, conceptual design, fictional design models created for optimized results, design pattern, architecture\".",
        "20": "The first principle says that each module should have one job and be good at it.  Modules should have one job, not different goals or different roles. Like \"Make the best thing you can\".  For example, if Demet AkalÄ±n's job is to sing, it would be absurd to ask this object (class or module or entity in general), i.e. Demet AkalÄ±n, to represent Turkey in the Tokyo Olympics and compete in the 200 meters breaststroke. So her job should be one. She should do it best.",
        "21": "The second principle says that our modules should not be modified all the time, but they should be extensible.  One reason for this is that we don't depend on the author of the class. Or from another point of view, if we have a code and we open it to a 3rd party user, we want the user not to make any changes to our class. We want the user to access only the areas we want, to play with it as much as we allow, to extend things. Here again, we can bring Demet AkalÄ±n into play. Now we said that this woman, this object, this being should only sing. The people who should go swimming in the Olympics are the competent athletes. Now we say that Demet AkalÄ±n should do other things. But now let's think about how we can connect this with coding. Normally, in the open-closed principle, let's consider other classes other than the Demet AkalÄ±n class. For example, we can give our swimmer as an example. They both have different methods and occupations. Let's say I put both of them in a restaurant. Both of them will eat. And in their properties (by default) they also have the ability to eat and drink something.  The eating speed, the way these people eat, the way they talk while eating, their attitude to the waiter are all separate methods. And we can create a different class where these methods are collected. So this can be a class with behaviors. So let the name of this class be the book of deeds. Here, in everyone's book of deeds, operations are performed and separate results are obtained, and all of them are collected and saved somewhere.  Now each operation should be in different classes according to the first principle so that it fits SOLID. Where we do our mathematical operations in this book of deeds, we only need to return the data and return the outputs numerically or by keeping them in an array. But the calculation methods used for the calculations of people like Demet AkalÄ±n, Snopp Dogg, Ricky Martin, Jesus Christ, BuÄra, Ãmer Hayyam are different. Yes, they are all called calculations, but they are all calculated differently. Therefore, in this class, we only use the methods from the related classes and do our calculation. The divine formulas evaluating Demet AkalÄ±n are different, the swimmer's are different. Well, is there a problem? Now we know that unborn babies go directly to heaven, which can be given as an example. So we can say they don't have a method. They have the right of direct passage without processing.  But in this calculation class, how do we include unborn babies, martyrs or \"good people\" in many other religions in the calculation. If they don't have methods and we try to calculate them, we may get a fatal error. That's why we say that there are some same interfaces that every human uses. They all eat, they all sleep, they all are born and die, they all lie or cry (at least once). We can collect all these in one interface. But the methods in this interface must be suitable for all of them. A person who does not use a method in that interface will directly terminate the system with a fatal error.  As a result, even if I go on too long, I should come to this point: it is much better for us to use an interface and separate this process instead of trying to define the implementation of each method in the class where the calculations are made differently, changing it many times and causing the system to give errors that can have bad consequences.",
        "22": "Liskov summarizes in his third principle: If something behaves in the same way as something else, you should be able to change it. In object class structure, more so in inheritance logic, we look at it like this: A child takes a property of the parent. And it can change it on its own. For example, Demet AkalÄ±n's father may be a very bad alcoholic, but Demet AkalÄ±n may only drink a glass of whiskey every night. She doesn't have to maintain the whole genetic or learned/behavioral heritage. But she always has to carry its traces. Even if Demet AkalÄ±n wants to go and live in foreign countries one day and thinks that she would be very happy, she should know that she cannot escape from herself. From her past, from what she was taught.  But of course she can make small changes.",
        "23": "The fourth principle boils down to, give the client what it wants. So don't give it an interface it won't use or force it to do unnecessary things. Let's go back to Demet AkalÄ±n. If Demet AkalÄ±n is singing at a concert, she should not talk about the problems she told her psychologist about at the concert. If she is very emotional or troubled, she can write a song about it and convey her feelings to the client, that is, to her fans, but she should not give them what they do not want.",
        "24": "The fifth principle is that you should use abstraction to link high level and low level entities. The high level entity (module, class, object, whatever you call it) uses the low level entities to do its operations. And we need to abstract the low level entity a bit from the high level. In this way, we don't need to make a change in our high level entity in case of a change in the low level. Of course, interface can also be used for this structure. At least in the examples I saw, it was used in that way to abstract it. Let's say Demet AkalÄ±n has a boyfriend. And she is very dependent on him, she is fond of him, she can't live without him and she is still secretly listening to \"Join me in death\". This is very wrong. So you are Demet AkalÄ±n. If he breaks up with you, you will be very sad and you will have to change yourself to get him back. But our principle says, \"Demet, if you want to be valued in a relationship, don't give too much value.\" Think of him as no different from other men. Think like one comes and one goes and be immoral (according to who and according to what). In this way, you won't wear out no matter who you date. You'll get used to it quickly and accept it.\".",
        "25": "Choosing Demet AkalÄ±n as an entity was never in my mind and probably a very bad idea, but I still wanted to try it. Normally, I wanted to take galaxies as an object/class and think of our code as the universe, but I don't know where Demet AkalÄ±n came from.",
        "26": "The sample was tried to be formed more in connection with what I learned from the website I looked at yesterday.",
        "27": "Day 53",
        "28": "Today I tried to get a good grasp of SOLID and OOP principles. I tried to illustrate the SOLID architecture myself. Since I tried to explain what I understood about SOLID both yesterday and during the day and through examples, this report is a bit more about the different things that stayed in my mind.  Why do we use all this in a nutshell? We are actually breaking down our code. We create a different object structure for each task. When we want to make changes to a certain part of our code in the later stages, we use the SOLID structure to prevent it from damaging or affecting the entire system and to make the correction process in a much better way. This of course applies to all articles of SOLID. Concepts such as clean code and agile work together with this architectural philosophy. When we use the SOLID structure, we inevitably have a much cleaner code structure.",
        "29": "The subsequent modifications to this code can be thought of as \"maintenance and extending\". If we make a change in the database engine, a high level module that will be affected by this change using the interface can easily adapt to our new system using abstraction, for example.",
        "30": "Well, we tried to understand the SOLID architecture and I think we understood as much as we could understand by reading without practicing. When I was working on SOLID today, I researched some OOP concepts because I needed to understand why we should realize a design on OOP. It was actually simple. The best result that OOP provides is related to the Encapsulation principle in its structure. When an error occurs somewhere in our code, it would be much more difficult to find where the error is if we were not using OOP, but if there is a problem with a particular object, we can say that it must be a problem with the class it is in. If my car object is broken, I can say that there is a problem with my car class and I can resolve the source of the problem. In terms of code reusability, we can add many different vehicles and their properties as child classes in our Car class. We can create a change in all of them with a change in the base class, or we can create separate methods for each car object and make them special.  Moreover, with a single \"drive\" function, we can specify a method for all car objects (that is, as instances that will be created from child classes). Or we can create it as an interface and say that every class implements this interface. We can say that the best benefit of the object/class structure is that it gives us the ability to solve problems much more efficiently (compared to architectures like top-down language-C, functional style language-Haskell or ML).  If we summarize its benefits in one sentence, we can say that it uses modular structure to solve problems in an easy way (like a jigsaw puzzle, each piece has its own place in this modular structure), provides code reusability with inheritance, provides flexibility with polymorphism, and of course provides the ability to solve problems efficiently.",
        "31": "Day 54",
        "32": "First of all, I fell asleep when I got home tonight, I was supposed to work afterwards. Let's talk about what I did yesterday. It was good while reading SOLID, I thought I understood it for the most part, but when it came to practice, I couldn't do it the way I wanted. At least I say I tried. Of course, it seemed easy when a mystery was solved again. In fact, if I created the inheritance structure, my code would almost be there, but it never occurred to me to think of creating ineritance in that way. Because if there is a function in the parent and the child doesn't change it and use it, I thought what is the need for this relation, but I realized that it can both change it and use it as it is in the parent.",
        "33": "Day 55",
        "34": "Today I learned the concept of Depenedency Injection clearly. It is a design pattern, a technique. As far as I understand, there is no clear rule in design patterns. They can be created differently for each situation. For example, to use Dependency Injection, we take our dependent class as a parameter in the contructor or seeter methods while getting an object from a different class. I don't seem to have a problem with this for now.",
        "35": "I've always had problems in similar places with XML-related operations, but I still feel inadequate in solving problems. I mean, I don't understand why I couldn't do something that seemed simple in such a short time when I had so many more problems before. I'm probably getting the same errors and repeating the same operations. So I'm repeating myself. Towards the end of the day, I completed my mistakes a little bit, and at the end of the day I found exactly where the error was coming from. But that's for tomorrow. asXML() returns a string to us, yes, but it returns it in XML format. However, we don't need to write the start tags again. However, I was writing it too. Tomorrow morning I will see how I can convert the object to string without using asXML() (I will also see if there is another option in XML related functions).",
        "36": "Although I am happy that it contributes to my development because I am curious about the cause-effect relationship in some subjects and I am curious about many things in some subjects, the fact that I still need a long time to fix the error I get in the code even though it has been 2 months, or the possibility of needing a long time (where I feel it is simple) makes me sad. But on the other hand, it makes me even more curious and ambitious. Everything is very complicated in this world of our thoughts. Anyway, let's not go into these issues. Keeping my faith that I will be the way I want to be.",
        "37": "Day 56",
        "38": "The topics I learned and saw in practice today were generally related to OOP. I learned new things such as the use of Trait, the need to keep the classes in different namespaces if they have the same name or they will affect each other. In the morning I completed the task we did yesterday. In the afternoon I didn't fully understand the task and tried to do it as I understood it. I generally used functions everywhere because there were no strict rules. Today was generally full of research. I reviewed examples of SOLID principles from different sources. It was like a repetition.",
        "39": "Day 57",
        "40": "I forgot the report yesterday, so I'm sending it today. Yesterday I just studied a nice document about clean code. I tried to learn every detail. While reading and studying, I could understand the reason for almost everything, I could understand the difference between a really well written code and a badly written code. This job (software) is like learning to read and write, as they say. Not every literate person is a good writer. They may not be able to construct sentences well or may not even follow the rules of spelling. Yes, I think I have learned to read and write a little bit with both PHP and JavaScript. But I really want to write sentences, long articles, stories, novels. I definitely believe that I can do this too. I will just need to practice a lot. I didn't have many problems on Saturday. That's why I can't specify anything like that. I discovered something called competitive programming, and I found some great resources in that respect. In my free time, I will look at those topics to bring my coding skills, my thinking, to the level where I can best get along with the machine. Since that part is not very relevant to the tasks assigned to us at work, I will look at it outside of working hours.",
        "41": "Day 58",
        "42": "Today, the task was completely passed. The design was almost identical.",
        "43": "He helped me with the JavaScript part. It's not finished yet, because even though it seemed very easy at the beginning, the details were a bit tricky. In general, the desired structure is formed, but towards the end of the day, there were some undesirable results because I could not fully create some parts of the JavaScript Instead of making the same mistake over and over again (and since I haven't come up with a different solution yet), I thought it would be more useful to look again tomorrow morning. And I wanted to rest. That's all for today.",
        "44": "Day 59",
        "45": "Today I may have relived the discovery of manual labor. I really learned what not to do today. I could do what I wanted to do much more easily without mixing javascript into html. I could. Actually, we had looked at those topics before, but I used the onclick structure (the structure called inline event handler) thinking that it would work for me. It will be a topic I will avoid from now on. Other than that, I think the design is there. As I said, the day was spent with a little too much detail. But it was still fun, just seeing the result was enough to be satisfied.",
        "46": "Day 60",
        "47": "I really enjoyed the work I did today. I don't know how much I did right, how much better I could have done, but I created most of what I needed to do using foreachs. In the morning, I completed the deficiencies in the javasctip code. I realized that we wrote long code in 2-3 days (thanks to HTML and CSS, of course). When I first saw such long codes on your computer, I was amazed, I wondered how you could write such long codes and still read them. Now, at least with HTML and CSS, almost all of it can be written and readable (at least the ones we made)."
    },
    "part7": {
        "1": "Day 61",
        "2": "I really enjoyed the work I did today. I don't know how much I did right, how much better I could have done, but I created most of what I needed to do using foreachs. In the morning, I completed the missing javascript code. I realized that we wrote long code in 2-3 days (thanks to HTML and CSS, of course). When I first saw such long codes on your computer, I was amazed, I wondered how you could write such long codes and still read them. Now, at least with HTML and CSS, almost all of it can be written and readable (at least the ones we made).",
        "3": "I want to end the day with this lyric:",
        "4": "âWork it harder, make it better",
        "5": "Do it faster, makes us stronger",
        "6": "More than ever, hour after hour",
        "7": "Work is never overâ",
        "8": "Day 62",
        "9": "At the beginning of the day I found a resource on how to write a chess game in OOP. I wanted to convert the code written in Java to PHP and then use HTML and CSS to show it on a web page. I thought it would be practical for OOP, but it seemed to take a long time and I didn't want to be idle, so I worked on it. Then I looked at the code you sent me. I tried to understand the structures used. I thought a lot about why and where it can be used. I couldn't think of much about its purpose, but at least I read the code. I tried to interpret it. I can say that I spent the whole day with this. I encountered the ArrayObject structure for the first time (I had encountered it before but I didn't know what it meant) and I tried to understand it directly from the document. It was difficult to understand or try to understand this code. And since there is no improvement without difficulty, I tried as much as I could. That's all for today.",
        "10": "Day 63",
        "11": "Yesterday, I only reviewed inheritance, abstract class, and interface topics. I tried to make them fit if there was anything that didn't fit. I didn't discover anything that didn't fit theoretically, I tried to add something on top of it. I did a lot of reading on it. Interface is there to define the mandatory methods that other developers must have in the classes they will produce when they will work in the system you produce. Abstract class, on the other hand, is and should be used to make the developers who will work in your system use some abstract methods and provide them with some base methods when they create their child classes. Both have their pros and cons. The reasons for preference will also vary depending on what kind of structure will be built. There is no such thing as you should definitely use interface or abstract. It may vary according to the project and the requirements of the system. As we know, every class that will implement the interface must use every method in the interface. They can be implemented by classes more than once. They can also be used by completely different and unrelated classes. If you ask where inheritance is in this, the answer can be this: Interface provides only functional inheritance. ",
        "12": "There's a perspective on Inheritance that I hear a lot:",
        "13": "Abstract class establishes an \"is a\" relationship with concrete classes. This applies not only to abstract classes but also to any \"base class-child class\" relationship. Interface provides the \"has a\" capability for classes.",
        "14": "Interface is basically a contract, a contract.  The person who writes the interface says, \"Dude, I accept things this way\". And the person who uses it says, \"OK, I assure you that the classes I will write will be like this\". So the interface is like an empty shell. It only specifies what the methods will be. It is not full. They can't do anything on their own. They are just a pattern.  Interfaces consume very little CPU. Because they are not a class.  At the point where this becomes important, they can be taken into consideration in issues such as embedded software.",
        "15": "Abstract classes are a class unlike an interface. They are similar to interfaces, of course, but there are a few differences. For example, you can define a behavior for them. In other words, methods can be filled in or you can define variable-property in them. Abstract classes are more like \"These classes should look like this, and they may have things in common. They can also use the same method differently. I'll tell you the method they will use. You fill it in the way you want.",
        "16": "Day 64",
        "17": "Today was a review. I looked again at the topics we have seen before. I reviewed the relationships between objects, the concept of abstaction, polymorphism, inheritance and many other topics related to OOP. On the OOP side, I asked you and google about the points I was missing on the topics I looked at today. I was able to find answers to the questions that remained in my mind. Tomorrow I will write in general terms what I understand in more detail. I took notes of many details that I understood and did not understand during the day. Tomorrow I will continue with design patterns from where I left off.",
        "18": "Day 65",
        "19": "I would like to add some of the notes I took today and yesterday to my report today. Here's what I want to write in summary:",
        "20": "Some of the purposes of using OOP: Reduce complexity, reduce maintenance cost, increase modularity, establish hierarchy between objects.",
        "21": "OOP is based on four basic principles: Encapsulation, abstraction, inheritance, polymorphism.",
        "22": "Relationships between objects: Inheritance, implementation, association, dependency, composition, aggregation.  Simple encoding of these structures:",
        "23": "Inheritance: is+a (A is a B),",
        "24": "Implementation: should + do (A should do B),",
        "25": "Dependency: references (A references B),",
        "26": "Composition: has + a, wholepart, ownership,",
        "27": "Aggregation: has + a, wholepart.",
        "28": "Dependency",
        "29": "If changes to the definition of one class cause changes in another class, there is a dependency between the two classes. In SOLID, this is referred to as dependency injection.",
        "30": "An example for both aggregation and composition",
        "31": "A university has various departments. Each department has different professors. If the university closes down, so do the departments. But the professors continue to exist. So the university can be seen as a composition of departments. Whereas departments have an aggregation of professors. In addition, a professor can work in more than one department. But a department cannot be part of more than one university.",
        "32": "One last example of this",
        "33": "Association: I have an association with an object. \"Foo uses Bar\".",
        "34": "Composition: I own an object and I am responsible for its lifetime. \"When Foo dies, so does Bar\".",
        "35": "Aggregation: I own an object that I borrowed from someone else. \"When Foo dies, Bar may live on\".",
        "36": "A different example from a different subject. About Abstraction",
        "37": "How do we use a hash function? We give an input to the function, it does its calculations and produces a very different output. We don't need to know the hash method. The user only needs to know the input and output. Abstraction is a general example of abstraction, where we abstract away from the operations. The only thing it has in common with abstract class is that the word abstract appears in both. They have nothing else in common. They are completely different concepts.",
        "38": "SOLID",
        "39": "A set of principles that enables us to write maintainable code when developing software.",
        "40": "Each class, method, function should have a single responsibility. If you give more than one responsibility to a class, there will be problems in the future when you make a change in the code. This will increase the cost. Clean code says:",
        "41": "âThere should never be more than one reason for a class to changeâ.",
        "42": "Open Closed Principle",
        "43": "Our structures (class, method, function) should be open to development and closed to change. In case we want to add a new behavior or feature; the change we want to make is to provide the change only through the new code, without touching the existing code. Bertrand Meyer puts it like this: ",
        "44": "âSoftware entities should be open for extension, but closed for modificationâ.",
        "45": "So you have to allow users to add new functionality without changing the existing code.",
        "46": "Objects of subclasses should exhibit the same behavior when they are replaced by objects of a superclass.",
        "47": "Since subclasses derive from superclasses, they inherit their behavior. If they don't perform the behavior of their superclasses, we probably leave the method that does the behavior empty or throw an error. However, this leads to code pollution and invalid code. In addition, it also creates problems for developers who will be involved in the project later. The developer may try to use a behavior that is not implemented, thinking that the system is working fine. ",
        "48": "Classes should not be forced to implement interfaces that contain methods they do not use.",
        "49": "Together with the property that a class can implement more than one interface, this principle says that in such cases interfaces should be separated and used as needed.",
        "50": "âClients should not be forced to depend upon interfaces that they do not useâ.",
        "51": "High-level classes should not depend on low-level classes. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions.",
        "52": "\"Each pattern describes a problem that occurs over and over again in our environment, and then describes the application of a solution to that problem in such a way that you can use that solution a million times without doing it the same way twice.\" - Christopher Alexander",
        "53": "âDesign patterns are solutions to recurring problems; guidelines on how to tackle certain problemsâ.",
        "54": "\"Keep in mind! Design patterns are solutions to problems. They are not a solution to finding problems. They are a savior if you use them in the right way in the right place, otherwise they can cause terrible consequences in your code.\"",
        "55": "It deals with how to create an object or a group of objects in a flexible and reusable way.  Types: Singleton, Simple factory, factory method, factory method, abstract factory, builder, prototype.",
        "56": "A class should have only one instance, and that instance should be provided with a global access point. ",
        "57": "Useful if only one and only one object is required to coordinate actions throughout the system.",
        "58": "Conctructor must be private. The purpose of this is to ensure object creation in one place, to prevent the client from using the \"new\" keyword. It must be a static variable, to hold the reference. There must be a method to access the held reference, getInstance().",
        "59": "In multithreaded applications, multiple threads can create different objects at the same time. There are structures in the current language that prevent this (such as lock, synchronized).",
        "60": "Disadvantages of Singleton",
        "61": "The biggest disadvantage is one of its raison d'Ãªtre: it is global. It also exhibits anti-pattern behavior. Why is it bad to use it as a global instance? You store the dependencies of the application in your code instead of exposing them with an interface. Making something global causes code smell (I haven't investigated code smell much yet).",
        "62": "It goes against the principle of single responsibility. Because they control their own creation and their own life cycle.",
        "63": "They make the code hereditarily tightly coupled (tightly coupled).",
        "64": "It has been said in some examples that an interface can be used as a solution to tightly coupling, and that the structure of the singleton class can be changed and used in test problems. In this way, the problematic parts of singleton can be solved. But you need to be very careful when using it (if you don't know how to use it in the right place in the right way).",
        "65": "They retain their status for the lifetime of the application. This is again a bad thing for the unit test. Because each test should be independent of the other.  That is, it should be used in such a way that it cannot affect the behavior of the application.",
        "66": "The aphorism on this subject is:",
        "67": "A short break while continuing with Creational Design patterns: Prefer composition over inheritance. Why should we prefer composition over inheritance whenever we can?",
        "68": "You cannot change the implementation inherited from superclasses in runtime (because inheritance is defined in compiled time).",
        "69": "Inheritance exposes the sublass' elaboration of the implementation of the parent class. This is why inheritance is said to break encapsulation.",
        "70": "The tight coupling provided by Inheritance tightly connects the implementation of the subclass to the implementation of the parent. So any change in the parent's implementation will push and force the subclass to change.",
        "71": "Overuse of subclass can make the inheritance stack too deep and confusing.",
        "72": "On the other hand, objects reference other objects, while object composition is defined at runtime. In this case, these objects will not have access to the protected data of other objects (no encapsulation break) and will respect the interface of each of them.",
        "73": "In short, it is said that to use inheritance, make sure that the following 3 conditions are met. If they are not present, you are better off with composition:",
        "74": "A Bar is a Foo (if Inheritance establishes the relation \"is + a\" and has nothing to do with \"has + a\"),",
        "75": "Bar can do everything Foo can do (if you can reuse the code in the base classes),",
        "76": "If you want to make global changes to derived classes by changing the base class.",
        "77": "Summary of this section: Subclassing implies more complexity and interconnectedness. It is difficult to change, maintain, scale without making mistakes. That's why I felt it necessary to add this part and we can continue with design patterns again.",
        "78": "I worked on these parts today, but since it's late, I will continue to write here the notes I took from where I left off tomorrow. Tomorrow morning I will repeat the creational design patterns one more time and move on to the second part.",
        "79": "Day 66",
        "80": "It provides an interface for creating related objects and allows subclasses to create instances of a class. For example, let's say you are going to make a door. You can make it with a lot of materials like carpenter's outfit, wood, glue, etc. Or you can just call the carpenter, i.e. factory, and ask them to deliver it to you and get rid of this mess.",
        "81": "In short, it is an object used to create other objects.",
        "82": "When to use it? If creating an object is not just a few simple operations and involves some logic, it makes sense to write a \"dedicated factory\" during the creation phase, instead of repeating code everywhere.",
        "83": "Let's think about the hiring manager. It is almost impossible for him to get an interview for every position. He decides who to interview according to the job advertisement and assigns a representative. This is one of the simplest examples of a factory method. It gives instantiation logic to child classes. Superclasses also provide an interface to create objects. But it allows subclasses to change the type of the object to be created.",
        "84": "For example, let's say we have a logistic app. With this app we only support land logistics. If we want to include sea transportation in our app, there is a problem! The existing classes in our code are tightly coupled with each other. What can you do to solve such a situation? Factory method is used here and can provide a solution.",
        "85": "When should it be used? You can use it if you don't already know the dependencies and exact types of the objects for the code to work. It can also be used to provide users with a way to extend the internal components of our library and framework. It can also be used to conserve system resources by reusing existing object2s instead of always rebuilding them.",
        "86": "In addition, the factory method separates product production from where the product is actually used. This allows us to extend the product generation side independently of the rest of the code. For example, to add a new product to your app, just create a new creator subclass and override the factory method.",
        "87": "Pros: Tight coupling between creator and concrete products is avoided. Fully complies with SRP and OCP if written correctly.",
        "88": "Let's give another example of this issue. Let's say that the user who wants to create/log in using their social media accounts to log in or become a member of our site can log in with Facebook. Let our system be fully compatible with this. But if users now want to log in with their linkedin account and we want to make other additions in the future, we provide this possibility with the factory method here. We make our code more flexible.",
        "89": "Working principles of factory method ingredients:",
        "90": "Our Creator class defines the factory method and returns the object of the product class. Creator's subclasses usually implement this method.",
        "91": "The creator can also provide the default implementation of the factory method.",
        "92": "Creator's main obligation is not to create a product. It contains the basic business logic related to the product object returned by the method. Subclasses can indirectly change the business logic by overriding the method and return a different product type.",
        "93": "Concrete creators overwrite the factory method to change the product type.",
        "94": "Product interfaces define the operations that all concrete products must follow.",
        "95": "Concrete products provide implementations of the product interface.",
        "96": "All these things I've written seem pointless when I read them afterwards because they don't make sense without a sample code. But abstract factory and factory method are the parts that I had the hardest time in these three days, so I took a lot of notes, so I'll try to write the important parts here.",
        "97": "Provides an interface for creating interrelated product families. While the creation of a product is abstracted in the factory design pattern, the creation of related product families is abstracted in the abstract factory pattern. Factory can also be thought of as a factory generating factory pattern.",
        "98": "In cases where we have to work with multiple product families, Abstract Factory is the right approach to abstract the client from these structures.",
        "99": "Let's go back to our door example in the simple factory. Depending on your needs, you buy a wooden door from a carpenter, an iron door from a blacksmith, a PVC door from a plastic shop. You also need to find a craftsman to install each of them separately. Because they all have different craftsmen. To create a wooden door, you need wood and a master. The same is true for the others. We use Abstract Factory to bring two different objects together to create a door. ",
        "100": "When do we use it? You can use it if your code needs to work with different families of the product, but you don't want to depend on concrete classes of those products (they may not be known in advance and you want to allow future extensibility). ",
        "101": "Let's take a different example: You can provide an infrastructure for creating different types of templates for different elements of a web page. A web application can support different rendering engines at the same time only if its classes are independent of the rendering engine's concrete classes. Therefore, you have to communicate with the app's objects only using their abstract interfaces. Your code should not directly create template objects, but assign special factory objects for their creation. Finally, your code should not depend on factory objects, but should instead work with them through the abstract factory interface. As a result, you will be able to provide the app with the factory object corresponding to one of the rendering engines. Every template created in the app will be created by the factory, and their type will match the factory's type. If you want to change the rendering engine, you will be able to pass a new factory to the client code without breaking the existing code.",
        "102": "In addition to different sources, it can be said:",
        "103": "Wherever you need runtime values to create a particular dependency, you can use Abstract factory.",
        "104": "As I researched real-life examples of abstract factory, I found that it is frequently used in Dependency Injection issues. Here are some examples of where it is actually used:",
        "105": "In short, Abstract factory is a very central design pattern for Dependency Injection.",
        "106": "Differences between Factory method and Abstract Method:",
        "107": "Abstract factory creates base classes that contain abstract methods for the objects that need to be created. Each factory class derived from the base class can create its own implementation of any object type.",
        "108": "Factory method is a simple method used to create objects in a class.",
        "109": "In summary; the main purpose of the class containing the Factory method is not to create objects. Abstract Factory should only be used to create objects. Another difference is that abstract factory is implemented by composition, but factory method is implemented by inheritance. The most important point to understand is that abstract factory is injected into the client. That's why we say there is composition.",
        "110": "Note: You should be careful when using factory methods, as it is easy to do something against the LSP when creating objects.",
        "111": "It is a pattern used in the creation of complex objects to enable the client to perform the production by specifying only the object type. This pattern is used when there is more than one representation of the actual product that the client wants to use.",
        "112": "Let's say we went to Burger King. We asked for a double menu and they brought it. This can be likened to a simple factory. But there is also the possibility that the creation logic involves more steps. For example, \"How do you want your burger? Is the meat rare? What toppings do you want us to add? Do you want pickles on it? \" and so on. This is where the builder pattern comes to the rescue. ",
        "113": "Allows to create different attributes of an object, avoiding constructor pollution.",
        "114": "If our constructor has many parameters, it is very likely to get confused. The more parameters, the harder it is to organize its content. This is called telescoping constructor anti-pattern in the literature. The only alternative to this is to apply the builder pattern. ",
        "115": "The main difference between factory pattern and builder method is that factory pattern is used if the production is a one-step process and builder method is used if the production consists of many steps.\".",
        "116": "If, against the telescoping constructor pattern, you create the instance in the cilent and call each method one by one, an inconsistent situation may occur at any time of the construction because the object is created over several calls. This can cause extra effort to ensure thread safety. So the best alternative is builder pattern.",
        "117": "Benefits:",
        "118": "Parameter values are all in one location.",
        "119": "Makes code easier to write, read, and understand.",
        "120": "The build method can be modified to control parameters and throw an \"IllegalStateException\" if an invalid parameter value is given.",
        "121": "It is flexible. It is much easier to add parameters in the future.",
        "122": "Remember Dolly? She was cloned. This is all about cloning. Cloning an existing object to create a new object.",
        "123": "In PHP, cloning can be done directly with the \"__clone\" magic method. Or you can do it directly with \"clone\". ",
        "124": "When to use it? If you need a duplicate of an existing object or if creation is more costly than cloning. To produce objects that cost less to produce (by cost you can mean parameterized constructors etc.). There are two types: Shallow copy and deep copy. Shallow copy copies the addresses of objects in memory. Since it is a superficial operation, no new object is created. Deep copy is what we want. We can copy the object exactly, and this copy and the original object can be marked with different references.",
        "125": "AmaÃ§: \"bir nesnenin oluÅturulma sÃ¼resini azaltmayÄ± amaÃ§lamaktadÄ±r.",
        "126": "It focuses on how objects can be joined to each other.",
        "127": "It is used to change the interface of a class to the interface that the client expects. Or we can say that it brings an incompatible structure into a structure that the client expects.",
        "128": "Let's take an example from real life: Let's imagine that a system needs an interface for external DVRs. Every DVR manufacturer provides a library that allows us to write code to control their devices. Let's call this library an SDK. Even though each SDK has interfaces that provide the most basic functionality of DVRs, they are not all the same. In other words, it may differ from SDK to SDK.  The software we will write should interact with all DVRs. Instead of opening a separate switch case for each different SDK, we can create a common interface and develop all our system code through this interface. A different adapter can be written for each different SDK and implement our interface. This way we can make our code simpler, thanks to the Adapter pattern.",
        "129": "A simpler example is: Our system uses the JsonSerializer interface for JSON operations. But let's say we want to add something 3rd party and use a different interface. Since our system runs on JsonSerializer, we use the adapter pattern to make the 3rd party software work by looking like JsonSerializer.",
        "130": "It allows us to separate the abstract from its implementation, to get two independently developable structures.",
        "131": "Example: Let's imagine we have a website with different pages. Imagine that users can change the theme of the pages (like dark mode). What would you do? Make a copy of each page and create a theme for all of them? Or just create a separate theme that will be loaded according to the user's preference? Bridge pattern allows us to do the latter.",
        "132": "\"Bridge pattern, 'prefer composition over inheritance. Implementation details are pushed away from the main hierarchy and into a separate hierarchy of another object'.",
        "133": "Since it's late, I'll pick up where I left off tomorrow. Since I'm writing directly from the notebook, some parts may have gotten too long and complicated. I was aware of it while I was writing, but the place that didn't fit the best so far, or the place that I thought I would have difficulty if I came across it, was Abstract Factory. Many of the places that I had difficulty with until now were settled after I worked on them again and again. I believe it will fit too.",
        "134": "Day 67",
        "135": "It is a pattern for organizing objects according to the tree structure and establishing the sub-top relationship in the tree structure.",
        "136": "\"Composite patttern allows the client to treat individual objects in the same manner.\"",
        "137": "\"Defines grouping different objects and treating them as a single instance of an object.\" - Wikipedia",
        "138": "Purpose:",
        "139": "Compose objects into a tree structure to represent a part-whole hierarchy. Applying the composite pattern allows the client to treat individual objects and compositons homogeneously.",
        "140": "Let's illustrate:",
        "141": "Every organization, every company has employees. Each of the employees has the same characteristics. They have salaries. They have responsibilities. They may or may not have to report to someone. They may or may not have subordinates.  We can put them in the same collection and collect their salaries if we want, or we can apply other methods for all of them.",
        "142": "It is a design pattern that allows us to dynamically assign new responsibilities to objects. By subclassing the class of objects, it is easy to add functionality to the class from which all objects are derived. But it is impossible to extend a single object in this way. With the Decorator pattern, you can add functionality to a single object.",
        "143": "\"Allows adding behavior to a single object, either statically or dynamically, without affecting the behavior of other objects derived from the same class. Useful for adhering to the single responsibility principle.\" - Wikipedia",
        "144": "How do I turn on the computer? By pressing a power button. This is actually what you believe because you use a simple interface that the computer provides externally. Internally, there is a much more complex set of relationships when the computer is doing these things. The simple interface to the complex subsystem is called Facade.",
        "145": "A Design Pattern provides a common way of solving a recurring problem. The classes in Design Patterns are just normal classes. What matters is how they are structured and how they work together in the best way to solve a problem. ",
        "146": "Facade design patterns simplify the interface of a complex system. It consists of all the classes that make up the subsystems of a complex system. Facade protects the user from the complex details of the system and provides a simplified view that is easy to use. It also separates the code that uses the system from the details of the subsystems, making it easier to modify the system later.",
        "147": "I have written about this before, but it is worth repeating for myself. The important thing when learning design patterns is to recognize which pattern fits our given problem and then use it appropriately. It is a big problem to use a pattern in the wrong way or to try to solve your problem only with it because you know a pattern. It is useful to learn design patterns before falling into these traps.",
        "148": "For Facade, in a nutshell, the goal is not to introduce a new infrastructure into the system, but to abstract the complexity of the subclasses and offer practicality.",
        "149": "During military service, when you go to the mess hall for breakfast, there are many cups filled with tea and each soldier takes his tea and food in turn and sits down. The reason why many cups of tea are filled at once may be to save resources. Here, resources, time, human labor, speed, and saving tea can also be thought of as saving tea by filling the cups sparingly and evenly. In short, the Flyweight pattern is all about sharing. It is used to control memory management of frequently used objects.",
        "150": "\"Flyweight is an object that tries to minimize memory usage by sharing as much data as possible with other similar objects. It is a way to use objects in large numbers when a simple repeated representation would use an unacceptable amount of memory.\" - Wikipedia",
        "151": "As we said, the goal is to stop initializing unnecessary objects and take up less memory space. In GoF there are two states of an object:",
        "152": "\"Intrinsic State: Stored in the Flyweight. It consists of information independent of the Flyweight content. This makes it shareable.",
        "153": "Extrinic State: It can change with the content of the Flyweight and depends on it. Therefore it is not shareable. Client objects are responsible for passing the extrinic state to the flyweight when needed.\" ? \"I don't quite understand this sentence.???",
        "154": "It is a design pattern that allows the client to access the original object through proxy classes representing the object instead of accessing it directly, and to use the facilities offered by these proxy classes.",
        "155": "Although it is not used in most PHP applications, there are some areas where it is used: caching, logging, access control, delayed initialization. For example, downloader is an example of this. The proxy can be used to improve the performance of the downloader by using caching. For example, let's say you downloaded a file. Then you will download the same product again. Giving this data directly to you with caching in the first download saves both time and traffic.",
        "156": "A real-world example is the credit card. A credit card is a proxy for our bank account. It can be used instead of cash and allows us to withdraw cash when needed.  This is exactly what a proxy does:",
        "157": "\"In its most general form, a proxy is a class that acts as an interface to something else. A proxy is a wrapper or agent object that is invoked by the client to access the real serving object behind the scenes. The use of a proxy can be a redirect to the real object or provide additional logic. Extra functionality can be provided in the proxy, such as caching when operations on the real object are resource intensive, or checking preconditions before operations on the real object are invoked.\" - Wikipedia",
        "158": "Let's summarize the structural design patterns before moving on to the next topic. Let's write down the differences between them. Because all of them are structurally similar to each other and the possibility of getting confused is very high.  Proxy, decorator, adapter, and bridge are all variations on \"wrapping\" a class. But they are used differently.",
        "159": "Can be used if you want to lazy-instantiate an object, or hide that you are calling a remote service, or control access to the object.",
        "160": "It is called \"Smart Proxy\". It can be used if you want to add new functionality to an object without extending its type. This allows you to do it at runtime.",
        "161": "You can use it when you have an abstract interface and you want to map it to the interface of another object with a different interface but very similar functionality.",
        "162": "It is very similar to Adapter, but you use it when you define both the abstract interface and the underlying implementation. For example, you are not adapting some 3rd party code and you are the designer and owner of all the code. And you just want to change some different implementations.",
        "163": "It is a high-level interface created for subclasses of one or more classes. Let's say you have a complex structure that requires multiple objects to be created. Making changes to this set of objects can be confusing because you don't always know which object has the method you want to call. It's time to write a facade with high-level methods for complex operations on your collection of objects!",
        "164": "It allows us to make common communication between objects effective and flexible.",
        "165": "A design pattern that ensures that objects that perform a set of operations towards a goal work independently of each other and that each object performs only the tasks defined for it.",
        "166": "\"Helps to generate a chain of objects. The request starts from an object and travels through individual objects until the appropriate handler is found.\"",
        "167": "Let's say I have 3 forms of payment. The first is my bank account, the second is my Paypal account, and the third is bitcoin. Let's say I have 100 liras in the bank, 200 liras in my Paypal account, and 300 liras in my bitcoin wallet. Now I'm going to shop for 259 liras. I say, \"Dear bank account, I need to buy 259 liras from you\". But we see that there is not that much there. And my bank account says, \"I'll direct you to your Paypal account. I don't have that much change.\" When the Paypal account didn't have that much money, it redirected to the bitcoin wallet and finally the transaction was completed because there was money there. What was done here was about the behavior of things. It has a name like chain of obligation, and of course for objects. At least because we're moving towards OOP. ",
        "168": "\"It allows us to encapsulate actions in objects. The main idea behind this pattern is to provide ways to separate the client from the receiver.\"",
        "169": "\"A behavioral design pattern in which an object is used to encapsulate all the information needed to perform an action or trigger an event at a later time. This information includes the method name, the object that owns the method, and values for method parameters.\" - Wikipedia",
        "170": "Let's give an example.  Imagine you place an order in a restaurant. You (Client) ask the waiter (Invoker) to bring you an iskender (Command). And the waiter passes your request to the chef (Receiver), who is the person who knows how to cook the iskender.) Another example: You (Client) turn on the television (Receiver) using the remote control (Invoker).",
        "171": "Today I switched to behavioral design patterns. Tomorrow I will finish it completely and repeat it all on Saturday.",
        "172": "Day 68",
        "173": "Introduction to UML",
        "174": "Introduction",
        "175": "UML is like looking at your feet when you walk. We all read, write, interpret code. Whether it's our hobby, our job, or passing a required programming language course. And a software developer is not usually inclined to interpret code or draw diagrams of it. It makes more sense to read the code directly. But there are some benefits that you might want to consider and use. It can be used for both forward engineering and reverse engineering.",
        "176": "You should not think of UML only in relation to something you do. For example, you are in the forest at night and it starts to rain. It's pitch black. Even if you look at your own feet, it won't help because you can't see anything. But if someone was near with a torch, you could follow their light or their footprints. You would find your way through the mud, the darkness, the trees, the thorny grass. As an example of this analogy, a project is started in a company. After 5 years, what happens when the people who were involved in the project before are gone? It is incredibly useful to have some basic up-to-date documentation available for everyone who joins the project later. And here's the reality. If every part of a project is fully described with method and parameter names, it is difficult to maintain and sustain. Still, it is very valuable to show basic diagrams of the relationships between structures in the system. In general, no one wants to read a 50-page UML diagram with everything fully rendered. It is therefore necessary to create a UML diagram of a system in a measured way. Another useful point of UML is that a senior developer in the software department is responsible for designing a structure, leaving the implementation of the design to the junior developer.",
        "177": "In general, we have tried to explain what UML is used for, using non-unique analogies (based on stack overflow entries). Now let's look at what UML is.",
        "178": "Next Section",
        "179": "UML is a modeling language. Its main purpose is to visualize a designed system. UML is actually a visual language, not a program language. UML is related to object-oriented programming and provides the visualization of the relationship between elements with diagrams. These diagrams can be divided into two: Behavior diagram and Structural diagram.",
        "180": "Since it would be extremely long and time consuming to explain UML in its entirety, let's go straight to class diagrams. Class diagrams are the main \"building blocks\" of every object-oriented method. They are used to show relationships between classes, the use of interfaces, and things related to other classes. Class diagrams consist of the following structures:",
        "181": "Each class is created in a rectangular box with its name, properties (attributes), and the methods it uses.",
        "182": "There are 3 types of \"modifiers\" with which we can specify the view (public, private, protected) of methods and properties:  \"+\" provides public visibility (for everyone). \"#\" provides protected visibility (so that it can also appear in derived classes). \"-\" provides private visibility (only for itself).",
        "183": "Conclusion",
        "184": "These were the notes I took today. In general, I learned what the elements in the class diagram are. I learned how the relationships of objects and classes with each other are shown in a diagram.",
        "185": "Day 69",
        "186": "I learned how to create a class diagram with UML. I learned to read the diagram created with UML and write it in a programming language (PHP). Saturday was briefly spent on reading and practicing on this. I understood the code you wrote in general while it was being created. When you created an interface in UML, I felt like you created it a bit by heart, because when you realized the need while writing the code, you shaped the code accordingly. I acted with a little more straightforward logic. The idea of adding elements according to the need is actually a little more established. I want to apply the same method for myself.",
        "187": "Day 70",
        "188": "Today I worked on how to make the database connection and query builder object oriented. It was not difficult to make the query builder for a specific table. In fact, it shouldn't be too hard to do it for every table, but I kept getting errors in parts that seemed very simple. What were these parts? The easiest things were converting from array to string, writing the sql query correctly. I tried to fix the overlapping quotation marks but without success. First thing tomorrow, I will try to fix my mistakes again in the morning. I clearly understood the reason why we want to provide an interface for the query builder and use factory methods. If I can make the query work correctly, I think it will be easy to edit there. In short, I am aware of what we are doing and how we should do it, but I could not fix the mistakes in the second half of the day. I will look again tomorrow with a fresh head."
    },
    "part8": {
        "1": "Day 71",
        "2": "When I think about today, I don't understand how I couldn't do the given question in so much time. I mean, it was sad to think that I couldn't do it in an extremely long time. But even though there was a logic error in the code I wrote (which I corrected later), I think it was very simple and appropriate. But I don't know if it is enough to create the desired structure (such as putting an apostrophe in string expressions). I will have to make an edit for it. Or I will change it from scratch. I will try tomorrow if it can be applied to the current code. Today was good. I haven't looked at Javascript for a long time and today I realized that I missed a language (Js). I remembered the first time we saw forEach. I was memorizing it. I said to myself \"map is easier, I'll never be able to do this forEach\". Time passed. Of course, I'm still not good at it, but when I think about how I was then, I said \"where did I go\" in this (relative) short period of time. I felt like I would get into subjective issues if I went on too long. So let's end the day with a quote allegedly belonging to Aristotle, but in fact only for Aristotelian philosophy, which an author mentioned in his own book: ",
        "3":"\"We are what we do over and over again. So perfection is not an act, but a habit.\"",
        "4": "Day 72",
        "5": "I really realized that even if you can't reach the desired result after hours of effort, when you take a break and look at it again, at least the stuck points can be corrected. I still don't understand why this happens. Maybe it's something like a placebo effect because I believe in it.",
        "6": "Back to today. I couldn't finish the task on the first day, but the next day I created the desired result in both Javascript and PHP. Of course, it wasn't the best performing code, it wasn't the most logic error-free code, but at least the main ideas (recursive, algorithm implementation, \"elegant\" use of switch-case and readability) were the things I tried to do myself after getting them from you. So I am personally satisfied. Today afternoon was all about thinking \"how can I turn the string query into meaningful nodes in an array\" and then putting it into practice. I made a mistake at the beginning. I manipulated the incoming data as you said, of course it was wrong. Then I thought how I could do it without manipulating it. If I couldn't manipulate it manually, the code I wrote should have done it. I thought that if I split the string expression again and make it more meaningful, it would be easier to edit the characters. But it was not easy to get out of it that way. So I took each character individually and processed it accordingly. At first I didn't even try because I thought it would take too long. But it wasn't that laborious.",
        "7": "Now I've come to a certain point (God, I hope it's the right point), even if I didn't achieve the desired result. Tomorrow I will pick up where I left off.",
        "8": "Even though I sometimes get stressed when I face such questions and problems, I generally enjoy it. Even if I can't do it, I want to do it even more.",
        "9": "I realized something recently: For years I had tried to fight stress individually. Because stress also causes health problems and I really wanted him to be away from me. Then I realized that for years, while I was struggling with stress, he would never leave me. I said if it won't go away, it won't go away, then let it stay with me and let's live in peace. It still spoils me, but I think this perspective is better than fighting with it. Just accepting the stress. Yes, it was like the ordinary motivational speeches, the rehabilitation group speech in American movies (you know, the one with the lines \"Yes, friends, Martin Eden hasn't drunk alcohol for 3 months, let's all applaud him together\"). Let's not make it too long.",
        "10": "I want to share my final point. It's okay if you don't even open it and look at it because it's not complete. I just wanted to share it.",
        "11": "Day 73",
        "12": "I felt that I was very close to the result of the task I was looking at this morning, but I almost couldn't move a pen after the structure I had built started to get confused and I was doing a lot of things. Then I did the task you gave me, and for the next one I thought about what I could do and built a logic. I will work on it tomorrow morning. ",
        "13": "We have a sentence. Just as we make sense of it when we read it, we need to do the same for the machine. Our goal was to make the incoming data meaningful. In the last example (\"mer(h)aba\" (\"a\" asd) my \"sss\" asdasd'), how could I express that the parenthesis inside the quotation mark is part of the quotation mark and has no separate meaning? And of course the same applies to similar situations in other parts. Then the following can be done: Go through each element of the data one by one. If there is a nestedness (in the keywords used to construct the meaning), the problem is solved if I save the position (index) of the key element in the inner part somewhere and do not use it later to construct the meaningful structure. In the case of this nesting, all I need to see is not to see the inner element as the key element for that example. But if I am going to create a sub-node in a nested structure, I will of course need to take that into account as well. In short, we can produce different results depending on the problem we are facing. I think we need to make the most basic logical deductions to be able to use the language of the machine. And creating or trying to create a structure in this way pushes you into philosophy and mathematics. 4 months ago, I probably wouldn't have believed it. But I thought it was about subjects like artificial intelligence, which has \"words that seem too clever.\" However, even making a string entity meaningful is a very \"clever\" subject.",
        "14": "Day 74",
        "15": "Today I could have actually worked faster and looked at query building again, or at least after work, but I didn't because I tried to see what I could do differently on top of today's task. I thought about how to write more \"clean code\" and tried some things, but it still wasn't very clean. When I'm writing, I just go with the way I'm most comfortable writing, but then I can make changes to it. I'll try to think about that when I write and try to write as much as I can. In some cases I think I can get to the root of the problem, but not everywhere. Some overlooked points can cause different problems that I have to fix later. But the more I write and the more I work on it, the more it will fit. I did something this week. I really got a little bit closer to the desired results or a little bit closer to the roots of the problems. If not, I felt a little bit, but there were always gaps. I understand your saying \"study algorithms\". I wanted to look at resources like \"competitive programming\" that are widely available on the internet in my free time, but I spent time on other things instead. Now I realize that I should look as much as I can. If the book comes, I have set myself a goal. I will try every algorithm in that book in PHP and Javascript. I will put useful and \"clean\" applications in the middle. Of course, I will try this in my free time outside of work. I think it will take me a little bit of time to understand it step by step, but I guess there is no harm in trying.  That's all for today.",
        "16": "Day 75",
        "17": "Yesterday the main gaps from the previous mission were completed. There were still some gaps, but I haven't solved them yet, but I think I'm making progress. I hadn't thought about something very different after a while. So I did a little bit of research on different topics, and then I went back and looked at it again, but it's back to where it was. I will continue to look again tomorrow, unless I am given a different task. ",
        "18": "Day 76",
        "19": "I had a bit of a mixed bag today. In the morning I revisited task 2, made some minor corrections, and then completed the task you gave me. At first it was hardcoded as you said, and after I corrected it, it was close to the logic you told us, but there was a difference. Afterwards, while I was doing some research on what Selenium is, I came across a stack overflow page about what a gargabe collector is from the links I used to look at. I did a little bit of research on it and took notes. I can say that I understood what it does in the most superficial way. Then I went back to the PDF you told us to look at in our free time and read it. After 8pm I went back to task 2 and tried to fix my problems with opening parentheses. Unfortunately, unfortunately, I still have problems with it. I think I've done it, then I test it in a few different ways and I get unwanted results again. I always feel that I'm very close to the solution but I can't reach it. Maybe I need to establish cause and effect relationships better and examine the functioning of the program better rather than trusting my feelings. ",
        "20": "I think today was the most chaotic day of my progress. Interestingly, I didn't feel very confused. And I know one thing for sure: I really enjoy programming something (or trying to program something). I hope it will always be like this.",
        "21": "I want to close the day with one of the words I always try to preach to myself:",
        "22": "\"Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\"",
        "23": "Day 77",
        "24": "Today I worked on task 2 again, fixing the basic bugs I found earlier, which resulted in fewer errors, but may have lowered the quality of the code a bit. After a while I focused more on the solution rather than dealing with it. I can make improvements again afterwards. As far as I tested, there is no problem in opening and closing parentheses except the parenthesis of the mysql function. Afterwards, when I felt that I was having a hard time developing new things and my productivity was decreasing, I redirected my attention to the PDF you told us to read in our free time. There was an example of how to find the greatest common divisor. A solution was presented centuries ago with the algorithm developed by Euclid. I searched for similar mathematical examples on the internet and became even more fascinated. I finished the introductory parts where the most basic information about programming and programming languages were given. Now the book switched to C language and I stayed there. I will continue to study and learn the topics in that PDF in my spare time.",
        "25": "Day 78",
        "26": "Today I read most of that PDF, I tried to understand it. It was explaining how to program in C, the basics of programming in general. I looked at many of the examples, but I chose not to look at the ones that seemed like a waste of time. I was actually a bit surprised when I was looking at C because we have already learned PHP and Javascript in the parts we have seen so far. The reason was this: for example, memory management is delegated to the user using pointers. We had never seen anything like this in PHP and Javascript, or I was surprised to see the enumeration part. Although there are ways to do this in PHP and Javascript, in C it was more detailed and emphasized. And object-class relationships were the most emphasized topics until now. However, even though polymorphism and inheritance can be applied in C (according to what I read in stack overflow), since it is a block structured language (I don't fully understand the meaning of this yet), the implementation of OOP seemed a bit difficult. I still have some question marks in my mind (maybe because I'm ignorant of the subject): for example, I read that languages like Python and Java work by taking the positive aspects of both compilation and interpretation. If such a thing is possible, I'm a bit surprised why there are languages that only work with compilation or interpretation. But instead of simply asking google for the answer, I wanted to keep it as a question mark and think about it.",
        "27": "When I heard the word \"axios\" in your speeches today, I immediately thought of the little server-side work we did using Node.js. While I was looking again what \"axios\" is, I came across react.js somewhere and had a look at it. It really made my eyes sparkle because I don't always know and there is always so much to learn. In the demos I saw on their site, I saw that something could be developed client-side using the class structure (with lots of divs and other elements in it), and that I encountered different ways of using javascript, and I was happy for some reason.",
        "28": "I guess you wanted to see what we've been up to this week, or you've been busy, so you let us loose a bit. There's always an assignment, though. The last assignment I was working on, it seemed to take a really long time to try to write something thinking about every possibility. And I left it there because I thought I could figure out the logic of it a little bit, I thought I could do something with it. But the query builder stayed where we left it last week. Not finishing it is still in the back of my mind. But it seemed like it would take a little bit more time to finish it completely. But thanks to those tasks, I was able to gain different perspectives every time I faced a problem. Trying to bring solutions to the problems I could find and bringing them to some of them was also very satisfying. I believe that I will further improve my coding skills by reading more code, writing more code, and of course understanding the purpose and logic of their existence.",
        "29": "Sometimes I face a lot of problems and try to find a solution. When I can't find it or when I have wrong approaches, I can correct my mistakes thanks to you and google, but sometimes I feel like I understand everything I read, but it seems wrong to me. \"No, BuÄra, you must have missed something. You must not have understood it.\" Today, when I was looking at that PDF, I said to myself a lot, \"OK, I solved it\" a lot. I felt like I was just reinforcing my knowledge in many places. When I saw the differences in syntax, the differences in the way entities are used, and the differences in interpreted languages in C related topics, I did some research on them. I think I may have said that because I haven't tried to write a code in C, but if I talk about the parts I saw, I think I can handle it even if it takes a little time. That's all for today.",
        "30": "Day 79",
        "31": "Before doing the task given today, I tried to examine similar examples on many different sites. I can't say I examined it because I couldn't find a beautiful site that I could take as an example. The problem given was this: To prepare a page dedicated to people who will apply for a reseller and a printer system. There should be one page for both cases. I thought that having two different tabs on one page would reduce the complexity and length of the page. By default one tab should be open at the beginning. Since the publisher is already quite computer literate, I thought the dealer system should be the default. So what should be in the content? The individual who will apply to become a dealer should somehow send us their information. For this, we can give a contact address or we can get the data we want from the user via a form. Well, if the user wants to become a dealer, if he/she has come to this link, wouldn't it be good to convince him/her with a little fancy language about why he/she should choose it? I think so. That's why I thought it would be good to present some of the basic features of the site (company) numerically (how many years in the sector, how many companies are authorized dealers, the general volume of the products of the authorized dealers in the sector, etc.). In summary, I could think of two things: To convince the user and to make them contact us with peace of mind and willingness.",
        "32": "In the evening after work, I started by reading the preface, acknowledgements, and sometimes even smelling the book perversely (the first smell of the book (the inside of the pages)). I got as far as the Big O notation. Even though I thought \"I'm wasting time by reading the introduction\", it was nice to read the history of the computer, the history of computing by machine. From Charles Babbage to Alan Turing, from John Mauchly's efforts and the many times his ideas were stolen or appropriated, to Apple, to Ada Lovelace breaking my sexist perception that the first programmer in history was always a man. I think if I keep writing, the report might stop being a report, because then I will go on to say that Ada Lovelace was Lord Byron's daughter, that Lord Byron swam across the Dardanelles with a crippled leg, that she wrote Don Juan, and that Albert Camus's inferences about Don Juan in The Myth of Sisyphus. It's time for bed.",
        "33": "Tomorrow I will try to finish the mission. It takes a while because I want to try new things. Of course it will take less time if I just repeat what I have already learned, but I want to push myself to use new things. I will try.",
        "34": "Day 80",
        "35": "Today was all about CSS and a bit of Javascript. I did something, but it didn't feel right. I couldn't say to myself, \"okay, this is it\", whereas I was able to say that in the design of products with shipping. Still, if you think about it, you can do even better things.",
        "36": "Today the form part of the dealer system and the design of the publisher system were realized. No extra library was used. Only Google Charts was used, but it can be simply converted into an image file. In the publisher part, the colors and layout did not fit well. Although we tried to pay attention to responsiveness, distortions were quite high when the page was minimized. Hand-held results were achieved, but not to the desired level."
    },
    "part9": {
        "1": "Day 81",
        "2": "For the first time, I approached a design that I thought was responsive from my point of view. When it comes to CSS, it feels a bit like magic, even though I know it will give the desired output as long as the rules are followed. The topics we talked about in the meeting today made me think about some issues again and think about some problems from different angles. And I really didn't realize how time was passing and how much time had passed. Towards the end of the day, I looked at different CSS examples again. For example, I didn't know that there are online formatters that convert SCSS to CSS. Many beautiful designs on Codepen used SCSS, but I was skipping them directly, not using them and not examining them carefully. Now I've learned a shortcut for it too if it will be useful to me.  Today was mostly spent trying to improve the design and researching similar topics and examples. ",
        "3": "Day 82",
        "4": "Today was also spent with CSS. I mostly thought about what I could do differently. Sometimes I wanted to apply the parts that look good in different designs, but I couldn't achieve that good look. In the first design, I tried to produce a unique and simple content as much as I could (of course, there are many examples in many places, but it may look like this when you look at it as a whole). The second design is still at this stage towards the end of the day: \"Drawing sketches in a notebook\". If the goal was just to be fast, it could be done with very little thought. If the goal was to create a perfect look, it would take a long time but a pretty good design could be created. But I think the goal is to keep the balance. So the trade-off between time and quality is a natural one. And I attribute your asking us for a second design to two things: you want us to do better or you want us to look at it from different angles. And I want to come up with something based on both conclusions.",
        "5": "I did two things after working hours: I saw the country's economy, the agenda, the topics people were talking about and got depressed. Then I continued reading the algorithm book where I left off. I am still at the very beginning of the book. I saw the multiplication algorithms developed centuries ago by the Arabs and later by the Russians. Tomorrow I will see what Karatsuba's multiplication algorithm is in the evening. This week I aim to finish the simple algorithms in the introduction part of the book. If it is done quickly, I will continue with the second part (I think I will pass and keep moving forward). I realized something interesting: In the Egyptian number system, there are numbers \"1,10,100,1000, even 1 million\". I thought, what could the Egyptians have done in their time to use 1,000,000? Of course, they were very advanced in areas such as pyramids (engineering), health, astronomy. There could have even been things related to the tax system and military service. But if I lived 3000 years ago, I would never have used the number 1 million in a desert. Maybe they never used such a number, but for them it was like our expressions \"infinite or indefinite\". Although this fantastic thought of mine can be demolished by the existence of around 900,000 manuscripts in the Library of Alexandria. If they built a library that houses so many books and in which giants like Euclid, Archimedes and Ptolemy worked, they definitely needed and used that number somewhere.",
        "6": "As a hobby, I can program the algorithms I have learned only with JavaScript or I can enrich them with HTML and CSS by adding visuality to the work. But these should be things that can only be done as a hobby, not the main task.",
        "7": "I am happy that I have a job that I do (and believe I will do) like a hobby, beyond overwhelming issues such as the country's agenda and negative information.",
        "8": "Day 83",
        "9": "I had a bit of a hard time working today because I was feeling a bit under the weather (I think I had a cold). I felt like my head was very full and heavy all day long. I didn't like my design at the end of the day. Yes, it was a responsive design. Yes, everything was in its place, but it was so complicated that my eyes bled when I looked at the result. I have to think about how to make it better. Honestly, since I liked the simplicity of the first design, I didn't like the fact that so many boxes were so complicated. I guess I looked at the glass too empty, but these were the thoughts that came to my mind. I believe it can be done much better.",
        "10": "Day 84",
        "11": "What did I add to the design I made yesterday? I reduced the width of the photo using Parallax, added two navigator buttons that provide access to the dealer system and the publisher system on the same page, and corrected the missing parts I saw. Honestly, I couldn't add much innovation. That's why I always thought about what I could do by examining different sites. I tried to research and learn what features of CSS I didn't know. I looked at examples and research on design from Codepen and reference sites.",
        "12": "On what happens some time after sunset",
        "13": "I looked at the Algorima book again. I understood the multiplication algorithms in the book. In summary, the Karatsuba algorithm is more effective for multiplication of numbers with 14 digits or more because it shortens the number of operations considerably. But it is not suitable for numbers with fewer digits. Afterwards, I looked at which algorithms the computer uses for multiplication, but I only skimmed through it because I thought it might take some time to learn Booth's algorithm used by microprocessors. I didn't go into details and topics like ALU. I will try to put it into code after I have learned a little more. In the book, I just reviewed the old topics today and looked at the beginning of the algorithms related to Roman numerals.",
        "14": "After that, I did some reading on Pi. I will do more, but I guess I will have to look at modern physics. I think I'll look into it because it might be useful for myself (like sports, maybe like strengthening all the muscle systems in the body in a balanced way and strengthening all of them instead of just working one muscle system).",
        "15": "The mental fatigue of yesterday was thankfully absent today and I felt like it was a productive day, even if the product was not very productive.",
        "16": "Day 85",
        "17": "It's been almost 3 months since I started keeping a daily report. I don't think it has anything to do with studying engineering, but I always liked to express myself in a medium, to keep a diary anonymously. Now I'm trying to blend the diary keeping part with a technical language.",
        "18": "I looked at CSS today, of course. I wondered if I could try different things. I deleted some of the ones I tried because I didn't like them. Today, in general, I tried to solve the two biggest problems I saw yesterday (company photos and text content about our website).",
        "19": "Day 86",
        "20": "Today was a bit of a mixed bag. In the morning I only looked at the algorithm book, I got as far as the data structures part, and then when you told us to start thinking about the task, I got into very different topics. I read about Scrum, agile, extreme programming, etc. Towards the end of the day, I found different resources about OOP and building an e-commerce site. I will look at them first thing tomorrow morning and get different ideas.",
        "21": "Today I felt a bit feverish and my body was very broken so I didn't get much out of it. I need to get myself together urgently. If I can wake up early in the morning I can get something with vitamin C from the pharmacy (even though I know it won't do much good).",
        "22": "Day 87",
        "23": "I was thinking of creating stories about what should be on the site from the perspective of the user, the site administrator, and the seller, and determining the necessary modules, subclasses, and methods. After the meeting, I thought about how to communicate with a customer who wants to set up an e-commerce site just to sell us phones, how to convince him to do business with me, how to follow a path on issues such as detailing the work, pricing and duration of the project, and how to create a report. I searched a lot. Obviously, I couldn't find the exact structure I wanted. But I found structures that I think can help me. I will go through them and try to submit the report as requested on Monday.",
        "24": "Day 88",
        "25": "Today I tried to examine the most basic of my communication and information exchange with the customer and prepare a document accordingly. I learned what information I need to get at a basic level from a customer who wants me to design a website. I saw what the options are when preparing a website. I could only guess at the prices and duration. Although there are website designs offered with ready-made packages on the internet and the costs of \"getting work done\", I did not know exactly how much to charge for a specific job. Although I saw various time intervals as duration, it was generally said to be finished between 4-16 weeks in different sources I found. This was all about the work to come and the team to do it. I don't know exactly what I'm going to do tomorrow, but the topic I was working on Friday was ahead and I think I can look at it tomorrow. I feel like I'm approaching the stage of designing the system after receiving the first job (if I was able to get it).",
        "26": "In the evening, I continued reading the Algorithms book from where I left off. I came to the topic of recursions. I think I can finish the chapter on the basics this week. Basically, data structures were briefly mentioned and I understood as much as it was mentioned. After recursions, I will encounter random number generation algorithms. I conditioned myself that I should complete it this week. On top of that, I will try to tackle the problems again when the second part is completed. I think I'll be able to handle this and the day's tasks at the same time.",
        "27": "Day 89",
        "28": "Today was all about research, examining examples and thinking about the outline for my own report. Yes, I don't have any concrete results right now, but I had the opportunity to study many examples. And that's why I don't think that the time spent has been devalued. I think there is a need for it. Tomorrow I will start to address some concrete outputs. I believe that I will complete it within the given deadline by adding every detail I can see to my report.",
        "29": "Day 90",
        "30": "Why Agile?",
        "31": "The problem with the Waterfall model is the way it handles and solves the problem. What was it?",
        "32": "All requirements are collected from the customer.",
        "33": "A team analyzes these requirements and documents and prepares specifications and features for the design team.",
        "34": "The design team designs using these specifications and gives them to the development team for implementation. Developers write their code according to this design and send the final version to the testing team and the process is completed. The product is delivered to the customer.",
        "35": "What the statistics generally say is that the work done with the waterfall model is generally not accepted or liked by the customer. And the customer is always right, so all the effort, time and money put into the project is wasted.",
        "36": "There is another philosophical approach to this problem: iterative and evolutionary development. Scrum, XP, Rational Unified Process are examples of software development with this philosophical approach. They are also referred to as agile development process.",
        "37": "The concept of iterative development is simple: software development is organized into a series of small projects called iterations. Each iteration has its own analysis, design, implementation, and testing. At the end of each iteration, customer input is received. In other words, that iteration is explained to the customer and the customer returns. If the customer does not like or accept that iteration, only that part is corrected again. In this way, the process can be completed with much less loss compared to the waterfall model.",
        "38": "In short, the raison d'Ãªtre of Agile development methods, as the holy religions (although I don't know what the unholy ones say) say, is to minimize waste.",
        "39": "The reason for writing this is that for me, when I go back to my notes, I have information that I can understand succinctly, and it is one of the cornerstones of the work we have started.",
        "40": "My understanding of software development was this: I'll design everything perfectly from the beginning, and then I'll code it and watch it perfect.",
        "41": "But that's not what this iterated model is about: I might need to change my design. If my analysis and design, which seemed perfect at the beginning, is terrible, I should be able to fix it. I shouldn't have to start all over again. And maybe, as they say, a perfect design is just a myth. Which it is.",
        "42": "In my sources of information I also found the following: Do not design for all requirements at the beginning. A detailed design should be made for the iteration being worked on. Designing small details without looking at the big picture doesn't make much sense to me at this stage, but I will try to engrave this point of view somewhere in my brain. But I also agree with what they say: \"Not everything you design is perfect and will change or evolve throughout the life cycle of the project.\"",
        "43": "Now it is clear why we should use an Agile methodology. So why use and will we use object-oriented analysis, design, and programming?",
        "44": "Why Object Oriented?",
        "45": "We can be very familiar with the project, the programming language. We can create a product that actually works and that the customer will like without object-oriented programming. But with a small change in a small part of the code, everything can become very difficult and the sustainability of the product is lost. What object-oriented design and programming offers us is \"modularity\". Modularity gives us great ease in updating and reading the code.",
        "46": "What kind of Analysis and Design?",
        "47": "The first step in object-oriented analysis is to listen to the customer. We need to listen to the customer's problems so that we can create solutions. One or two user stories should be covered in an iteration. We are generally advised not to cover more than 10 percent of the whole story in a single iteration. The reason is that it is actually contrary to the existence of Agile.",
        "48": "The next step after listening to the customer story is to design the domain model with that story. A simple way to do this is: listen to the user story and underline names. These names indicate our potential future classes and are added to the domain model. The domain model simply defines the names and attributes of the classes. The behavior of the classes is not included in the domain model.",
        "49": "Summary of this section:",
        "50": "Listen to the customer/user story.",
        "51": "Design the domain model.",
        "52": "So the goal of analysis is to derive domain classes from the customer/user story, and the goal of design is to establish the relationship between objects in the domain model based on the user story. In addition to design, there are some principles (like SOLID) and design patterns (by Gang of Four) that have been established for object-oriented programming. We should take these into account when we create our classes.",
        "53": "3 stages of object-oriented analysis:",
        "54": "Define class names",
        "55": "Define class attributes",
        "56": "Define the association between classes",
        "57": "The 3 stages of object-oriented design:",
        "58": "Create sequence diagram for each scenario",
        "59": "Create the class diagram design",
        "60": "Apply design patterns and SOLID (because I learned it, otherwise other principles can be used) principles",
        "61": "I broke the task into 4 parts for the Monday morning deadline: ",
        "62": "Identify use cases, based on the user/customer story",
        "63": "Create a domain model",
        "64": "Create Interactions (sequence) diagrams",
        "65": "Create class diagrams",
        "66": "Today I was in phase I. I tried to create every use case I could think of for the user and admin. In some places I also needed the system as a third actor. Some use cases were very basic, some were much more specific. The biggest thing I learned in these few days was \"to learn or repeat the information that ensuring modularity and creating good inter-object relationships are the most basic goals\". I only wrote down the use cases that came to my mind in 1 day and I don't know yet how to organize the relationships between them when there are so many of them. But tomorrow I will try to create domain models according to each use case. I don't know yet how to create modules or a \"modular structure\" according to the interconnected parts. As you know, this is the main problem and what I need to solve. All I want is to make a lot of progress tomorrow otherwise I feel that I will have a hard time until the project deadline.",
        "67": "I'll read a little more and then I'll go to sleep."
    },
    "part10": {
        "1": "Day 91",
        "2": "Yesterday I had created the use cases, but they were too complicated. Today I organized it a bit more and cleaned it up on the computer. So I still haven't created the domain model yet. Tomorrow I definitely need to finish it and even complete the sequence diagrams. So I'm going to get a good night's sleep today and pick up where I left off tomorrow.",
        "3": "Day 92",
        "4": "I created a total of 11 use cases. Today, I created the domain class model, sequence diagram, and finally the class diagram of only 1 of them. There may be missing or incorrect parts, but I tried to do it as well as I could. Since I won't be able to advance all of the remaining 10 use cases tomorrow, I think I will continue to work at full speed on Sunday.",
        "5": "Day 93",
        "6": "I didn't know how to estimate the duration of the task I was going to do in my project, because it was the first time I was going to do something like that. If I am a person who doesn't know math at all, I can't estimate how long it will take me to calculate that 1+1 is 2 with my existing knowledge. I can only make it up. But if I have done this calculation or something like it before, I can make a more realistic estimate. If I haven't done this calculation, how can I make an estimate? By not reinventing the wheel, of course. I wanted to come up with an appropriate solution to this time problem without reinventing the wheel, but since I couldn't find the temporal data provided by different people, I obviously made up the project duration at the beginning by trying to be logical. After 1 week, based on my own experience, I was able to get an idea of how long it would take me to finish part of the project, and then I made an estimate accordingly, but I was careful to create it in the least risky way for myself.",
        "7": "What I learned on the last day was this: If I have a project in front of me that I don't know how long it will take and I need to complete it, I need to do research about that project first. If my previous experiences, different people's experiences can help me, I can make my estimate with high accuracy. If not, I can break the project into smaller parts and create an estimate for the parts where I can find a reference (myself or someone else). This has just occurred to me. For the parts that are unknown, I will pass on the unknown parts to the person who forwarded the project to me and explain the current situation with accuracy.",
        "8": "Sometimes I like to play with a problem and solve it with a simple approach, but sometimes I can turn it into a monster, which can cause difficulties for me in terms of progress. I'm usually aware of what I'm doing, but sometimes the monster can be attractive and I feel like it's pulling me deeper and deeper. I've felt that a couple of times in this project. But even though I get tired and lose time fighting it, I still think I come out ahead, because it's not real. Me and my progress is real. I think I've gotten bogged down in too many unnecessary details. An ordinary creature with a developed brain.",
        "9": "Day 94",
        "10": "I continued where I left off today. The class diagrams of the product search and review, adding the product to the cart were the subject of today. Tomorrow I will be halfway through these diagrams for two or three use cases. I think I will complete the details (verbal parts) of the report on Wednesday.",
        "11": "Day 95",
        "12": "At the beginning of the day, I was looking at converting the use case into a class diagram, and then I was thinking about the communication of objects over and over and over again, and I started to come up with my own outlandish ideas. Objects were communicating in pairs and these relationships were provided by methods. Since the objects were created in relation to contemporary life (not in software, of course), I thought, why does an object need another object to touch it for messaging? In a movie whose trailer was shown in the movie theater today, there was a saying \"The one you seek is the one who seeks you\" (maybe we shouldn't take Sufism as an example in this regard, but I wanted to add it when I thought of it). In order for me to put one object in contact with another, it has to seek it. The other object is waiting to be sought. It's a bit like \"it was already being searched for\", but that's how it is. I thought what would happen if a third object listened to the other objects talking, that is, an object that listens to two or more objects talking. Objects communicate only when they are called. It's like a snake that doesn't touch me. Actually, this may be the purpose in the current use. I think the opposite situation (objects that hear everything and communicate) is in the procedural method. I dreamed too much unnecessary dreams, I felt like it was going nowhere. Let me end this paragraph by saying that at least dreaming is also important.",
        "13": "And then I looked at Actor Model, and Alan Key has a Quora account and he answers a lot of questions there. When I saw this, I was very impressed because he became one of the heroes of fairy tales in my eyes. He mentioned that Actor Model is actually not much different from OOP. In fact, since the pure object oriented logic that was first created turned a little more class oriented afterwards; he said that Actor Model is more similar to pure OOP than the OOP currently used. The reason is that it focuses on messaging as far as I understand. I understood the concurrency advantage, but since I haven't seen it in practice, I only grasped it logically. Apart from that, I guess Actor Model can also be used in PHP. So I thought why Actor Model is not used now instead of OOP. There were answers I found. But I didn't fully understand. The only thing I can relate it to is that it might be similar to why SmallTalk is not used now. Of course it is used, by the way, discrete (like microservice. I only know it as a concept. I have no idea of the details) especially for systems. But I realized that it is not very common.",
        "14": "Then I looked at self reference classes, which is also possible in different ways. The most striking feature is its similarity to the linked lists I encountered while looking at algorithms. It was possible to create linked objects just like linked lists.",
        "15": "I did a bit too much research today, to be honest. I did what I had to do, but I also did a lot of research on this kind of stuff.",
        "16": "Day 96",
        "17": "Today I completed all the verbal parts of the project. Then I added the work I did before to the file and completed it. I realize that there are many, many shortcomings. Especially when creating the diagrams, they seem to have evolved. Because they really evolved. I always tried to try out the new things I learned in the new parts I created. Some of the classes may have had insufficient attributes, some of them may have been redundant. When I started to think about these things enough, I was starting to get into programming logic a lot, so I left it a bit more superficial.",
        "18": "At the end of the day, I thought about English. I also lack a lot in speaking. The reason for this is that I have trouble finding words when speaking a foreign language and I think I also lack self-confidence in this particular subject. Because while I feel very comfortable talking to a foreigner, I don't enjoy speaking a foreign language with a Turkish person at all. Because I feel like he/she will always look for something wrong with me and that's why I prefer not to speak unless he/she is a humble normal person. Why did I mention English? The advice at the core of speaking English is not to think in Turkish and to try to speak and think in English without translation in daily life. I always give up on this because I don't know the word meanings of the things I encounter in daily life. How can this be solved? It can be done by thinking about the words and sentences that are frequently used in daily life and learning those words. Diagrams were created for communication between objects. I assumed that I could create a diagram for this too. I will say the sentence to the machine in Turkish and it will give me the English equivalent. For example, Cortana or Siri is spoken in a language, yes. But what if the machine responded to my sentence in English? What if it specifically specified those words to me and tried to make me speak. In a way, the machine would be my English teacher. Like Elsa, it could present my mispronunciations to me as statistics. She could send me a text of our conversations. I could read it if I wanted to. I'm talking about different technologies here, all in one place. Maybe there is such a thing and I don't know about it. In short, I just thought of an application that could help me think and speak in English. It could provide the translation part with an API related to translate. But artificial intelligence would come into play for things like him asking me, which I don't know anything about. Still, it seemed like something I could think about.",
        "19": "Day 97",
        "20": "Today was a mixed day. I read a lot of interesting topics on Mozilla Developer Network, I kind of did it again. Afterwards, I saw an article on MDN about publishing a web page and it talked about creating a static web page on Github. From an article on Medium, I learned that this page can be provided with a database using the Firebase API. The static site normally only has Javascript, HTML, and CSS. I will try to pull the information I get from the user into the database using Javascript with the help of the API. If I can do it, I think this can be my backyard or garage. At least I think I will have learned how to use the API, how to get the data to the NoSql database and how to process it, what GIT is and how to use it, how to create a project on Github and how to update the project instantly with GIT or Github Desktop. I think I will look at this over the weekend when I am free. I looked at GIT a little bit today, but I found it confusing at first because I'm new to it. So Github Desktop is very simple to start with, so I used it to simplify project updating. Actually, there are solutions with Firebase for both mobile app development, hosting and database, but for now I want to solve the database part. First note: I installed GIT and Github Desktop on my own computer. I could have done without it, but for learning purposes. Second note: There is another site called Heroku that does something similar to what Firebase does but it can cause some problems:",
        "21": "That's why I haven't looked at it at all. Third note: Today I also did a little research on Libra (now called Diem) and SDR. I came across the concept of pegging money to several different currencies and not being affected by inflation. There was also a lot of talk about the concept of stable coins. But I am not yet familiar with the subject. I will look again. This is a small step for both humanity and me:",
        "22": "Day 98",
        "23": "Biraz daha erken dÃ¶neceÄimizi dÃ¼ÅÃ¼nÃ¼p akÅama bÄ±rakmÄ±ÅtÄ±m raporu. Ama geÃ§ vakte kaldÄ±. DÃ¼n baktÄ±ÄÄ±m konular Ã¼stÃ¼nden gittim bugÃ¼n. Github Pagesâte dinamik web sayfasÄ± oluÅturmak anladÄ±ÄÄ±m kadarÄ±yla backend bir servis olmadan yapÄ±labildiÄi iÃ§in onun Ã¼stÃ¼ne Ã§alÄ±Åmak gereksiz geldi. HÃ¢li hazÄ±rda static bir web sayfasÄ±nÄ± yapmak gibi bir amacÄ±m olmadÄ±ÄÄ± iÃ§in o konudan vazgeÃ§tim. SonrasÄ±nda yine OOP ile ilgili konulara baktÄ±m biraz daha. Bir Åeyi ya bilmiyordum ya da sonradan tekrar keÅfettim: Javascriptâte conctructor fonksiyonlar varmÄ±Å. SÄ±nÄ±f dÄ±ÅÄ±nda bir fonksiyonun constructor olarak tanÄ±mlanmasÄ±nÄ± daha Ã¶nce gÃ¶rÃ¼p gÃ¶rmediÄimi hatÄ±rlamasam da yeni Ã¶ÄrenmiÅ hissediyorum.",
        "24": "BugÃ¼n de yine bol bol yazÄ±lÄ±mla ilgili konular hakkÄ±nda araÅtÄ±rmalar Ã¼zerine geÃ§ti diyebilirim.",
        "25": "99. GÃ¼n",
        "26": "Today, instead of being result-oriented, I was path-oriented. Maybe it was not the destination, but the paths taken on the way to the destination that mattered... Yes, I should be more technical than literary and philosophical.",
        "27": "I tried to reconcile the task given today with the design patterns and SOLID that we had worked on before. I wanted to create something accordingly. Did I succeed? No, I didn't. But I'm trying, I will try. I realized again that it's really not as easy as it was when I was reading. Producing something is as enjoyable as it is difficult. Yes, I am creating a class diagram, but the connections between them are so incomplete that I am aware of it myself. For example, I have not yet written what type the input and output parameters will be. Although I try to make the communication and relationship between the classes as much as I can, I don't yet know how much it will resemble that class diagram when I write code. I will succeed no matter what, at least I will try.",
        "28": "has impressed me quite a lot. The only things that attract me in mobile games are strategy games. That's why I chose strategy as a theme. I thought, why not a game inspired by the naval wars of the Ottoman Empire and the states of the period? And I was surprised by the ideas the app gave me. It told me about possible enemies, alliances, regions to fight in (such as the Mediterranean, Istanbul axis, North African coasts), periods in which the game could take place (even modern Turkey after the second world war was included), difficulty levels, attacks from near land to the warship or from the aircraft carrier to the land. It was like the AI was playing a game of whack-a-mole. It was blindfolded and I just directed it to \"hot and cold\", but there was a problem. I think it was just taking inspiration from the games that had already been made and published. Because I wanted to develop a scenario like this but he always suggested the opposite arguments. The scenario I wanted to create was: \"What if Adolf Hitler had won?\". For example, it would have given me pleasure to play the game or read and watch the fiction. But since the practice, as in most games, tries to make Germany lose, I was left at the beginning.",
        "29": "My favorite feature is that it unleashes the creative side of a person. It gives you ideas to start with and you can create different fictions based on that. It made me think more about AI, even though it's a bit independent of game making. I thought, if an app can create these scenarios, why can't AI somehow write poetry? Because it can seriously use existing scenarios to create a complex product. It can manipulate us with its fictionalized stories. And they proved this with dating apps that it can be a person of the opposite sex. Our primitive relatives used hand tools to break down food, extract it from parts of the hive they couldn't reach, use fire, use different animals for transportation and communication because they themselves weren't fast enough, and there are so many other things. Now, because we don't think our intelligence is enough in some areas, we want to use something perhaps more intelligent for us. I hope that my existential anxieties are the result of the actions of beings much more intelligent than me.",
        "30": "Day 100",
        "31": "I realized that my perspective on OOP has improved over time. I still have many mistakes, but I say I'm glad we did those readings because there is to think about it in practice, to produce, to get tired if necessary, to suffer. ",
        "32": "I remember when we first looked at what object-oriented programming was, and you expected something about products and categories. You wanted us to build an OOP based structure where categories and products were related to each other. At that time, I remember using interfaces everywhere because I had just learned about interfaces. In addition, there was only inheritance. And later, when I was working on SOLID, a mistake I made in that work was engraved in my mind: \"Interface Segregation Principle\". It was about an object that implements an interface should use its methods. When there were branches and branches in inheritance, some objects had to implement methods that they would not use. And that's why ISP was the rule I thought I understood the fastest in SOLID.",
        "33": "I learned how to use interface incorrectly. Then I heard the names of the relationship between objects: \"Association, aggregation, composition, dependency\". The concept of \"part-whole\" was mentioned, but I didn't understand it at all and I was covering it up. And I thought that I was learning from places that were explained with different concepts. Which I really felt that I was learning. Then I studied design patterns. Learning design patterns in 1 week was like learning regex in 1 day. When I read it, when I looked at the examples, I thought I understood it, but I felt that I had forgotten it because I didn't encounter it in practice and assimilate it. But it's not like regex, I need to have a good grasp of at least a few of them in the near future. ",
        "34": "I suffered a week ago. The report, the planning, it was difficult. It was necessary to suffer.",
        "35": "In the structure I set up yesterday (registration and login), there were aggregation relations in many places. I thought it was wrong, that it shouldn't be this much.",
        "36": "Today, I established abstract class, interface, aggregation, association, composition relationships in the structure that is about seeing and updating user information. I established them not because I had to, but because the needs pushed me in that direction. Maybe my logic may be completely wrong, but I think I understand a little more. I can feel that my perspective on the relationship between objects is getting a little better by looking at it from different angles every day."
    },
    "part11": {
        "1": "Day 101",
        "2": "I wanted to illustrate the distinction between composition and dependency, so I produced one: human, mountain, Earth. The Earth contains the man and the mountain. There is a relationship of ownership and part-whole. The Earth does not depend on the mountain or the human being for its existence. So there is no \"dependency\" here for the world. There is \"association\" in the most general sense. We can give the moon as a distinctive example for association. The Earth can use the Moon satellite to maintain the tides in the ocean object it possesses. Here, \"use\" is emphasized rather than ownership. This is also an accosication. Man is a part of the earth, but man can exist outside the earth object (he can live on different planets and satellites when appropriate conditions are met). The mountain cannot exist outside the earth. There is such a difference between Earth-human and Earth-mountain, even though the Earth has both. The Earth-human relationship is an aggregation relationship whose superset is asscociation. The Earth-mountain relation is a composition relation whose superset is association. Since the example would be inefficient if we expanded these lines of thought, we can grasp the concept from this narrow framework. ",
        "3": "Inheritance is simpler to understand: Man is not the Earth. It should not take on its characteristics (one should not think that we all came from the earth and will go to the earth). Man is a primate, an animal, a creature, a concrete being. All of them can inherit common human characteristics and procedures. The problem with inheritance is that it is like steel. It does not stretch easily, it is hard to shape by beating. That's why the GoF book says \"prefer composition over inheritance\". It doesn't mean make a composition relation everywhere you see it. Prefer composition because it is easier to change the behavior of the object using dependency injection/setter. In inheritance, it is not possible to derive objects from more than one type (at least in most software languages) and it is coupled. Therefore, the use of interfaces and abstract classes becomes important. If I go into SOLID principles, which are complementary to each other in this article, the topic will get longer. Inheritance is like steel, composition is like copper. It is easier to forge, process, shape and modify. In order to use Inheritance like copper, it is necessary to know SOLID principles and pay attention to these principles during the design phase of classes. In short, the polymorphism provided in the OCP, Liskov, ISP principles of SOLID is the most important issue in this flexibility.",
        "4": "These are the things I learned the best. I hope I didn't learn it wrong. I don't think it is yet possible to explain the whole structure in the best way with a single sentence.",
        "5": "I thought about what I did today. Thinking about the objects on the site, their relationships, their structures was what I did the most. Today I thought I would work on products and categories and make class diagrams. There were so many interconnected parts that sometimes I didn't know which one to focus on, and I thought I could look at some places while thinking about a different scenario and connect them with the objects used here. Did I think about Liskov for example in the places where there is Inheritance? No, I didn't. What I did was wrong, I realize that and I condemn myself, but I don't enjoy humiliation, so I keep the condemnation short and say to myself \"you'll focus on that too\".",
        "6": "Will I be productive after 2 months?\" Although it is best to say \"Only God knows\", I think I can. I look at the path we have traveled in 4 months and I also look at different people's stories about the development processes of people at the beginning of this subject. In 4 months, even though I don't know exactly where I am, I know that I have done enough work and that you have helped me a lot. What has happened in 4 months. I remember that coding, project process, failing, succeeding, every time an alarm sounded in my dreams, \"yes, I completed this part, now let me complete this part\" software process management. At the end, I hope I will wear the gold bracelet on my hand.",
        "7": "Day 102",
        "8": "Today I continued on the same topics. Yesterday I tried to think about the product and category and tried to do something, but it was not completed. Today I added some missing parts and then looked at adding the product to the cart and purchasing. It's not complete yet. For the last 3 days, my brain has been so full that I feel like the stagnation of a \"cold-blooded\" insect that moves very slowly in the house during the winter months is what is happening in my brain. Still, somehow there is progress, of course. At least I am thinking about the system and getting to know it more closely. ",
        "9": "Day 103",
        "10": "I spent the whole day on the payment system. At the beginning, I thought about the relationship with the payment methods. Then I read the parameters received from Iyzico and given to Iyzico from their site. I assumed that these parameters were also in Gpay, Paytr, Papara. Or at least I thought that they should be very similar. When designing the payment system, there were very interrelated structures. Interface-abstract class usage was mandatory. But I couldn't figure out where and how many relationships there were. Then I looked at what design patterns people had used before in payment. I generally encountered factory method, strategy and facade patterns. There were many similar examples of using simple factory and strategy pattern together, especially in both authentication and checkout. Afterwards, I spent most of the day again understanding these design patterns and theoretically designing how I could fit them into my own system. While looking at the strategy pattern, the open-closed principle directly caught my eye. It seemed like its whole purpose was to provide it. I didn't really find much difference with Factory. Although they mentioned a lot of differences in stack overflow, I haven't grasped it yet. The clearest thought I saw was that the payment methods should have a common structure and instead of using them all with a hardcoded structure, we should follow OCP and not update the old parts of the system when we add or delete a new payment method. I thought just a simple factory design pattern would be enough and I started to implement it. It's not finished yet. The reason I came to the last conclusion may be because I couldn't understand the difference between Factory-Strategy patterns. Although they are very similar in structure, I understand that the reasons for using them are different. I think the design patterns are topics that I can use and keep in mind as I encounter problems. I will solve that too.",
        "11": "Almost every new day I want to do so many things: understand the algorithms book completely to every point, iterate the examples myself, then code and create a perfect frontend and user interactive algorithm library, study artificial intelligence (what can be done in the web space differently) and create small projects of my own, learn javascript (plain-normal, node, even react). In general, I'm at peace because it's all something I love and I'm satisfied. Of course, these extreme examples are things that can be done later as a hobby rather than a job. But the fact that it can be done as a hobby is the best part of the job.",
        "12": "I still haven't done a good research and I haven't focused on inflation neutrality or a system where there is no volatility of currencies. But that's always in the back of my mind.",
        "13": "Day 104",
        "14": "When I said that I should use SOLID fully, I did it by creating different classes for each part that contains information about the user. I thought that I would pull the necessary parts from the User class and complete the operations in that way. I could do this by using DI, I thought wrong. Maybe I should have thought about the single responsibility in SOLID by looking at the system from a slightly larger scale. I'm upset with myself. I may have gassed myself like Fatih Terim uses the method of constant gassing while giving strategy to the team. I will learn to walk by falling. This week has been like a child learning to walk for the first time and trying to do something without parental support. I hope to stand on my own feet soon (in terms of software).",
        "15": "Day 105",
        "16": "Today, I went through the mix. For the first time, I saw how to work concretely on SEO, which I had read about before. More precisely, beyond SEO, today I learned what Google Analytics does, what user statistics are (demographics, interests, session times, activities (e.g. purchases), browser information used, country of access, user bounce rate, etc.), data about user traffic, the ways used to access the site (acquisition: paid search, for example), the ways in which the site was advertised and which type of ad was used to see which users came from these ads in analytics. I talked about event generation, which is a concept that works mostly in retargeting and remarketing, where user data can be analyzed in real time. I also saw the use of Criteo. I learned that it can be used instead of Google ads (for example, you can also advertise on firefox).",
        "17": "I understood the importance of a sitemap, what indexing does. I learned that the Soft 404 error and the use of the noindex tag are SEO's nightmare.",
        "18": "The main thing I learned today is that if I said I would say something, if I wrote it down, I should not forget it. I don't have that luxury. See here: French.",
        "19": "I found that the simplest way to report when there is an error somewhere is to specify the error and the location of the error as a title, then send the description and screenshot to the relevant person.",
        "20": "Afterwards, I did a lot of reading about SEO from Google's own documents. Before that, I looked at a little more class diagrams. Although there are plenty of shortcomings, I think that a part of the basic skeleton has been formed and I think that the structure will be on solid foundations while coding.",
        "21": "Day 106",
        "22": "Today I continued both the SEO part and our existing task. There is so much information about SEO that I am still trying to learn by digesting it. My main source is google developers documents. I have been looking at them at the end of work for two days. The most memorable of our work today was the work on the links given to the site and the links that exist on the site. For example, I saw the contribution of giving backlinks to the hardware news footer. For example, hardware news had this backlink and did not have a nofollow tag. If there is no nofollow tag, there is a possibility that the site reputation (reputation) may fall in the eyes of google. There are harmful aspects such as a link can go to a spammy lyre site, it can narrow our traffic volume. So why didn't DonanÄ±m Haber use the nofollow tag? It tells Google that this link is sponsored. Seeing that it is a sponsored link, Google says \"aa ok then no problem\". Similar to nofollow, there are also noreferar and noopener tags. In summary, I need to use them in the links on my site for SEO. ",
        "23": "Today I also looked at Semrush, Ahrefs, Serp, etc. I got a bit familiar with them. I saw Semrush's suggestion ideas for pages and I was a bit fascinated by its algorithm. It was showing an error about pagination (they all showed the same page title and that was the problem). In the evening I did some research and found a few useful solutions: \"Use Rel='next' and Rel='Prev' for Paginated Page Series\", \"Use the Canonical Tag Rel='Canonical'\", \"Remove Content from the Google Index\", and more. But I don't know which one will be more effective yet.",
        "24": "While reading about SEO, I came across a couple of Google's suggestions for photos, different from the one I'm using now: For example, it said that presenting images with the <pictures> tag is more useful in terms of responsiveness. He also praised SVG format photos quite a lot compared to other raster graphic formats (jpg, png, etc.). As far as I understand, SVG format images are useful for reducing HTTP requests because they have less size. He also praised the Data URI, but I didn't investigate it too much when I saw that it has many disadvantages. In addition, for example, if you want to add an image with the <img srcset> tag, it may not be detected in every browser, and he recommended giving a backup url as \"img src\". This seems ridiculous to me. If not every browser supports it and the recommended way of using it doesn't have big advantages, why should I choose it? I think I shouldn't choose it.",
        "25": "Day 107",
        "26": "First of all, I realized that I need to make a database connection for the queries I will use after the database-related work and a general work for the queries.",
        "27": "My plan was this: First I was going to create a singleton class for database connection. But this connection should be flex so that it can be made not only to mysql but also to PostgreSQL. For this I created a structure inside the contructor in my singleton class. I tried to create a common structure with the option to connect to the mysql server with mysqli and pdo and a connection to the PostgreSQL server. I transferred the logic related to the connections to the classes to the common interface. Since the purpose of the database connection is to give and receive information, I created a Query class that contains the content and methods of this communication. In its final form <<$query = new Query($mysqli); $query->insert([\"table\" => \"Directors\", \"keys\" => [\"Name\", \"Surname\", \"Age\"], \"values\" => [\"Stanley\", \"Kubrick\", \"66\"]]]);>> will be able to make simple queries like this anywhere in the system. If I can manage it. ",
        "28": "At this stage I'm so focused on writing that I haven't made any real database connections yet and I don't know how many bugs there are in the code. I believe that if I can get the logic right, I'll be able to fix those bugs tomorrow.",
        "29": "I'm trying to build a common structure for both mysqli and pdo. It may seem like a bit of unnecessary trouble. If it will take too much time on errors, one of them can be left for future development.",
        "30": "Today I had a hard time creating the prepared statement with mysqli connection and I will probably solve it difficult because I always had the biggest problem there when I was working with query builder.",
        "31": "Day 108",
        "32": "I had to complete the methods for the database query class today. Yesterday I had to finish the insert part and today I had to finish the rest of it and let me make enough queries in formats that I can use.",
        "33": "What has been done in two days and what is expected to be done tomorrow can be summarized as follows:",
        "34": "Created a class where a singleton database connection will be created and I will obtain this connection.",
        "35": "This class could call different classes according to the connection method when creating the connection (at first I thought of the connection as composition, but the second created class (for example MYSQLI class) was also used for Query class. Therefore, since there was only one class that used two different classes, the relationship was aggregation, i.e. pass by reference.",
        "36": "The MYSQL or POSTGRESQL class must have a common face. It provides convenience to the client in future uses. ",
        "37": "Normally I would write CRUD methods for both mysqli and pdo, but since prepared statements take a bit too much time, only PDO is preferred in this example.",
        "38": "Currently the queries are operating under limited conditions. These conditions are considered adequate for this project at this stage.",
        "39": "The problem may be especially here: For example, in the \"WithMySQL\" class, both the connection database is created with mysql methods and crud operations are provided. There was a possibility to separate it into different classes. It would even be more elegant. It was written with this situation in mind.",
        "40": "Tomorrow, we can probably utilize the frontend of an old project that we have designed before and exchanged data from the user, and user registration and login stages can be provided with this design. Or only the PHP part can be continued.",
        "41": "Day 109",
        "42": "The problem today was this: Some of the mistakes I cause I do without expecting a mistake, and some mistakes I create on purpose, or the system works correctly and the mistake comes. In some places I couldn't figure out whether I wanted the mistake or not. The biggest problem of the day was the fight against mistakes.",
        "43": "Made today: Database and query classes were used in registration related classes created to register the user, send activation link, activate the user according to the returned link and tag the activation code used as \"used\".",
        "44": "I have a question: what can be done to invalidate activation links that have not been used for a long time (for example by changing the code state)? I created an event in mysql and created the necessary sql query, but I saw that I don't have authorization for such an operation in the database. I haven't been able to fix this problem yet. Also, thinking that I can't send an email from locale (there is a way to do that, of course), I assumed that part was done. Obviously, the registration phase seems to be completed on the server side. Tomorrow I will complete the login part, then I will complete the prototyping of the registration and login (with frontend) and move on to the other stages.",
        "45": "Day 110",
        "46": "It was the most unproductive day in 110 days until lunch time. The stomach problem affected my focus badly. So I couldn't do much today. I solved the last fatal error in yesterday's work. Then, since the user can perform the recording process with facebook and twitch, I will add the parameters provided and received to the api as input/output with a function as an example. When I complete this part, the recording is finished."
    },
    "part12": {
        "1": "Day 111",
        "2": "Today, logging in and forgot my password are completed. A random and temporary code is generated and sent to the user who has forgotten his/her password via the method of his/her choice (email or sms), just like the activation code. The user who comes to the system with the link to which this code is connected is directed to change his password, but I haven't reached that stage yet (This will also be discussed in the section of the operations that the user can do on his own information. Most probably by using the get method from the incoming link and maybe with the help of regex, the existing code can be retrieved, its correctness can be questioned and then the necessary actions can be taken). Only random code generation, sending, saving to the database, etc. were completed today in the forgot password section. ",
        "3": "Afterwards, while preparing to make the front end of the input and registration parts, we wondered again what MVC was and wondered if a system similar to it could be created. It seemed like it could be done with code that was copy and paste and whose logic was not yet comprehended. Obviously, it was tried but it could not be done in a short time (not very short actually) because it had a very fragmented structure and since this was not the main problem at the moment, it was later abandoned (Even though it was abandoned, there were parts that were learned or coded in the mind on the most basic basis: Controller=> It contains get and post methods and user actions that want to enter issues related to the model. Model=> Database relationships, the part that contains the main logic of the system, the part we are actually interested in right now. View=> Html and the part that represents the frontend part shown to the relevant user). The main problem is to solve the system of our website as much as possible, to establish the relationships and connections between entities (software entities). ",
        "4": "Tomorrow the classes related to the database will be edited. Problematic parts will be fixed. After completion, login and registration will be finalized (getting information from the user with get and post, keeping the user session with session, and editing a simple frontend used in an old task). It is estimated to be finished tomorrow. If it is finished, the wireframe of the class diagram will be started to be created, which will allow the user to update and see their own information. ",
        "5": "Day 112",
        "6": "I thought I would continue coding today. But I couldn't get my head around the class being an object. I honestly thought I understood the last way it was explained (that enlightenment, that feeling of sparking in the brain), but as I dived deeper and deeper, I couldn't get out of it. \"Nevertheless, if I write down what I have learned, what I have seen and my notes, at least a document that is a reference for me will be created.\" Let's get to the main topics without further ado: What is a class? What is an object? What is a reference?",
        "7": "Let's go through the metaphor of a house:",
        "8": "A class is a blueprint for a house. Many houses can be built using this design.",
        "9": "Every house built (instantiate) is an object, also known as an instance.",
        "10": "Every house has an address. If you want to tell someone where a house is, you give them a card with the address written on it. This card is a reference to that object.",
        "11": "If you want to visit home, you look at the address written on the card. That's dereferencing.",
        "12": "Note: An address is where the object lives in memory. A reference is a variable that points to this address",
        "13": "Let's take a line-by-line look at what happens in this code snippet:",
        "14": "\"new EvSinifi()\" says that, using the EvSinifi design, a reference to the house is returned. You can copy this reference to the variable $home. You ask a contractor to build a house. He builds it. He tells you the address of the house. You write it down.",
        "15": "You give this address to a method (caller).",
        "16": "Here we have the reference \"HomeClass $digerHome\". There is a pass-by-value here. $digerHome inside caller is a copy of the reference $home. you gave caller your own card with the address of the house. what does caller do with this card? He asks for a new house to be built and writes the address of the new house on the card you gave him. Note that the caller cannot now reach the first house (the one built in phase 1). But that house does not change or disappear just because another house is written on the address card he has.",
        "17": "To summarize:",
        "18": "Ask the contractor to build a house. Let him build it. He gives us an address. Save this address in the variable $home (write it on a card)",
        "19": "We call caller. Before doing this, we copy the address in $home to a new card that we give to caller. caller calls this card $otherhome.",
        "20": "caller asks the builder for a new house. He builds it, gives him the address of the new house. caller copies this address onto the card we give him.",
        "21": "We go back to the first stage. We look at the original, unchanged card. We go to the house on the card and we do something there.",
        "22": "A different perspective and a different example:",
        "23": "Let us imagine a television (object) and a remote control (reference). We are connected to the television with the remote control. If we want to turn down the volume, change the channel, we first manipulate the reference. It in turn modifies the object. When you move around the room you still control the object with the reference. You move around with the reference with you, but not the TV. Also, the reference can be on its own without the TV. Just because you have a reference does not mean that there is an object to which it is attached.",
        "24": "Let's take an example from Java:",
        "25": "No object is being created here, just a reference. If you try to send a message to \"s\" at this point, you will get an error because \"s\" is not bound to anything (there is no television). A safer practice is to always initialize a reference when you create it:",
        "26": "But this is a special Java method. Normally a more general type is used to initialize objects. When you create a reference, you need to bind a new object to it. This is usually done with the \"new\" operator.  Here you say  \"make me a new one of these objects\":",
        "27": "The above examples are actually based entirely on the relationship between object and class in Java. Now let's look at how it is in PHP: Looking at the PHP Manual as the main source, we can see that object and class have the same distinction as in Java.",
        "28": "Well, does this distinction exist in every language? This is where it is complicated because every language has a different concept as far as I understand. I read that in Objective-C every class is an object, every class is an object. But since these classes are objects, they have to derive from a different class and this class is called metaclass. Just like an object is the expression of an ordinary instance, a metaclass is the expression of a class object (I didn't know anything about it, but since I said it by referring to those who do, I included plenty of tenses).",
        "29": "In Smalltalk, classes, numbers, strings, even the program itself are objects. ",
        "30": "I'm a bit confused, but I think the rails will fall into place.",
        "31": "Day 113",
        "32": "Pass by reference and pass by value were given a day. The issue was clearly understood. Although there were many questions and answers, the clearest answer was the simplest answer. And when you delve deeper into that answer, you end up with the same answer. It was as if he was saying, \"I was looking for a cure for my troubles, but my troubles were a cure for me; to become a human being, what is needed is wisdom.\"",
        "33": "where variable a is not equal to variable b. It holds the value that variable b holds. This is better understood by looking at the Pointer topic. variables a and b are at different addresses. The only connection between them is that variable a has copied the value that variable b has to itself.",
        "34": "here, a and b can be thought of as the same thing.  It is like calling a person Tayyip or Recep. The same person is called. Things can still get confusing as we go deeper, but in the most general sense, the issue of payy by value and pass by reference is clearly understood.",
        "35": "One thing that was heartwarming when it was understood today was that the objects themselves are not assigned to the object variable as a result of being created with new, but only the identifier that will find the location of the object is assigned to the variable. It was one of the most confusing issues for me.",
        "36": "Today I mostly studied C++ code on these topics (pointers, references, dynamic memory allocation). ",
        "37": "I have to add: That site has given me the most horizon-expanding information of the day (of course you know about it, but that's what it did for me).",
        "38": "The last two days have been focused on the theory, even though it is not on the agenda. Tomorrow it will be back on the agenda. The mission will continue from where it left off.",
        "39": "Day 114",
        "40": "The first thing today was the database connection and the class arrangement related to the questions. The query methods will be called using a different class. That can be fixed quickly.",
        "41": "Then the codes written for registration and login were combined with the front end. There is a little bit left in the input part, but it is almost finished.",
        "42": "Tomorrow, after quickly completing the deficiencies, we will move on to coding the class diagram created for viewing and updating user information.",
        "43": "In addition to what was done today, there were things that were not done but were wondered about:",
        "44": "I was assuming that I had sent the code required for account activation by email (an assumption that indicated \"sent\" as a return in the relevant function output), and I was continuing operations with that assumption. I wanted to try the mail() function. I tried it (by providing the necessary configurations in php.ini and a related file). But I encountered the mail SMTP server error many times and couldn't find a solution. The error is probably caused by the TLS-SSL port. But since I couldn't solve it, and also because more modern methods of sending mail are preferred, I stopped trying. I haven't tried any other method.",
        "45": "The second problem of the day was how to get the client ip. Yes, I saw that I could get it using $_SERVER['REMOTE_ADDR']. which I think is the best way. But,",
        "46": "reading that comment, I questioned a bit too much whether there is a security vulnerability.",
        "47": "Day 115",
        "48": "The work we have done before allows me to reach much faster results on those issues. I think this is a very positive thing. At the moment, login, registration, database issues seem to be completely finished. I have coded the IP address protection part, but since I will do the user preferences part tomorrow, it will also be affected from there (in case the user wants protection, I will take the parameter that will come and put it instead of the parameter I put temporarily), so I can say that there is a small nuance left to complete that part.",
        "49": "I think I know what I am doing, what I need to do. I think I understand the relationships between the classes to some extent and I can play with them like a puppet artist (at least at my level).  In design patterns, I try to use not what I know, but what I think is the best approach to solve the problem in line with the need. I am hungry to do better, to write cleaner, to fit the concepts better, to get to a level where I can understand the system on my own. I am glad I am. The road is long, but the journey continues. ",
        "50": "Day 116",
        "51": "Not a lot of noteworthy code was written today. It was more of a day where I tried to think about what I could do and how I could do it. Towards the end of the day, I didn't feel productive, so I changed the topic and looked at the algorithm book for the last 1 hour. In general, it was a calm day. It was just a bit unproductive because I was looking at a different class diagram and it was realized that it was not constructed very well to put it into code. But I will recover.",
        "52": "Day 117",
        "53": "The part about updating the user's information was looked at today. It got a bit confusing. This is why: it was thought that the user class would be more directive and would not contain detailed logic. But the _set() and _get() magic methods of this class were entered into operations that were not thought to be done in the user class. Therefore, how to get out of the business without much confusion and how to make a good design was thought and tried to be created today. The record entry part was done in a much more systematic way than here. Today, it was felt that it would cause a bit of urbanization. Either the slums will be demolished or they will not be allowed to be built. It is thought that tomorrow the general structure will be revealed even more.",
        "54": "Day 118",
        "55": "Today was the most interesting of 118 days. First of all, I realized that the class diagram I created about updating user information is not very valid while I was working today. I am going out of the concept I created in my head and this is challenging me. I tried to overcome these problems for most of the day, but since I felt my work inefficient and floundered in the same place, I did some reading on related topics afterwards. Tomorrow I will try to move forward with vigor.",
        "56": "Why was today the most interesting day? Yes, maybe I shouldn't think about such things in my professional life, but I was a little obsessed at the end of the day. I thought the person who was crying was innocent. For the last hour, my mind was on that subject, even though I distracted myself. I was upset. But then, when he told me the real reason for his dismissal, I laughed at my own naivety again. I thought I was a bit smart, but it was not a case of \"I thought we were the marginal ones\". Those who left really did it themselves and found it. I will continue to work and strive to improve myself.",
        "57": "Day 119",
        "58": "Today, most of the day was spent watching your code live, witnessing the code writing and understanding it. I also think I understand it. After work, the strict type issue in php was discussed. The following article came to my mind at that moment, but I couldn't express it fully:",
        "59": "I looked again at what you meant here. There was a train analogy in the answers. That's why today's topic brought branch prediction to my mind, although it's not very relevant. I won't go into details because I don't know much about it, but I will research and learn it later because I was curious.",
        "60": "A Nietzsche quote to mark the meaning and importance of the day:",
        "61": "âVerily, I have often laughed at the weaklings, who think themselves good because they have crippled paws!â",
        "62": "Day 120",
        "63": "Today I was thinking about using namespaces, writing classes in a separate file and accessing them that way, using autoloader, how the directory structure should be, the existence of some standards in PHP created by people who write frameworks. ",
        "64": "First of all, since I had experienced the problems caused by the lack of namespace many times before (the same class names overlapping and the program producing undesirable results), I had already looked at its use and knew why it was used. So there was no problem there. What I encountered for the first time today was the autoloader itself. I learned what autoloader is, how it works, and then I needed to understand how the directory structure of the files should be. There was no single truth about this on the internet. Everyone had different approaches to directory structure. There was no single formula, but there were some solutions that were generally preferred: My main source for this was this article:",
        "65": "I could separate files-classes according to their archetype (like behavior, for example, files that behave as controllers) or I could separate these files according to their feature (called feature, for example, collecting files containing concrete classes related to the product in one place). The author talked a lot about the benefits of grouping directories according to feature. For example, when a developer looks at the directory, they can quickly get an idea of what the application is doing. It is actually much more organized code generation. One of the main details in the code we wrote (or rather you wrote) was also in this article: \"Separate general purpose code and domain code\". It was mentioned to separate core and classes. Lava could come to us from the core of the earth. But we couldn't go down to the core. The sun would warm us, give us life. But we didn't add anything to the sun, the sun didn't need us (who knows?).  In the same way, the files in the core folder have no dependency on the classes folder where the domain classes are located. But there is the opposite dependency.",
        "66": "If I mention something out of the day, yesterday I noticed a few problems when I accessed the site from my computer, which of course you know, but I just saw it: there was an error in the sizing of the photos in the carousel because of the smaller screen size of the computer. If you canceled the calc() operation on the parts where there was an error, it would fix it. But only for those screen sizes. Today I was curious and downloaded firefox. On the home page I saw something different this time: Some of the boxes (divs) with categories on the carousel had different sizes (related to flex, but I don't know why there is a difference in chrome and firefox yet)."
    },
    "part13": {
        "1": "Day 121",
        "2": "When I looked at the calendar in the morning, I was surprised because I thought it was Wednesday. I don't know how this week went. I couldn't do what I wanted to do on time. When I looked at my code today, I felt like I was responsible for the murder of OCP (open-closed principle) in solid. Because it was both open for extension and open for modification, especially looking at the code I wrote today.  I try to realize the mistakes I've made before and then try not to make them. I refresh. Then I try again.",
        "3": "Today I got stuck in the same places a lot, which was due to my own mistakes. I corrected the mistakes in the evening. Tomorrow I will be faster.",
        "4": "Day 122",
        "5": "At the beginning of the day, I was correcting my deficiencies in the PHP part again. Afterwards, I was going to complete the security settings. But since I turned to the frontend part, that's where I left off. I think I did something very similar to the introduction, but I must say it wasn't pixel perfect.",
        "6": "That's all for today.",
        "7": "Day 123",
        "8": "I'm looking at what I've done today. Actually, it seems a little, but I'm actually satisfied. Especially intervening in the frontend with Javascript is very enjoyable and instructive. Even if there are things I don't know or can't use, it's a great feeling to be able to use them somehow (with your help). ",
        "9": "I plan to complete the IP related parts first thing tomorrow morning. Fixing the database table, adding the IP protection feature and logging in accordingly, showing the ip's registered in frontend (again javascript will come into play, basically).",
        "10": "If I talk about outside of work (for hobby purposes), I have played agar.io many times before. I want to do things like muting people I don't want in agar.io chat, bot messages with javascript in my free time (I don't think it's very difficult). I'm thinking if I can make a bot in the same game again. There are examples on github, but it seems a bit complicated at this stage. But that's what I want to do the most. (Yes, these thoughts may seem a bit unnecessary, but they interest me).",
        "11": "The other issue is actually not a hobby. I used to watch TV series and movies with Turkish subtitles for years. Now I started watching them with English subtitles. Even though there are many parts I don't understand, the parts I understand are not less. 22 episodes of person of interest ended like this. I hope to be exposed to the language and improve. ",
        "12": "In addition, I also looked at the \"fast inverse square root\" topic you sent me. To be honest, I don't understand the bit calculation on 32-bit processors with the magic number given in hexadecimal form. Byte shifting is mentioned, but I got stuck there (that seems to be the most important part, after understanding the newton-raphson method). I will look at it again tomorrow because it left me with more questions than it broadened my horizons.",
        "13": "Day 124",
        "14": "Most of the day was spent adding, updating and reading json data to the database. Adding and deleting registered ip has not been done yet, but the infrastructure has been partially established. Tomorrow first thing will continue from where we left off. The most challenging part of the day was preparing prepared statement for sql query. It was first tried to be integrated into the system previously established for database operations, but since it was not successful, a temporary solution was created for this problem. It was not a general solution, it was installed only to meet current needs at this stage. But if you want to make it better, that part will remain as future development as the general solution will take time.",
        "15": "Day 125",
        "16": "It has been 125 days since I started reporting on a daily basis. It has been almost 5 months in total.  After this brief realization, let's come to today:",
        "17": "Mysql functions such as json_set(), json_delete(), json_array_insert() were tried to be used for pulling and updating information from the database. However, since there were no efficient results, old methods (such as pulling the data with the select you mentioned, decoding and processing it, then encode and rewrite it) were used. Read and delete operations were done. The only part left is to update one of the existing ip's and add a new ip. Actually it's all the same thing (update operation), just separated into separate parts.",
        "18": "In the frontend part, time was allocated to javascript again today. Actually, it can be done more simply, but it was tried to be done for a bit of a challenge.",
        "19": "Day 126",
        "20": "Today I completed the things I wanted to do. Things I expected to be done in a much shorter time took extra time. I think I'll get better at time management with practice. It feels great to be able to build and do creative things, whether it's Javascript or PHP (JS in particular has a certain charm. The syntax is sweeter, but I don't have professional technical comments yet). In the same way, trying to find different approaches to solving a problem, trying to understand and grasp different approaches is also a very nice feeling.",
        "21": "In general, the problems I face at this stage are not unsolvable. Problems are solved, of course, but my biggest desire is to create very elegant and elegant solutions without causing bad code. I'm not at that level yet, I'm aware of that. I want to be like a good writer, like an artist. I have no idea if I have a beautiful voice, if my pen fills its ink with inspiration, if I have a lithe body, or if I have clever and ingenious ideas. I just want to find in myself the dedication of Usain Bolt on the day he breaks the world record, like a theater actor who will appear in front of the audience for the first time every morning and watch the audience and the stage through the darkness, as if he is dealing with an art form. And it's not just that I want to, I have the same excitement many days, I live it, when I solve a problem, I quietly feel myself soaring inside. I talk like this, but these are not thoughts that are written down with cheap and simple purposes at the level of \"please don't throw me out, I'm good like this, I'm good like that\", but just the echo of the voices that come from within. Of course they were a bit fantastic examples, but I wanted to write them anyway.",
        "22": "Day 127",
        "23": "Time needs to slow down, it is moving too fast.",
        "24": "Today I looked at what ajax is and how to use it in general. To be honest, there is not much difficulty in using it, even (although I cannot upload the file with the .png extension to the computer and pull it from the computer) it is a better method to use. Of course, I haven't learned and used it fully, but it doesn't seem like a subject that will take a lot of time. Ajax is a bit more like using a mathematical equation. Objects are ready, properties are ready. Only the calculation needs to be done to create the equation correctly and find the results. Of course, this analogy is valid for many things, but due to the structure of Ajax, it seemed like it was enough to use this formulation.",
        "25": "Day 128",
        "26": "Yesterday I learned how to use the XMLHttpRequest object to exchange data with the get or post method. Today I learned how to do this with the fetch api, which is based on the same system but simplified, and I tried to practice a little by trying it in my own code.",
        "27": "XMLHttpRequest and the Fetch API follow the same origin policy. So, if the response from other sources does not have the correct cors header, we can only send a request to the same source. What do you mean by origin? Protocol, host, and port (if specified) must be the same. ",
        "28": "In general, I read a lot about data exchange with ajax-fetch api and tried to write in practice. Although there are different usage patterns, they usually lead to the same door. ",
        "29": "Quote of the day:",
        "30": "God helps those who help themselves.",
        "31": "Day 129",
        "32": "Today, React Native was introduced. Components were created in a very simple way and visuals were created. In general, it was a day of trying to understand the concept. I think more progress will be made tomorrow.",
        "33": "Thank you very much for your help in the evening.",
        "34": "Day 130",
        "35": "I was depressed today because of the places I was stuck. Towards the end, I stayed at the computer like an animal whose venom had spread all over its body and was temporarily paralyzed. Instead of looking at the problems I was dealing with or thought I was dealing with from a narrow perspective and thinking intelligently about the solution, I was trying to remove the problem by pressing every key. Because I was frustrated by not being able to solve it. Towards the end, my own thoughts started to eat me up: \"You can't do it, you can't be a software developer or anything, don't force it, give up\". My inner Tyler Durden was insulting me, wanting me to beat myself up, to hurt myself. As I tried to stop the nightmarish thoughts from coming to my mind, I couldn't focus on what I was looking at and trying to understand. It was like the end of the world. It was like a virtual confrontation with myself (whatever a confrontation is).",
        "36": "When I think about it from a broader perspective, sometimes I can have problems. I may not always achieve what I want. When I encounter such a situation, I may feel sad. Because when the baby asks for a breast and the mother doesn't give it, the baby cries. If the mother still does not give it, it cries even more. But it doesn't stop asking for the breast. So I should continue to ask for the breast (what's the point of me asking for it, what kind of logic is that, BuÄra?). For one thing, there is no such thing as crying and turning off the breast. I have to cry, struggle and tear more and get that breast. Sooner or later I will get it."
    },
    "part14": {
        "1": "Day 131",
        "2": "The ambiguities of yesterday's work have been cleared up a little bit today. Yesterday's problem: Suddenly encountering different technologies (many terminal commands, strapi, postman, react native-{component, context, ...other topics}-, trying to use asynchronous function correctly, getting the syntax right for using nested components) and a fatal error with a person who couldn't figure out which one to understand and couldn't explain to himself what was going on.",
        "3": "Let's talk about today. It was incomparably better than yesterday. Because rather than trying to do something about things I don't know, I tried to understand them, to get the concept in my head. Let's go in order:",
        "4": "First of all, I looked at what a context is all over again. In a tree, a prop normally has to pass through every part and knot in the trunk to get from the root to the branch at the end. But having to go through all of this data (prop) can increase the complexity considerably. Context provides us with a global data (state) that can be accessed by consumer components accessing the provider.",
        "5": "Component is basically like a JavaScript function and prop is input. State is similar to prop, but it is private and controlled by component. When the state is updated, re-rendering occurs. Components are like a gift that React has given us. They are the building blocks that enable code reusability. Let's imagine we are writing a button component. On every page where a button is used, we can use the same component instead of writing code for the button over and over again. We can also create different variations of the same component. By using different variations of the same button component, we get a consistent design (Unrelated and overlapping buttons on each page will provide a dirty and inconsistent look. This should not be the unique design of the application that stays in the memory).",
        "6": "Afterwards, with your advice, just like creating the architecture of a website project, readings were made on how the react project should have an architecture, folder directory, design pattern. As with web project architecture, there is no single right or wrong here, and everyone's best practice was their own approach. Two designs in particular were frequently mentioned:",
        "7": "There was a project architecture where components were built with an atomic structure (atom-molecule-organism-template-page). Here atoms were the smallest building block components that could not be broken down into smaller groups. Molecules were a group of atoms that did one thing. It can be thought of as a form field. Organism was a structure made up of molecules that made up the more complex part of the app.  Template, as the name suggests, was the layout, the template of a page (Illustration: The template of an object is the class. The page is the instance of the template). Another common design was the Container/Component concept. The logic was to make components as stateless as possible and see them as \"dump\". Container was acting as both a controller and the page itself. There have been many disadvantages of this issue in the past and now there are optimized solutions for it (applying command pattern from design patterns, developing with the help of hooks, etc.), but since there are different applications and it's late, I think I'll talk about it later. But in the reference sources where atomic design is explained, issues such as the container/component concept is not scalable, it is not clear what it does (is it a page or a statful component acting like a controller) are mentioned and it is said that there is no need to use it. On the gray side, both of them have a lot of users and it would be useful to create a design according to which is most useful for us and which will cause less problems in the future. The options can be not only two but a completely different structure. ",
        "8": "A resource that doesn't go into these detailed nomenclatures and explains React quite well, frankly, caught my attention more:",
        "9": "React project architecture",
        "10": "Honestly, I personally liked the containerization method and I realized that it was similar to what is generally recommended on the web, except that it was closer to the container/component concept. There are a lot of ideas on this topic and my idea is to replicate the web concept here. And I think there is a similar one in the link above.",
        "11": "On a different topic, I understand the reason for the hook's existence a little better. Components increase resusability, but let's imagine that there is a structure used by different components. Here we can create a custom hook ourselves.",
        "12": "SRP translated to react native:",
        "13": "\"A component or a hook must do one thing, do it well, and do it only.\"",
        "14": "Again referring to the link above, I take the following sentence directly:",
        "15": "\"You should create a separate context structure for each module that cannot communicate directly with each other but are dependent on each other in terms of content. In addition, the context updates each component it is connected to on any state update it holds. The components that listen to the context must already need that context. If you find any state you call unnecessary, either that state has no use for the context or you have built the context incorrectly. \"",
        "16": "An article about the differences between using redux and context api",
        "17": " made me understand the subject better.",
        "18": "I have a better understanding of reducer, provider, context, state, useState and useReducer, dispatch, action. Although I don't know the difference between useReducer and useState yet, react's documentation recommends me to use useReducer instead of useState if I use multiple states in the same context. I will try to understand better.",
        "19": "I think I will look at the data retrieval from API, context usage, re-rendering again tomorrow morning. Seeing ",
        "20": "the comment of one of the authors of both redux and react",
        "21": ", I had the feeling of reading Alan Key's thoughts while studying OOP.",
        "22": "I feel like the smoke screen has been lifted a little bit. Of course, there will be many, many more things to learn, mistakes to make, developments to be happy about. All I know is that there has been progress compared to yesterday.",
        "23": "Day 132",
        "24": "At the beginning of the day, I read about the general concept again. As you said, no matter how much I try to acquire theoretical knowledge, it doesn't make much sense unless I put it into practice. There is a lot of confusion. It is of course useful to read other people's problems and the solutions developed, but it may not be easy to understand that problem without having a problem myself (it can be thought of as empathizing: \"hmm yes, I have faced this problem too, and the solutions were/are like this\"). ",
        "25": "Then, as you said, I clicked on an image and it took me to a page about it, but it took a while. The reasons why it took a long time: I didn't know how to use navigation at all. I downloaded that library, read the documentation as much as I could, tried to solve my own problem using similar code structures. One of the problems that took me a while: since scrollView loads all the resources on the page directly, I avoided using it and adopted Flatlist (since it does lazy initialization on the web by default). But I couldn't create the scroll due to a problem I can't figure out where it originated from. I'll look at it again. Then I was encountering an error in parameter passing during navigation. I encountered such a problem because I didn't know object destructuring well and I used copy-paste code incorrectly. I fixed it with your help and now the code seems to be working normally. But the components don't use any state (it is used only in the navigation related part, but it is a property of the library's own object). Since the state is not kept, naturally there is no need for a context. After doing the basic operations, I think I can also make improvements. Especially JavaScript can be mastered more and debug capabilities can be more. It will be done.",
        "26": "Day 133",
        "27": "I thought I would take what I learned today, most of the things I thought I would do. But because there were so many interconnected components, the code got complicated. Of course, it was possible to get out of it, but the structure was like a shanty. Then I saw an example from a site where photos were taken and displayed through an api forever as you scroll the page. I just tried to understand it. Everything was exactly the same with the same folder structures, the same dependencies. I tried to understand it because I thought it was written with both context, pulling data from api, lots of callbacks, and a nice logic that looks simple. Honestly, I understood what was done in that code in general, but there were some parts that were not understood. Tomorrow morning, I will look at the parts that are not understood in that example (especially useCallback and useEffect are not fully understood, I will understand it). In React Native, I used to think that it is only a fronend because there is only the Css JavaScript side, but as far as I understand, it also includes the controller part. As far as I understand, navigation, data transmission (state management), style are the most general areas that are dealt with. In general terms, when I think about it, I think what's wrong with it, but things may not be that much. I should not succumb to my ego and continue to look at the work with the childish curiosity and passion that comes with being a beginner. I will (Of course, words do not make the ship of cheese, I try to do my best in practice).",
        "28": "Day 134",
        "29": "The meaning and significance of the day for me is that I wrote",
        "30": " an answer ",
        "31": "to a question on Stack Overflow for the first time. It was actually one of those simple questions that was asked in many places but not answered properly (although the answer was given on Github around 2015-16, that was also added). Of course, it may not be right to write about something I have never mastered and just started, but I wanted to write because I thought I understood the cause of the problem encountered. If it is wrong, I will delete or update it, of course, I think there is nothing to be ashamed of.",
        "32": "Apart from that, thank you for the information you gave about rendering. I fully understood the use of useEffect after you explained it.",
        "33": "If you ask what I did differently, I typed \"react native examples\" into Google, and I either took the small examples I came across directly as copy paste and interpreted them or tried to write them myself. That's all for today. ",
        "34": "Day 135",
        "35": "Although I've been looking at React for a week, I came across the structure you used today for the first time. As far as I understand, in order to pass some properties to the children of a component, it is necessary to 'bestow' that property to each child one by one. It doesn't look like a very nice structure, but it provides the solution. It's a different perspective. I don't think that what we do is magic, but sometimes it feels magical. I don't think this is wrong. Apart from that, it is fun to create and use components, but it can be difficult for me to establish relationships between them, to use asynchronous structures (when it happens). I will be happy if it becomes more difficult because we have just started.",
        "36": "Day 136",
        "37": "I got stuck somewhere today, and towards the end of the day I found what I needed to do to get the desired solution:",
        "38": "These two were different. I was using the bottom library, and there were two differences between the two in general: The first library was much more customizable. The second one was not so open to customization, but it was faster than the first one in terms of performance. In the first one, the navigation pattern in the given task was provided directly (it worked in the example I tried). In the second one, it overwrites every new state in the navigation state. That's why I could never reach the screens in between. All day long I was looking for a way to fix this. I tried all sorts of things but I couldn't find it. Honestly, I wondered if the dispatch method in the bottom tab library could do the desired thing, I tried, but I couldn't reach the result. Tomorrow morning I will continue where I left off and try to solve that problem.",
        "39": "Day 137",
        "40": "This morning I watched what you did carefully because I acted with the motto \"let your eye be a thief, not your hand\" that my father learned from cooking and often told me. Afterwards, when I tried to do the drawer navigation, I encountered an error with a library due to a version error. When I Googled the problem, I found different solution methods. I was able to reach a solution by making changes in some codes in the files and removing the relevant library and adding a different version. Although my hand trembled at first with the thought that I would break it even more, then I reached the solution with the motto \"those who are afraid have no children\" and with caution. Then there was the problem of converting pages into file and folder structure. When I did research on this topic on the web, it was generally advised to establish a file-folder organization by classifying by feature (group by feature, or group by archetype) rather than by archetype. Although I thought of the same principle on the mobile side, since I saw the screen-component structure most frequently in the examples, it was a solution that converged to ten situations. I will continue with the last task tomorrow from where I left off.",
        "41": "Day 138",
        "42": "I struggled with something today and it took me a long time to solve it. The problem was due to my inability to use an asynchronous function. I knew the source of the problem. I was trying to use the response of a function that runs asynchronously in a synchronous reducer function and receives a response from the server in a synchronous structure. You explained it to me well and corrected my incorrect code on the same topic before. The reason why I had difficulty in reaching the solution today was because I didn't think my way to the solution thoroughly and systematically. I was too busy thinking about how to make the reducer asynchronous or how to use an asynchronous function in the reducer, whereas if I had given the dispatch function that triggers the reducer as a callback to the asynchronous function I was using, the problem would have been fixed. Even though it was too late, I was able to find this solution and I was very happy when I did. Although it is still difficult to use asynchronous structure, I can find a solution with the help of you.",
        "43": "As a result, depending on the user input, the login state can be accessed and changed globally from all pages. I can log out the user tomorrow. When the user logs in and out, I can make a change in the display of components or pages according to the state. I think it looks like I will solve this very well.",
        "44": "Day 139",
        "45": "Today I made some improvements in the code I wrote. First of all, I put the part about server communication in a separate class. In this way, I could provide my needs for api communication directly from there. I had put a function component at first, but I could create an object and call http methods with functions such as post, get that can be added to the object. So I returned the function component to the class. I thought it would be useful.",
        "46": "I also did the creation of the user token on the front end side, but then I completed it on the server side. First I took the unique id obtained from the user's phone. Then I used one of the examples in",
        "47": " the following answer ",
        "48": "that I came across while researching how to create a unique id. Although I wonder how the algorithm works, I plan to look at it tomorrow after work. Because I have not yet understood how a unique id can be created with a string expression with a finite number of lengths. In summary, I created a token by combining the unique id received on the user's phone and a unique value I created. Then, when the user contacts the server, he can prove his existence by sending this token in the header. Even if the user deletes the application, since the unique id from his phone can remain with us, his information can be reused and remembered.",
        "49": "Then last week, while reading and researching, I came across this issue in practice: when I had an object in state and I changed the value of an element in the object, the change was not detected. Therefore, there was no re-rendering. I found the solution as you said, and the way I understand it now is that we are not updating the object. We are creating a new object.",
        "50": "Even though I thought you might ask me if I was still looking at it afterwards, I still looked at call-by-value-reference a little bit. This time I found something different. I learned that object is neither pass-by-value nor pass-by-reference. Obviously, although php, javascript and many modern languages use pass by value by default, ",
        "51": " was an evaluation strategy for object.",
        "52": "As I understand it, objects are neither cloned nor copied. Objects are shared. Yes, sharing is mentioned. Let's go with an example (taken from ",
        "53": "the first answer",
        "54": "):",
        "55": "The only thing we know is that by default everything is pass-by-value. The variable \"num\" is unchanged because it is passed by copying (taking its value). It is no longer the one being processed inside the function. Let's read the pass-by of object obj1 as described in wikipedia. obj1 is a box. I can change the contents of the box. But the box is still the same box. Everything I read, see and know is just the box itself. If it contains shoes today, cables or broken electronic devices tomorrow, it is none of my business. So I can change the contents of the box. Someone else can also change the contents of the box. So the box is actually something that is shared. So in the simplest sense, thinking in the old way, everything looks like pass by reference (call by sharing, alias, etc.). But it is not. Let's come to why it is not:  if it was pass by reference, obj2 should have changed. But there was no change. Why is that? We shared the box with the function. Here you can do whatever you want with this box. And what did it do? It didn't use the box we gave it at all. Instead it created a different object and told the variable that referenced our box, \"Now you reference this new object, leave the box that came to us\". So there was no change in obj2. Honestly, I like this box example. Although the subject is understood, sometimes there can be confusion. It makes it a little better understood and exemplified.",
        "56": "I still can't say that I know exactly how JavaScript works. But I will try to understand and learn it better whenever possible. I know that everything is an object or behaves like an object. Considering the above example, why didn't 10 change? 10 was a box. When we multiplied it by ten (assignment), the value we equalized was not itself. It was a different box. It was 100. Maybe this idea of mine is not correct at all (in JavaScript, which also treats primitive values as objects). I could just say pass-by-value, but it's fun and satisfying to think about it and try to find different perspectives.",
        "57": "Apart from that, towards the end of the day, I looked at the problems in the mobile site, the differences that I could say would be nice. I also looked at the applications of different e-commerce sites. I looked at their navigation, routing, design. I think there is a lot to do. I think this is great. I think I can contribute a lot.",
        "58": "Day 140",
        "59": "Today only the errors and problematic places in the mobile application were examined. In fact, the mobile application was examined completely.  Places that repeat each other and that are thought to look aesthetically ugly were also added to the report. The parts that put the application directly into fatal error were also mentioned. I think there is a lot to do. I can find many things I can do for myself, like the saying \"turn a crisis into an opportunity.\" I hope I will. The work I do doesn't feel like an obligation. If it did, I probably wouldn't be doing it. Not only the work itself, but also the environment in which the work is done is very effective. Fortunately, the environment is a precious environment that encourages me, not hinders me. There are so many things to do, so many things to learn about the subjects we work on... I think that if I can become a good software developer, software will not be the only thing I will do (you can also live on a boat and fish at the age of 45, of course, ideas like \"I will be a CEO, I will own a company, I will go down in history like Newton, Einstein, Galileo, I will save the world (from what?)\" should not come to mind directly). But I think being a software developer will be a great contribution to me.",
        "60": "By the way, I wanted to mention that the \"diary\" folders on one drive consisted of the reports I sent you.  There was even a folder called \"xxx\" which contained the JavaScript files (clickbait file names sound good for some reason :)). Again, it was a more than technical report. But since I tried to be a bit more technical in the pdf I sent today, I don't think this will be a problem."
    },
    "part15": {
        "1": "Day 141",
        "2": "First of all, I apologize if I have done anything wrong against my master today. If I seem to know too much about some things, it is my own ignorance. I realize that I know very little. It's just that I sometimes make the mistake of speaking with certainty.",
        "3": "Today, since there was no task at the beginning, I looked at two react-native related topics: how to check the internet connection and how to hide the keyboard when you click somewhere different. Then, when I couldn't think of anything, I read an article I saw yesterday (it was about software design and programming in general). But I didn't finish it. I hope to summarize it here when I finish it. Then you provided the source code of the mobile application. I tried to grasp the subject you wrote about, how the application works on the backend, the connections and relationships. I think I understood something superficially. I must say that I was impressed when I saw the ternary operators and clean code.",
        "4": "I looked at 3 of the problems (some of them according to me) that I found from the abundance today. Two of them (1-exiting the application when I click on the status in my ads, 2-overlapping the input value with a red colored warning in the input section) were completed. I didn't tell you about the second one, frankly. In case you might say \"there is no need to do this\". When all payment methods are pressed in the payment methods, the details of all of them appear. A state is given about opening when each one is pressed. But parent elements can be given this state (useState is used, of course it can be in useContext. But since the affected elements are siblings, useState may be more logical), the action of one can affect the others thanks to the common state.",
        "5": "That's how it was today.",
        "6": "From the level in this video",
        "7": ", it was another day of working with the hope of getting to",
        "8": " the level of the eagles ",
        "9": "described by the software developer here (Lemi Orhan Ergin).",
        "10": "Day 142",
        "11": "Today I found a problem with the display of search results, which you fixed (at least I understood how the problem was solved). Then I looked at the registration page and there was something missing. The views needed corrections. I got something similar to what I wanted, but it's not finished yet. Obviously it didn't work as you said. So I will look again tomorrow morning.",
        "12": "Day 143",
        "13": "Today I initially tried to fix the problematic part of the form process that I couldn't fix yesterday, but I still couldn't do it. Then, when I was on the category page, if I wanted to go to a different category page, the page would not update. Naturally, the navigation did not provide navigation by saying that it did not go to a different page. The last created solution was provided with the navigation library. It was pushing the new page to the navigation stack with the parameter we gave. Our previous solution was causing new problems, but I thought it was very good. I couldn't find out where the problem was coming from, but I was walking around near it, which I can't say anything because I had to solve the problem. As I encounter new problems, I will try to be more efficient and come up with appropriate solutions.",
        "14": "Day 144",
        "15": "Today I tried to fix the errors on the help ticket detail page, and to be honest, by the end of the day it was fixed. But I didn't do it alone, it was a quicker fix. But it took a lot more time than I expected. ",
        "16": "Apart from that, I saw a question on Stack Overflow while I was working with JavaScript and I answered it, but it was quite simple (it was about very basic array operations). I think it is very nice to contribute to the channels and people that help me learn.",
        "17": "\"You have an egg, I have an egg. I gave you my egg, you gave me your egg. You have an egg, I have an egg. But you have knowledge, I have knowledge. I gave you my knowledge, you gave me your knowledge. I have two knowledge, you have two knowledge.\"",
        "18": "as in these story, when I share knowledge, I don't lose knowledge, on the contrary, I gain access to more knowledge. ",
        "19": "Day 145",
        "20": "There was a simple problem today. I noticed it, then it was understood that there was no response from the api and the problem was fixed by the backend. The fixed problems were delivered to you this week. In general, I tried to learn things I didn't know about react in my free time.",
        "21": "Day 146",
        "22": "Today I couldn't do an activity where I could improve myself a lot. I looked at react navigation again, a problem with basic JavaScript, our mobile application, I took a look at it. 7-8 places were fixed in 5 days, but you did most of it again. ",
        "23": "What's been happening for 5 days now is that my interest and enjoyment of things I've always enjoyed doing has waned, I can't focus on the things I need to do, a constant feeling of inadequacy, that sort of thing. At first I thought it was just me, but now I don't think so. At first I was suggesting to myself that it was because I was working on new things, but that was not the answer. Almost everything I've done so far has been brand new and challenging for me. I think I am like a fish. You are very unlikely to hold a fish in the sea with your hand. Because the fish slips out of your hand. If you grasp it tighter you think you can hold it, but it still slips. A fish can simply stay in an aquarium, in the sea or in the ocean. It just needs to have its basic needs (water, food, oxygen). It fulfills its basic task: To be food for humans, to occupy a certain place in the ecosystem and play a role in the balance of nature, to swim.  Finally, 335 years ago, Newton stated this in his \"Mathematical Principles of Natural Philosophy\": Action-Response.",
        "24": "Day 147",
        "25": "Today was good. I was able to focus quite well on what I was doing and I was able to be productive. What did I do? When I was logging in, there was a warning in the Android app. And the warning was saying that this could cause a memory leak and that I should use the use effect properly. That's halfway there for now.",
        "26": "Then, until 5:30 p.m., I researched what Single sign-on is. First, I started with what was written on the sites of the most well-known technology companies, then I got more and more specific and scanned many sources I came across. Let's summarize. The whole topic was about \"accessing multiple applications with a single session\". SSO has its advantages and disadvantages, of course, but the advantages outweighed the disadvantages in my personal opinion. There are multiple protocols that can be used for SSO and these were also learned. How it works was also read and noted. I think I understood in general terms. I learned the differences between protocols for example. I refreshed the difference between authenticaton and authorization from my point of view. I researched the libraries used. There were many different options for PHP and node.js. There were different services (Authelia, Apereo/cas, Keycloak) and there was a library for Java that was mentioned a lot but I didn't include it in the report.",
        "27": "A good term to come across towards the close of the day: \"rational ignorance\". It was a term about the idea that unnecessary information does not take place in the memory, which you often repeat. The definition is as beautiful as the term itself and full enough to practice English in terms of content:",
        "28": "âRational ignorance is refraining from acquiring knowledge when the supposed cost of educating oneself on an issue exceeds the expected potential benefit that the knowledge would provide.â",
        "29": "Day 148",
        "30": "Today I looked at what MVC is in general. I looked at how it was created, but it was difficult to do it on my own. Because I still didn't understand where the needs came from and what I needed to do to solve which problems.",
        "31": "With your help I have seen what it is like to design the basics of an architecture from scratch (at least the initial basic phases). I will write a more detailed report when I have a better understanding of the subject.",
        "32": "Day 149",
        "33": "Honestly, I was sad that I didn't write code today, but while you were writing, I think I understood why almost every piece of code was written. Even though the last few parts were a bit confusing, I think I can understand it when I look at it again. Today, I witnessed how a software architecture is created in accordance with MVC and tried to comprehend each part in the best way. In my spare time, I looked at the code and documentation of Laravel or Symphony.",
        "34": "I believe that I will be able to learn this structure very well, even to the point where I will be able to replicate it at a simple level in the near future. This belief was one of my biggest achievements today.",
        "35": "Day 150",
        "36": "Today, I first looked at the code we wrote yesterday. I tried to understand what I didn't understand. In general, I think I understand what works for what. I don't think I have a problem in that respect.",
        "37": "Then I looked up what caching is. You had already explained it briefly, and I only knew a little bit about what web caching does. But today I saw a different cache. There is also a cache usage between CPU and main memory. While I was looking at that topic, I got a bit off axis and got into different topics. Then I went back to MVC again. I looked at our own code and Laravel's documentation again.",
        "38": "If you ask me how much I have progressed in 6 months, I think I have progressed enough to think that I can understand you better. Until recently, I had extreme difficulty even reading a code that you created briefly. I think I have at least understood the grammar and style of the foreign language you speak. I try to repeat the words you say, understand their meanings and try to make sentences myself. I will try. I will succeed. I don't know if I can be John Von Neumann, Harold Finch, Spiderman, The Chosen One, but at least I will try to be myself and do beautiful and clever things.",
        "39": "I had a wild idea today: If data or information can be transmitted and exist without the need for matter (which has volume and mass), could it be stored without matter? Could it exist on its own? Maybe it's impossible, but thinking, having new ideas and dreams, even if unsuccessful, really makes you peaceful in general."
    },
    "part16": {
        "1": "Day 151",
        "2": "Today I experienced my greatest joy about programming within myself: I saw and you showed me that the code can be self-aware. I feel like there is so much to do and so much to learn, that it gives me so much pleasure just thinking about it.",
        "3": "Apart from that, today I looked at the Laravel documentation in general. I saw how cross site request forguery can be blocked and its place in mvc. When I came across Blade template engine while looking at the View section, I remembered ofEngine (a template engine) and paid more attention. I couldn't examine it very carefully because the code about Blade in Laravel was a bit too complicated, but I think I understand what the template engine does and how it works at the most basic level.",
        "4": "In addition, the pleasure of being able to read language-independent code is something else. Of course, I'm not very good, but it can be self-satisfying to see that I'm not ignorant in my own way.",
        "5": "Day 152",
        "6": "I can't say that I learned anything new today that opened my horizons a lot. Mentally it was pretty quiet. I looked at Blade's syntax again. I had read that there is template inheritance, but today I was able to see what it is in practice. I came across alternatives to Blade, Laravel, MVC quite often while researching the subject. Part of me says you shouldn't reinvent the wheel, the other part of me says you should do it to learn the logic of the business, to prove yourself. But the truth is this: let's think of any existing MVC framework as a tank. If I need a tank, I can use it directly. But if I need an airplane or a Ferrari, I should use them, if not, I should create them.",
        "7": "I also had the self-awareness program in the back of my mind all day long. I am glad you showed it to me. I will probably work on it tomorrow. The topics I am curious about and the things I want to do (as a side project or as something I need to add to myself) have become quite a lot. I need to finish the Algorithms book, I need to assimilate it, I need to finish it. I want to spend time thinking about what a self-aware program can do, how a project could be developed on it. Since I have never mastered what happens at the junction of software and hardware, I want to learn that part clearly. I have also heard a lot about David Malan's CS50 course, but I have never started it. I want to spend time on that too. Beyond that, I need to reinforce, learn, keep fresh my own topics (web, even mobile specific) to do my best in my own work. There is so much to do. So I am happy.",
        "8": "Day 153",
        "9": "Today was like a tribute to the masters. First of all, my respect for Martin Fowler grew even more because whatever topic I looked at in software architecture, his writings were always the foundation. Even though I thought I had found something new today (accessing my credit card from my phone with NFC), I learned that it had already been worked on, and I was impressed that you had done it years and years ago.",
        "10": "The subject I was working on today was ORM. Two architectures were used in ORM. Active record and data mapper architectures. I should not forget that ORM actually consists of two parts. \"data abstraction layer\" where SQL queries are abstracted and \"data access layer\" which consists of active record or data mapper.  Both have their advantages and disadvantages, but I learned that which one to use depends on the situation. I actually likened it to a topic. Which is the weakest piece in chess? There are actually two options: ",
        "11": "The king who always has to run away,",
        "12": "I think the answer is that it is not any stone that is weak, but the position of the stone.",
        "13": "In our case, questions like which architecture is good, which is the best ORM library, which is the best ORM technique are very similar to the second option in the example. It depends.",
        "14": "When I came home, I was browsing google services and I came across google finance. It was just like any other finance application, even more inadequate. Again, maybe thousands or hundreds of thousands of people have thought about this, but here's what came to my mind: There are a lot of charts on currencies, on valuable papers in the stock market. The predictability of these charts is actually quite low. If it were high, everybody would be rich (and it's impossible for everybody to be rich). I thought if there was a program that could predict the volatility in the value of an asset, if there was a smart bot that could play the stock market accordingly. But for this bot to be smart, it would need to have the mindset of a person who wins at the stock market (the heuristics it often uses). I think it would have to have the ability to follow and analyze the news, or read and predict what the charts mean, if they mean anything. Could our intelligent bot even manipulate? After all, the whole economic system, even human relationships, are based on trust and faith. It seemed like an intelligent bot could do what a human could do. I think I will think about it again.",
        "15": "Day 154",
        "16": "Today I used an ORM tool (TypeORM) in node.js to connect to the database and make queries. I personally felt that using ORM actually makes things much easier once you get used to it. If I was doing a more individual or small-scale application, I wouldn't immediately look for an ORM library with the prejudice that I should use ORM. I would either use an ORM library or a query builder that would work for me. But I think it is necessary for a large-scale application. One of the reasons why I think so is that ORM is based on separation of concerns, just like the reason for the existence of MVC. In the current project, I can fulfill my needs by writing SQL queries, but in the future, when dozens of developers are working on the project, the abstraction and single job ownership principle of ORM will make it easier for them and the project manager (whoever is involved). The only problem with ORM as I understand it is that it can cause performance issues as the project develops. Most popular ORMs have stated that they have developed their own solutions for this. But I am not very familiar with this issue yet. ",
        "17": "Day 155",
        "18": "Today I took a look at TypeORM again and then looked at the syntax of Sequlize and how it is used. I found that they are very similar, but of course there are many differences. For example, in one the main character is Typescript while in the other it is Javascript. Or one has Active Record and Data Mapper Pattern options while the other only has Active record. The use cases involving relationships between objects (data models-database tables) were very similar.",
        "19": "Then I looked at how to write queries using keywords in sql such as group by, having, subquery, join in TypeORM and tried to adapt it to my own situation. It took a little long because I was a beginner. I think if I practice a little bit, it will fit quite well because it doesn't seem to be a problem to understand the logic.",
        "20": "That's all for today.",
        "21": "Day 156",
        "22": "The most important gains of the day were understanding topics in SQL that I didn't know, or that I didn't understand even though I looked them up.",
        "23": "At first I was going to continue with TypeORM. Even though the project I created yesterday worked fine, I gave up on TypeORM because of the typescript itself, the fact that the concepts were getting more and more complex and I was too dependent on the documentation (actually this was not a problem, the problem was that it was not easy to find what I was looking for in the documentation), the fact that ORM itself gives a lot of options, but after a while the use of these options could get a bit more complicated (probably due to my inexperience). Because ORM did not make my work easier, it took a lot of my time like learning a new bird.",
        "24": "I started using Sequalize right away. It was much simpler to use and didn't have a complicated syntax (at least from what I've seen and used). Especially the fact that it was Javascript, that the help messages were very detailed and allowed to speed up the process, and that the functions and options it provided were very useful. I used that ORM today.",
        "25": "Day 157",
        "26": "I think I can fulfill the given task. When I looked at the web-socket concept in detail for the first time, I had a hard time understanding it at first. Obviously, if I take a cursory look and copy paste, of course something can be done, but I'm trying to digest it thoroughly. I guess that's why I'm a little slow. But I think I'm doing well anyway.",
        "27": "It took me a while to get used to the concept of sockets, since I was so used to a stateless protocol (HTTP) and everything was based on that logic. It's still not quite there yet, but by the end of the day, at least I understood a little bit how it works.",
        "28": "Day 158",
        "29": "It was the quietest day of the week mentally. It was not the most empty day. On the contrary, I felt that I learned more than yesterday, through my own efforts and your leverage of course.  I am aware that it is not a report full of information and I feel uncomfortable with that. But I will still send this content-less report and I can embellish it by noting the notes taken. This is not a bad thing if those embellishments add something to it. Nevertheless, this is the report for today. I don't think it will be repeated. With respect and love.",
        "30": "Day 159",
        "31": "Tomorrow I will try to put the ideas into practice without being afraid and hesitant to make mistakes. Today, when I came across many examples, applications, concepts, I inevitably had the idea of learning and applying the \"rightest, best\". Of course, I think I can run a sample application on the computer, but I think what I am looking for is the perfect thing. And what I am trying to do is the perfect thing. I expect a lot more than my own level, and because of this expectation, I postpone a little bit what I should do, starting from the most basic logic in solving the problem and growing the idea. I think I want to look at other people's grown ideas and grow my own ideas in the same way or get inspired. Or I'm afraid of doing it wrong and that's why I don't do it right. But being afraid of doing wrong is a wrong thought from the beginning. I should continue without getting into these thoughts. Your finance example reminded me of the art of meeting unlimited needs with limited resources. It was a really good definition.",
        "32": "Day 160",
        "33": "What I struggled with today was that I still haven't mastered node.js and the libraries I use, and even the technology I use. Yes, I can simply redirect a user who sends a request to a server to a different server, and I can send a few necessary parameters while doing that redirection. But when I send these parameters to the authorization-verification server and redirect the user to communicate with that server, I can't hide these parameters yet. And that was my main sticking point today. Of course, it can be overcome very easily, but I haven't found a solution to this problem yet. Maybe it's not a problem for now.",
        "34": "Tomorrow I will try to build a single sign on structure that works in the most primitive way without worrying too much about such issues. Of course, it will require a lot of improvements, but I think I can do them later. The biggest responsibility I see for myself tomorrow is to build that primitive sso structure.",
        "35": "Regardless of what's going on at work, today I wanted to write down a line from the finale of Person of Interest: ",
        "36": "âEveryone dies alone. But if you mean something to someoneâif you help someone, or love someone, if even a single person remembers youâthen maybe you never really die at all.â",
        "37": "Listening to what we talked about yesterday and what was said today in the series finale about being \"good\", I felt a sense of peace. Before I started the job, and even for a few years, I thought I was quite nihilistic and rational in my thinking in general. I still am, of course. It was as if I had lost my ability to dream at the age of 18 and before. In this 6.5 month period, yes, I learned a lot about software, as much as you can learn. But the thing I learned the most was to dream again. Of course, you cannot follow those dreams with inaction and apoliticism. Although I don't have any gripping dreams yet, but it is very nice to feel that I can dream again in a satisfying way. Thank you very much for that. Unfortunately, I can't contribute more than thanking you right now. I still feel like a parasite, but hopefully this situation will become desirable. I still don't listen to the machine when I talk to it, and I try to apply what I know and what I see to it and ask it to give me the results I want. This is very wrong, but I am trying to fix it."
    },
    "part17": {
        "1": "Day 161",
        "2": "I've learned more about the steps I need to follow in single sign on. Although I haven't thought about every part in detail, I'm trying to follow and code a scheme on how a simple authorization and verification should be done. The problem I had today I couldn't solve at the end of the day. When a server sends a request to another server with the post method and wants to get the response (using axios), it can get the response without any problem when receiving normal and ordinary variables, but it cannot get the session information. However, session information can be accessed from everywhere else on that server. Even when retrieving data from that server with the get method, the session data is simply accessed. Tomorrow morning I will refocus and try to find the main source of the problem and solve it, or alternatively I will solve it with the get method. In addition, I transferred the transitions from the redirect method provided by express to a different url on the client side in the normal way. Everywhere I use it. Despite that, it continues.",
        "3": "Day 162",
        "4": "I fixed the problem I encountered yesterday in a hackish way with your statement. But then I encountered the same problem again and I tried to understand exactly what the problem was caused by. I could add data to the session when I was processing a post request from the same domain address. There was no problem with the get request from the same domain address. But even though I could perform operations with a get or post request from a different domain, I could not save data to the session. I thought that if it allows me to perform operations, it allows CORS. But if I cannot add data to the session, I thought that I could not get the result I wanted because it is a precaution against CSRF. So I will look at it tomorrow morning.",
        "5": "Where am I?",
        "6": "If(user is not authenticated) Domain A-> Domain B; //This part has not been coded yet.",
        "7": "//Domain B first receives and verifies the login information from the user by using the parameters from Domain A. If it is correct, it sends an authorization code to Domain A. Domain A sends back the auth code with client id, client secret information in return. Here Domain B creates the necessary tokens. Why didn't it send the necessary tokens (id token, access token, refresh token etc.) directly? Because if there is a part to authorize depending on the user's permission, it is ensured that the user knows the scopes that the site wants. This does not need to be in the current system, but I added it this way because there are examples I have seen (can be deleted or improved). Then, Domain A uses the id token to see the user information (the id token is sent if Domain A has specified it in the scope for authorization (as used in openid)). The access token is only used to access the areas where authorization is available (For example, when we want to get data from different source servers, we can see what our authorizations are when we want to access those resources. Originally, Domain A should not be able to read and understand the access token. To ensure this, instead of using a symmetric algorithm like hs256, an asymmetric algorithm like rs256 can be preferred. Actually, it may not, it is a matter of preference as far as I understand). Today I finally created the tokens as JWT tokens and they can be read both in Domain A and Domain B with client secret. The problem is that when I send the tokens from Domain B to Domain A via post, I cannot write to the session. As I guessed it is a CSRF related issue, so I did some reading on this topic this evening.",
        "8": "With the middleware here",
        "9": "I don't know if I will be able to solve the problem, but I will look at this situation first tomorrow.",
        "10": "In this article",
        "11": ", I will try to pay attention to the recommendations and warnings that need to be taken into account. At least, it seemed necessary to keep them in mind.",
        "12": "What I have to do next: The problem in this case is that I always wanted to prefer the session. Actually I need to keep some information in the cookie (like whether the user is logged in or not) because when the user closes the browser the session is completely deleted. I understand that it is possible to prevent this by changing a parameter, but I can't remember it clearly at the moment. If necessary, I can also save the relevant data in the cookie or change the session settings.",
        "13": "In general, what I need to do afterwards: When the user enters a different domain address (on the domain I am interested in, on the domain I own), first the cookie or session is checked. If there is no required user information, it asks Domain B, that is, the auth server, if the user is logged in. If not, it continues its operations from where it left off. It does not disturb the user. (If the user logged in to a different domain, the auth server would have the user information in the session or cookie. Therefore, the current site would also be logged in and the necessary information would be given to this domain address).",
        "14": "In short, I still have some work to do on SSO. But I can say that I have a better command of the problems and what I need to do. I just think that I should use the tools I use more efficiently in the areas where I get stuck.",
        "15": "Day 163",
        "16": "I couldn't complete the fiction I was working on today. Either there is a problem with my fiction or I can't overcome the technical problems, even though I try the possible solutions in every source I see. I think I can't get the result I want because there is a mistake in my fiction. I will try again. Honestly, even if I feel sad or cry when I can't do what I want, I will continue to try, learn, and learn lessons.",
        "17": "Day 164",
        "18": "I didn't get where I wanted this week, but that doesn't mean I'm going to fail in my mission. I'm going to do it, and that's why I'm going to work on it tomorrow, because I want to do it. I wrote the code that you showed me, and it's working fine. Tomorrow I would like to write my own setup on top of it in a nice way and add it like a piece of a puzzle. 95$ is paid, but I really don't know how to pay you right now. Before I started working at the company, I was talking to a friend of mine who was also interested in PHP, wordpress, etc., even when it came to OOP, MVC, etc., he used to talk about it as if it was extremely difficult things (mystical and divine things that are the result of decisions made by Greek gods), but he hardly knew it himself. Talking to him today, I realize the difference between a person who was a bit more interested in the subject than me back then and the person I am now. I'm always beating myself up, thinking that I don't know anything, no matter how many things I'm dealing with. But when I talk to someone who is not related to the subject or someone who is, I feel the difference very well. I just have a hard time talking to you. I'm glad I have a hard time. I saw a post on LinkedIn last night. Your GPA, experience, etc. (of course they are necessary for some criteria) are forgotten, but your connection with people, your relationship, your approach remains and is remembered. I think I will try to pay better attention to this not only in business life but also in life itself. I want to improve my appreciation of people, listening, understanding, loving, compassion and humility. I can do this \"idly\" because I feel a degree of comfort because of my connection with you.",
        "19": "Day 165",
        "20": "Moving forward. The user was able to log in normally using the SSO server. From SSO only the necessary user information is given to the relevant client server(s). Only once idToken is created and clientSecret is shared in communication with the SSO server. Other than that, any user information that may be a security threat is not shared directly between the servers. Security issues can be fixed later. I have a bigger problem. It is a problem in the working mechanism of SSO, but I will solve it. When you log in from a different site, that site is redirected to SSO and SSO checks if that user has logged in yet. I always thought that I would keep the idtoken in the SSO's cookie and do the first check from there. Because if the SSO's cookie does not have idToken or any similar identifying data, how would I know that the user is logged in? It could be by keeping this login information in the database used by the SSO. I found it reasonable to keep it in both the SSO cookie and the database. I thought it would be healthier to keep the information about whether the user is logged in or not in their browser, but I could also keep this information in the database to compare against malicious intentions that could manipulate this. Maybe I am thinking in a complicated and wrong way. It can also be done by only looking at the IP address. Or it can be done just by looking at the cookie or the information in the database. The biggest problem now is to control the session from different client servers and save the cookies of those servers on the client side accordingly. The sweetest part of today was that I saved the client secret always changing. The client secret changes with each new login and it is also useful for security (The only way to unlock the id token is to know it. I think it's a nice little detail since all sites have one idtoken and one client secret).",
        "21": "At the beginning of today, I systematically reflected my thoughts in the code, but then it was like a pig's knot.",
        "22": "What am I going to do tomorrow?",
        "23": "I wonder how accurate it is to keep idToken in the SSO's cookie. A site that has never added idToken in its cookie goes to the SSO to see if it has been logged in. The SSO checks if there is an idToken in its cookie and checks the idToken from the database or any other place where data is kept continuously and then supplies the idToken and client secret to that server. The most important thing is to provide a good protection against forgery (checking if it comes from allowed domains). There are no other problematic aspects.",
        "24": "In short, tomorrow I plan to complete the actual SSO part in rough. If I succeed, I will get into the fine workmanship.",
        "25": "Day 166",
        "26": "When a user who logged out of a site wants to log in again, I want to get his password and verify it and log in again if he confirms that he is that person after saying \"hi GayeSu, is this you?\" just like Google. Also, if he is not the person who logged in before, I want to give the standard form with the normal username and password. I was halfway through trying to do that. Finally, I'm thinking of adding the ability to log out of all sites. In such a case, I will need to add a middleware to the servers using that sso, to check and see if it has logged out from all of them.",
        "27": "Tomorrow I will continue from where I left off. I'm going more systematically. The code is evolving and changing more than growing in these few days. If not tomorrow, I think SSO will be revealed in general terms the next day. It was the first time I worked so much with Node.js, I'm glad I did.",
        "28": "I learned a different information today, unrelated to the subject. \"res.sendfile()\" is used to send a stream of data when providing a file to the browser. What does this mean? Normally, I first use \"fs.readfile()\" to consume server memory, but this way I can deliver the file to the browser in small data packets, which is much healthier in terms of performance. Save the data in memory. Send it to the browser. Garbage collector does the cleaning process, in a way.",
        "29": "Day 167",
        "30": "I have tried all the possibilities I could think of in the first part of the task about SSO, only the vulnerabilities are definitely there. If there is a different big mistake and I haven't noticed it, I think I can fix it without much difficulty in terms of logical functioning. In SSO, all user login processes are based on the SSO server. The most important issue for the client websites that this server serves is the idToken they keep in their cookies. All user information is encrypted in idToken. The only way to read idToken is the data called client secret which is kept in the database common to client servers. This data is not fixed. At each login, 2 or 3 cryptographic encryption processes (first the client id and auth code are created in this way, then that data is used to create the client secret. I guess it is very difficult to guess) is created afterwards. If the user logs out from a single client website, only the session on that site is closed. The session on the other sites remains the same. If the user wants to log out from all of them, they are logged out from all of them via SSO (Client servers query SSO with a small middleware to see if all sessions are logged out). If only one website is logged in, other websites can also access this session. So SSO becomes meaningful. I couldn't test it fully because there is no second client, but it works as I want it to.",
        "31": "While the SSO server keeps the user information and idToken in the database, the client creates its own user table in the server database based on the data provided by SSO. Only clientSecret related to authentication is kept separately for each user. User information is never transferred directly and all communication is done via idtoken, as it should be. The client server creates the client secret and transfers it to SSO only during the first login process and ensures that the idToken is created.",
        "32": "I was able to adapt to working in node.js, express, and node.js environment in general with this project you gave me. Tomorrow I will look at the socket issue as you said. First, I will list what I need to do by myself, imagine small sketches on how I can do it and try to realize my goals. After all the talk about OOP and design patterns, it makes me sad that I don't use any of them at this stage, but I think I will get there. I think what I am doing and trying to do is to build a structure that evolves rather than creating a human object in a single moment (God created it in 6 days, 14 billion years according to science?). Therefore, the desired patterns will also be revealed. I think a structure suitable for OOP and SOLID will emerge in the future.",
        "33": "Day 168",
        "34": "Today I moved the idToken logic from cookie to session, and while I was doing that I changed a lot of the code and made some extra improvements. I spent the whole day doing that. Now it is working as I want it to again. The reason for the change I made today was where I shouldn't keep some data. I learned \"by doing\" that it is wrong to keep some sensitive data in the cookie and I fixed it. I think I will never make such a mistake again.",
        "35": "Tomorrow I think I'm going to concentrate on what I'm going to do with a different socket.io.",
        "36": "Day 169",
        "37": "In the first part of the day, I thought of copying the sample code and going through it as I did when I first encountered Socket.io. Then I thought I should design my own system and write accordingly using socket. The user who logs in using SSO will be presented with a front end just like skype / and other similar applications. Tomorrow I will give a basic view with rough html and css. I will write a similar to Skype at the simplest level using html and css and then I will try to provide data exchange using socket between client and server. Obviously, if I can do this without any problems, the only thing left is to implement this code using electron. And using a database instead of a text file. ORM or ODM can be used afterwards though. Most of the routing was the login part. The application will be almost like a single page application (not exactly, of course, I also used different routes in authentication).",
        "38": "Nothing too difficult really, but I'm still too slow. I'm trying to speed up, for example most of today was spent fixing file structures. I didn't actually do much, but it still took me a while. I moved the authentication part to a different folder, and then I made some edits in the main javascript file about where to do socket-related operations. During this separation, I had some problems using middleware, but I got it the way I wanted it. It was these small problems that took me time, but I didn't want to ask you, I wanted to solve, find, learn by myself. It's like a baby who can barely stand, trying to walk on his own without asking for help from his parents, and even if he falls many times, he starts walking normally. With the wish to run, of course.",
        "39": "I shouldn't talk big, but I think next week the socket part will be finished very easily. Next week I think I'll use electron and apply this code structure there (what I do in client with Html and Css to electron). I think beautiful and sunny days are near.",
        "40": "Day 170",
        "41": "Today I worked only with html/css/javascript. The part I worked on is not finished yet, but half of it is done. I used variables in css for the first time today. I wanted to make a dark/light theme and it was very efficient to use css variables for this.",
        "42": "In addition, when I use html, I always try to think about the big picture. I try to think about how I can reflect future data and relationships with the html codes I write. I feel the difference between the last time I used html/css and now."
    },
    "part18": {
        "1": "Day 171",
        "2": "Today I wrote the functions I need to use most on the front end (on a simple messaging application). It's still at the most basic level, but it includes the front end part that I need for instant two-way communication using socket.io. Tomorrow and for the rest of this week I will work on the communication between server and client. My goal is to finish the Websocket part on Saturday. I was planning to work this evening and complete the missing parts, but I didn't have the opportunity (as a result of time allocated for family and friends). Other than that, I think I can do the task. I will be very happy for myself if I can complete my requirements this week. Tomorrow I will directly adapt the simple chat application example in socket.io to the system I wrote and try to develop it from the very basics. I think I am progressing in a systematic way (a systematic progress in my own way, of course). I think I will complete the basic parts and solve the problems as I encounter deficiencies.",
        "3": "Day 172",
        "4": "It took us Saturday and Monday to get the simplest view of the front end. Today it was about sending the message written in the client to the server using socket.io and the server sending a response back. Yes, simple messaging was provided. But these messages had to be stored in a persistent place like a text file or a database. In the afternoon I concentrated on this and thought about what I could do. First of all, in order to make this application work consistently, I need to have 3 users. 3 users can communicate in pairs or form a group together. I haven't yet considered the possibility of 2 people being in a group, but since a group naturally has a group name, you can tell if there is a group by the presence of the group name instead of the number of people. I thought that if there was a bot user, users could communicate with him/her. I have named this bot \"Assistant\" for now. The bot user could create surveys and ask users to fill them out, for example. Or when users encounter a problem, they can contact him directly. I even wondered what it would be like if users could anonymously tell Assistant about something they are afraid to say but want to raise.",
        "5": "The most thought-provoking topic of today was how data structures should look like. At this stage, instead of using a database, the data is simply kept in json/text files. For example, \"dbClient.json\" is used for the user table, \"chat.json\" for the chat data table and \"session.json\" for the session. Today we thought about how to store user data and chat data (chat participants, chat id, chat contents, chat dates, etc.). The connection between these two different data structures (or tables/files) could be based on the id of the users and the id of the chats they are in. The current user id was obtained from session information.",
        "6": "In addition, today messages were dynamically generated using DOM methods. But the creation of messages didn't make much sense as mentioned above. Because when the user refreshes the page, all messages are naturally deleted.",
        "7": "Things I think I should work on tomorrow: ",
        "8": "If the user has a chat history, data about their past chats will be transferred to the client via socket.io. (Here, instead of transferring all messages, you can also transfer a certain character length of the last message. Just like skype's recent chats section. Then, if the user clicks on that chat, all messages can be loaded, or recent messages can be loaded, and if the user wants to see much older messages, then those messages can be pulled from the database. For now, instead of thinking about the most optimized solution, I think I will do the case where all messages are retrieved from the database)).",
        "9": "If the user has no chat history, a chat will be started with the Assistant. It will be added to the database first and then shown to the client.",
        "10": "If the user has a chat history and any of those chats have multiple participants, that chat will be seen as a group and the data will be passed to the client that way.",
        "11": "When all this is realized, it is likely that the shortcomings on the front end will be very noticeable and they will simply be fixed.",
        "12": "Another important issue is the cache structure, which I don't know much about yet. The user's past messages will definitely be retrieved from a database (or any persistent storage - like the text/json file used now). But in case the user is instant messaging, this data will of course be written to the database, but the client side data will not be retrieved from the database, but only processed by the server. When a new message is written, I guess the server does two things. First, it adds this new message to the database asynchronously. Secondly, it delivers this data to the client.",
        "13": "Obviously there is a lot to do. I try to tackle the problems in the most basic way and move forward. Each problem and solution offers a new perspective and different alternatives. Whether a user or a group has a photo or not, the group administrator and his/her authorizations, quitting a group or removing a user, and many other issues await attention. Of course, from where I am now, these are more detailed parts that I will come across in the later stages. So, I'm going to tackle more backend related problems tomorrow. I'll try to complete it.",
        "14": "Day 173",
        "15": "Honestly, I feel that I am progressing in the way I want. Of course, I don't know how important my own wishes are, but I am at least a little satisfied with the work I do myself. Today, I started to dynamically add data to the statically existing front end by taking the data from the text file. I am trying to write a code that can be changed as much as I can, that is compatible, that can be corrected by a person who looks at the code at a future time by absorbing Bruce Lee's sentence \"Be like water, my friend, take the shape of the container you are in, etc.\". In fact, there is still nothing about OOP in the code I wrote. Just because I think I have grasped a little bit of what is meant there, the thought of \"you should write a modular code BuÄra\" dominates in my mind. It hasn't happened yet, but I hope I will.",
        "16": "I just came across something very small, and it was a lot of fun to learn it. I was trying to see what I could do in forEach to make the loop stop where I want it to (without affecting later parts of the code), and I found out that with the every() function, I can simply do that.",
        "17": "Today I only worked on presenting chat related data in a text file to the client as it should be. I should have used technologies like ajax/fetch to communicate with the backend from an html file. But since I created the instant messaging with socket.io, I preferred socket.io instead of fetch/ajax in the other part. I don't know how correct it is yet. The basic parts are still not finished yet. Tomorrow or Friday at the latest, I will try to build a structure where groups and people are there, and instant messages come as desired. There are many things missing. I have a lot more to do. I'm glad I do and I'm learning, because it's extremely enjoyable (not in a distorted hedonistic way, of course). But time continues to flow like water.",
        "18": "I don't know if I am doing the work of 5 people, but I think I am getting faster than before. Or I think I reinforced what you showed me a little bit (not completely, of course, but at least I think I smelled a few things like cars smelling gasoline due to high gasoline prices: how to write a good code, the technologies and tools I will use. I used to be more or less a logical person, but now I think my horizons have broadened even more. I often feel that something is not right in the parts where I am wrong. Sometimes I continue to do it wrong on purpose because the trade-off I make with my inner voice is to make a mistake and then fix that part and complete different parts). I can't do the work of 5 people, because I am one of them. I'm just a simple person with an average intelligence who wants to improve. There will always be people who are better than me in almost everything. But I will do my best.",
        "19": "Day 174",
        "20": "I can take the messages written in the past, existing chats, necessary user information (photo, name, status, etc.) and write them in the frontend. I can also show the messages written instantly in the front end as I want. But I have some very serious problems because I built the system a little wrong. I think I know how to solve it. My problem is this: I can print past messages easily. I save the instant messages to a text file asynchronously and print them to the screen at the same time. But when I enter a different chat, these instant messages disappear. They come back when I refresh the page, of course (it does it from the text file). I know why it disappears because I wanted it to disappear and I wrote a few lines of code accordingly, because if it didn't disappear, then all the messages would be mixed in all the chats. A solution I created for one problem created a problem in a different place. So I can solve the problem by keeping the messages in a main element with the chat id and adding each new message to this chat id. I show the relevant element of the active chat and hide the part related to other chats. I don't think the way I'm going to add each new message to the database and then not pull it from there is not wrong and can be implemented. But I will fix my problems, I have completed what I wanted to do today, but I haven't solved the problems afterwards.",
        "21": "Tomorrow, if I implement the solution I mentioned above and fix the problem, I will get a bit more specific. I need to show the status that one of the people currently in the chat is writing a message. I need to give the user the ability to edit, delete, etc. Then I need to allow the user to change their status (available, busy, away, offline, etc.). I need to allow the user to go offline when they log out or disconnected. I need to show the user new incoming messages with a notification.",
        "22": "I'm trying to take firm steps forward.",
        "23": "Day 175",
        "24": "Only one user is in SSO. Fictitious users and chat histories are retrieved from a text file. As it should be, all old and new messages and chats are shown in the front end. Two important problems were solved today. As you said, the application was exhibiting abnormal behavior when accessing the same url from different tabs (or browser) because it was broadcasting to all sockets. I fixed that, and then I completed the status change (there are still a few things missing, but I will come back after I complete the more important things).",
        "25": "There are 3 parts left, such as reporting the presence of unread messages, showing who is typing in the chat with \"is typing\", and sending files. For the first two parts, I need to send messages from different users. For this, I need to edit the SSO section again, because in order for users to log in and write, they need to be registered in SSO and I need to transfer the necessary user data from SSO to the client server. Tomorrow I will add in the SSO section the possibility to have different users to debug the application (as it should be. I should have done it in the first place, but I think I thought too superficially when I said that I shouldn't overengineer while evaluating the problem). This edit may take some time but I have to do it. I don't think I'm in the dark, I can see the light, I think I'll get there. I expected myself to finish the part about the socket this week. After all the main problems are finished, I want to learn how to make voice and video calls and implement it if possible (if it is possible in many applications, why not?).",
        "26": "Day 176",
        "27": "Today I made corrections to the code I wrote in the past. It's not finished yet, so I guess I'll look at it for a couple of hours tomorrow evening. I keep the authentication information of multiple users in SSO now, but I also need to edit the session part of the client. I guess I will complete it on Monday, and if I do, I think there will be no major problem left.",
        "28": "Day 177",
        "29": "Even though I fixed the SSO side, I should have made the session to support more than one session in the backend part that uses SSO. I tried to complete this situation today. I set up a structure that seemed to work correctly by following a wrong path. But then, while I was editing this structure to work correctly, I produced results that I did not want. But I think I will complete that part tomorrow. If I complete it tomorrow, a big workload will be completed. I believe it is about to happen.",
        "30": "Day 178",
        "31": "I solved the problem I encountered yesterday and could not solve it this morning with a calm mind. The problem was to keep data of more than one user in the session. Since SSO was single-user until now, I was statically creating and simulating multi-user processes on the client server myself. I solved this problem this morning. Then I correctly created the problematic structure in the status change, the \"is typing\" part. Towards the end of the day I looked at the notification issue, but for now I don't keep the notifications in any persistent file. Temporarily only the users who are online can see the notifications that are currently coming. I'll come back to this later, because for now it's time for another problem: uploading files using socket.io. I need to send documents, photos, videos, and audio files to the server and save them in a permanent folder. On the front end, I need to provide these files to the client of course. I've often come across 2 different node modules for file uploading. I'm either going to build it completely myself or use one of these modules. I'm going to try first without using any 3rd party modules.",
        "32": "Of course, the nature of things is that problems never end and there is always a solution to these problems. ",
        "33": "Day 179",
        "34": "I got into uploading files today. At first I thought it was hard, but when I looked into it I realized it's easy. It's just a bit tricky. Until now, the messages sent were only shown to the user as text. I hadn't thought about how to send, save and display photos, videos, documents (with pdf, doc extensions), audio files to the user. I started that part today.",
        "35": "The process of instantly sending the file to the server and forwarding the file to the corresponding chat is complete. I just need to organize the different situations for different file types a bit more. I haven't added the part about the file being sent to the chat history yet. Tomorrow I will finish these things.",
        "36": "I guess I'll finish most of it tomorrow. The problem is that despite all the OOP work I've done, I still don't use that knowledge at all (although logically I think I'm trying to keep the modularity high, it's very insufficient). I think I should have made the diagrams at the beginning of the project and acted accordingly. Anyway, this was a new experience and gain for me.",
        "37": "Day 180",
        "38": "Total 180 working days reached. A total of 7 months have been completed (7 months - 53 minutes). Today, with socket.io, a file that can have about 10-15 different types (mime types) was saved in a local folder and while saving, the file was sent to the people in the relevant chat at the same time. Of course, it is necessary to keep the data about the files sent in the past chat information while opening the application. This part was started this evening. The goal is to finish it by lunch tomorrow. Actually, the logic is very simple but the implementation will take some time. When I think about it, there are still a lot of mistakes and shortcomings. The notification part is not completed, chats have been added statically (At this stage, all users can only chat with Assistant by default if they don't have a chat). Tomorrow, the necessary work will be done to show the user the files uploaded in the past. Then we will investigate how to record audio data using a microphone and send it to the other user. This will be done. Afterwards, live voice and video conversation will be added to the system. Although the dreams seem like Paris, it is estimated that the project will be completed in the desired way (like customized Skype).",
        "39": "Today, documents such as zip, rar, pdf, audio and video files were uploaded to the system. They could be uploaded. It was also transmitted live to the client and the client was able to download the files presented as documents. Photo, video and audio files could be opened and viewed in the front-end section and also downloaded. There was a problem today. Socket.io by default allowed sending a maximum of 1Mb of data. If we wanted to send more, it would close and reopen the connection as if nothing happened.",
        "40": "An option for the maximum size of the file that can be sent was found in the socket.io documentation and the maximum size of the file that can be sent is now 100 Mb. It is not yet known (I don't know) what kind of problems this can cause. Sending the data in chunks was initially considered, but this shortcut was chosen because it seemed like a more laborious way.",
        "41": "I think it's happening. I feel like with order comes chaos, and I'm going to organize it as much as I can."
    },
    "part19": {
        "1": "Day 181",
        "2": "Today I finished uploading the file, transmitting the file to the user, using a data structure that I assume is appropriate in the backend, in less time than I expected. I need to enable the user to search for different users and their own past chat content, so they can add people they haven't started a chat with yet. I was going to go straight to the topic, but then I wanted to look at algorithms related to search in the book of algorithms. When I looked, I just read the different types of problems and solutions there. And of course I thought about them. For example, there was the \"Travelling salesman problem\" that I came across while looking at graph algorithms. I want to think about it on Sunday and look at its applications. As far as I understood, there was no general solution method and I was interested. Tomorrow I will continue as normal, and by Monday I will try to finish searching for different users and messages, starting a conversation with a new user, etc.",
        "3": "Day 182",
        "4": "For now, I've only started working on searching for contacts and starting conversations. I'm not going to search for messages in past chats and show them to the user, because that part has a very different logic. Today I can say that I played with the front end a bit more. But it was more about thinking about what I was going to do rather than spending time here.",
        "5": "Day 183",
        "6": "I haven't finished the part I thought I would finish today (adding users) yet. My progress slowed down a bit because I got stuck in a few places. I will try to complete it tomorrow. I am working on both front and back end every day at these stages. One without the other doesn't make much sense.",
        "7": "Day 184",
        "8": "Today I completed the process of adding users (sending a friend request and whether it is accepted or not). There are some problems left on the front end side, but I will try to solve them tomorrow. When those problems are over, I will start creating groups.",
        "9": "Day 185",
        "10": "Today I completed the group creation logic, but there are still a few problems on the client side. Most of the problems are on the frontend side because the backend side is much simpler. I guess there will be no more problems with group creation until noon tomorrow. Then, as you said, I will create a public room/group where everyone joins the chat by default.",
        "11": "Day 186",
        "12": "Today, problems in creating groups and showing notifications were fixed. Afterwards, since the user's photo was given as static, \"name, surname, profile photo, password\" fields were defined in the user preferences section to make it dynamic. To change the password, the SSO server will be contacted again and the user will be directed there. But other operations will be completed on the Chat server. It is not completed yet. We will try to finish it tomorrow.",
        "13": "The most summarized version of what has been done so far:",
        "14": "The user registered in SSO logs in with the necessary information. He/she can log out from anywhere or log out only from the device-browser he/she is on.",
        "15": "When the user enters Chat, he/she automatically enters the general chat group.",
        "16": "The user can search for other users (browse registered users), send a friend request to anyone they want. When the person accepts, they can start talking.",
        "17": "The user can create groups and add friends.",
        "18": "The user can send many different types of files in chat. They can download what is sent.",
        "19": "If the user receives a friend request and is offline, the notification appears (also appears when online)",
        "20": "The user can change their status (busy, away, active). Offline status has not been written yet. This status will be given automatically, regardless of the user, if they are logged out for a certain period of time.",
        "21": "While new features are being added, problems from the past are being solved. Even though this work done as an apprentice work shows the level of the person (BuÄra) (very amateurish), development will be achieved in this way. I hope so.",
        "22": "Day 187",
        "23": "Today, I wrote the file exchange as you said - in the file server format - and edited and completed it for both profile photos and files shared in chats. At the end of the day, I completed the requirements on this issue. After that editing, photo updating and instantly showing it to other users was also completed. I will try to complete the other user information update-changing parts tomorrow.",
        "24": "Day 188",
        "25": "I did almost everything I had in mind this week, yes it was a more relaxed week but I don't think it was empty or unproductive.",
        "26": "Today has been like reading a holy book. I read about programming, object-oriented and javascript. I had originally planned to complete the user information update part today, but I felt that I was using the same information or I was far from doing something more stimulating and exciting, so I turned to the theory part a little more. Not because I was running away or afraid of something, but because I was interested in the philosophy (under the hood) of the business, so I spent today learning and reading a little more different things.",
        "27": "Day 189",
        "28": "Today I completed the parts of updating the information about the profile. Then I tried to complete the operations that can be done on messages such as editing, deleting, copying messages, but it is left for tomorrow morning. When it is completed, I will try to do things like deleting users in groups, adding or removing admin, changing group name. There is no problem on the backend side, but the frontend side takes most of the time. Although I want to finish it as soon as possible, I guess I'm stalling. I should have thought object-oriented from the beginning, but I got a little confused because I said I would make it that way later. With this project, I actually understood a little better why people created frameworks like React. I understood more why there is so much emphasis on so many doctrines or ideas such as OOP, MVC, SOLId, etc. rather than frameworks. That's all for today.",
        "29": "Day 190",
        "30": "Yesterday the missing parts (some parts of message editing, deleting, copying) were completed. Today, we started working on what happens when a user clicks on a group name. Topics such as the list of people in the group, viewing the admins, leaving the group were entered. It is not finished yet. Again, the frontend part took more time. Tomorrow, readings will be made on the subject you mentioned and a report will be created on the related software."
    },
    "part20": {
        "1": "Day 191",
        "2": "Day 192",
        "3": "Day 193",
        "4": "Unfortunately I lost the files containing these days' work :(",
        "5": "Day 194",
        "6": "I completed the morning offline. When the user logs in, they are in the \"available\" state. After that, he can choose one of the options \"away, busy, available\". But when the user logs out or closes the application, it was directly taken offline. Then the notification part for messages was partially completed. But as you said, the data structure I built will take up much more size and require more computation time when scaled to larger systems. So tomorrow I will fix that part and complete the missing parts. \"Close all sessions\", which seemed to work normally and as desired before, did not work today. I was given extra time to fix that part. Fixed.",
        "7": "Day 195",
        "8": "Today I completed the message notification part. Since I keep the data in JSON and I have used the data structure related to user ids in many different places before, I associated the notification part only with the user id and the date of the first unread message. Since all the structures are on the JSON file and format, this structure can be kept if a non-relational database management system is used in the future. Or it can be changed. That was not considered at this stage. After completing the notification part today, a few parts of the past were broken during the changes made to the code, but they were fixed afterwards.",
        "9": "We wanted to enable the input field where the messages are written towards the evening to expand vertically as the message lengthens, as in skype or different message applications. But since this dynamic structure cannot be done with the input element (actually I never thought it could be done via javascript), we will replace the input field with a span and use the span as an input. That part is unfinished, but it will be fixed tomorrow morning.",
        "10": "The chat order should be based on the chat with the last message. I will try to complete that part tomorrow. There is one big missing. Deleting a friend from chats. This feature was not added yet. Tomorrow it will be completed. If these features are completed tomorrow, there are no other major shortcomings at this stage.",
        "11": "If there are different problems, I think I can fix them.",
        "12": "Day 196",
        "13": "This morning and at noon, the input field for typing messages was made to work correctly (as desired). Then the dates of the messages were converted to time, days of the week, or \"day/month/year\" format as in Skype and other messaging apps. After that, the last chats would be sorted. Instead of creating the first logic that came to my mind, I thought about how I could write a different and algorithmically more optimal code. This took me some time. This part is not completed, but it will be completed by noon tomorrow. After that, the friend deletion feature will be added.",
        "14": "Day 197",
        "15": "In the morning, the sorting of chats by last message date was completed. Then the ability to delete friends was added. There were also some problems in the group quit section and they were fixed. Something like quitting the general chat has not been added yet. When the app turns into a desktop app, it is expected to be very nice if the ability to mute notifications is added.",
        "16": "The problems from the past have been solved so far. If there is a problem, it can be fixed again, but no serious problems have been found.",
        "17": "Towards the evening, 3 or 4 different issues came to mind:",
        "18": "How can peer-to-peer messaging be done and how can privacy of messages be ensured? This will be added if possible.",
        "19": "Audio recording and sending status will be added (with MediaRecorder api)",
        "20": "Live video and voice chat will be added. ",
        "21": "When the first 3 items are completed, it is thought that the most basic functions of a chat application will be provided",
        "22": "Although the introduction part is completed as backend, the frontend is still very primitive. Then the front-end will be written.",
        "23": "It is thought that there may be problems in the operations that more than one user performs at the same time from the json file. Therefore, a transition to a database management system can (should) be made.",
        "24": "The readability, editing and updating of the code for developers should be brought to a standard suitable for OOP (It should have been done from the beginning).",
        "25": "Day 198",
        "26": "Today, to be honest, I spent a bit more time planning what to do and researching related topics. I've been thinking about what I need to do, reading different people's code and opinions on related topics in general. Even if I'm not going to add end-to-end encryption, I wanted to learn how it works, and I think I did.",
        "27": "Day 199",
        "28": "Today I started reading the documentation provided by Google as an introduction to WebRTC. Since the document I read started directly with the coding part and the interpretation of the code, I didn't read anything comprehensive that explains the essence of the event and the structure and logic of the technologies it uses. Afterwards, I researched the subject from Wikipedia and a few other sources. I need to get my hands dirty by getting some more ideas about the subject (by researching the subject a little more if I have the opportunity on vacation). On Thursday I will start (try) to integrate these situations into the system.",
        "29": "Day 200",
        "30": "I will make careful corrections tomorrow as some anomalies occurred while I was modifying the code on the parts you showed today. Before that, I tried to learn and implement live (stream peer-to-peer comm.) data exchange with WebRTC. First I tried to understand by copying the examples I found and reading the code, but I had some difficulties. I will return to this part after I make my application object-oriented."
    },
    "part21": {
        "1": "Day 201",
        "2": "This morning I revisited the concepts of prototypes and objects in Javascript. After the first break, I started working on making my code object-oriented. I don't think it will take too long, but I will try to write in a clean and modular way. I will try to complete the restoration by replacing old code piece by piece. I learned a little bit about how to build a building by simply building a shanty. Now, with the experience gained and a little bit of knowledge and experience of the work to be done, I will try to make it a building with a solid foundation.",
        "3": "Day 202",
        "4": "Today we continued to make the written chat application object oriented. Then, applications on bug tracking and knowledge base were investigated and compared. It was a bit of a quiet day. We will continue with a better pace on Monday.",
        "5": "Day 203",
        "6": "Today I tried to make a functionally written code object-oriented. In the last hour of the day I read an article about knowledge base. While I was reading it, the idea of \"I can do that\" came to me again, but I chose not to say it because of the possibility that I might be stumped trying to do it. But it really can be done if I can complete the tasks I have now.",
        "7": "Many ideas come to my mind, even outside of the subject I work on. Of course it may be absurd, but one of them is this: almost all visual technologies are based on a screen or a plane and the eyes that look at it obtain the light. I thought of a projector that could change the direction of the light source by tracking the movement of the pupil, a tiny projector with a predetermined maximum power (it shouldn't cause temporary or permanent blindness). Then I realized that this idea was unnecessarily complicated and difficult. Then came the idea of increasing the viewing angle to 360 degrees with cameras. When you mentioned the rocket project, I thought about what I could do with Arduino. Or I thought about how a small rocket simulation could be written on the web. I tried to imagine what I could do in such a simulation using technologies such as Webgl, three.js, or d3. Honestly, there are so many things that can be done... I don't know the priorities of my motivators at work or I avoid making myself rank them, but one of them is definitely that there is so much to do. I'm glad.",
        "8": "Day 204",
        "9": "Today, although not the authentication part, the general chat logic has been made object-oriented. Tomorrow the goal is to make the codes related to authentication and then start and finish the folderization issue. I think a lot of corrections were made today. I think that when the authentication part is completed tomorrow, there will not be many problems on OOP. If there are problems, I think they can be fixed without difficulty. Of course, I also need to make the backend codes of the SSO server object-oriented. When all this is done, the basic features of an application including knowledge base and bug tracking will be extracted. In accordance with these features, a summary software requirements document can be prepared, or a template of objects with general requirements and usage scenarios suitable for these requirements can be created before implementing the system.  Of course, a report on these issues (bug tracking and kb) will also be written.",
        "10": "Day 205",
        "11": "Today it took more time than I expected to make the authentication part object oriented. Tomorrow I will try to complete the folderization part and then if there is time I will read about the knowledge base and try to improve my ideas.",
        "12": "Day 206",
        "13": "First of all, I apologize. For still not using the object structure at some points. Not because I can't apply it, but because I can't see where to apply it due to inexperience or lack of knowledge. Also, thank you very much for all the information you have given. Because I try to follow the information you have shown in all the structures I use, or I try to apply what I can learn and understand.",
        "14": "Today I did the parsing of the application's codes. It's not finished yet. I was stuck in the controller part. I will try to fix what I did tomorrow based on what you said.",
        "15": "I came up with a plan that I can do as a hobby after work, although I don't know yet how efficient and contributing it is. I bought a domain address and I want to create a web server myself on an old computer, starting from the most basic level and with the intention of a hobby. Then I will try to use cloudflare after simply serving content (like hello word) through the domain address. Then I will try to learn how to attack my own website and learn how to attack or infiltrate it with ddos or other methods (although I don't have much of an idea at the moment) and how to take precautions against it.",
        "16": "Day 207",
        "17": "Today, fixes were made in the backend part. At the beginning, everything was programmed in a functional way and there were a lot of global variables, but now we have evolved to a class-object structure. Tomorrow, the routing part will be completed and then the final arrangements will be completed. Next week we will try to complete as much as possible and have it ready to be delivered by Saturday. ",
        "18": "Day 208",
        "19": "I finished the routing part today, it took a bit more time than I expected, I had a few bugs but I fixed them.",
        "20": "I've identified what I need to do during the week:",
        "21": "There was an anomaly in the situation of getting out of the group. I will fix it.",
        "22": "When the application was opened, the last chat content was shown by default. Instead, I will prepare a different content and add it to the system as presentation-start content.",
        "23": "There is no design in the frontend during user input and output. I will try to have a UI with soft transitions.",
        "24": "I will add the ability to delete files as well.",
        "25": "I should be able to complete these in maximum 3 days, and on Thursday and Friday I will try to make sure that the application is completely ready for delivery.",
        "26": "Day 209",
        "27": "Today, the deletion and saving of files sent within the application have been added to the system. It is not yet complete, but it is thought that the missing parts will be completed by the first break tomorrow.",
        "28": "Earlier, we tried to further optimize the position of the options when right-clicking on messages. The menu of options was revealed on the clicked message (exactly on the point where it was clicked). ",
        "29": "Tomorrow the transitions during authentication will be completed on the frontend side. If there is time, we will try to fix one or two anomalies detected.",
        "30": "Day 210",
        "31": "The first thing this morning was to finish the unfinished part from yesterday (the part with functions like deleting files sent in chat). That's done. Then I tried to make the transitions between different routes quite smooth, I think I was able to do it (using fade-in fade-outs in the simplest way). I've seen it done using cache and web worker, but that complexity was not needed for now.",
        "32": "In addition, when I was checking the requested data by looking at the network to see if there was anything wrong, I saw that the browser was requesting the favicon.ico file, I investigated what it was and included it in the system. It is working normally now. But sometimes the browser requests the favicon.ico file and sometimes it doesn't, and I think it does this by looking at its cache. Or there is a different mechanism and I don't understand it yet.",
        "33": "Yesterday and today were good. I hope tomorrow will be even better. Today I wrote some new stuff. Tomorrow I will try to fix the bugs in the code I wrote before."
    },
    "part22": {
        "1": "Day 211",
        "2": "Today, as the first thing I did, I brought the landing page status you mentioned earlier to the desired state. I fixed two small errors that occurred while completing this status. Afterwards, I fixed a bug that occurred when a person deleted a chat and created a chat with the same person again. On Friday, if I can fix a bug that occurred during the exit from the group, I think it will be ready and sufficient for the presentation on Saturday.",
        "3": "Day 212",
        "4": "Today I wanted to make the last edits before the delivery. I fixed the bugs I found. First of all, the part of quitting and adding to the group was problematic on the front side. It was fixed. Secondly, the uploaded files were restricted. This restriction was removed. Mime types were controlled on the backend side and forwarded to the user. The problem here is also eliminated. Whatever the mime type is, the file is presented with that file extension.",
        "5": "Day 213",
        "6": "I was looking at electron's document today and I saw two separate links about node.js and google chrome on their page.",
        "7": "The cartoon in this link",
        "8": " was only about chrome. I read it. Before that, I edited the code one last time and sent it to you.",
        "9": "Afterwards, while I was browsing the node.js documentation again, I came across a news article in one of the links in the document.",
        "10": "On a Turk's brief disruption of worldwide web development in 2016",
        "11": ". More precisely because npm causes this. ",
        "12": "I was surprised to see that many developers using react and babel had problems with a simple 11 lines of code being removed from npm.",
        "13": "Yes, today was a quiet day. I really enjoyed reading a cartoon summary of the ideas and work of the Chrome developers. I've used a web browser for years, but I've never consciously thought about how it works until now. The idea of each tab as a separate process, the idea of blocking malware with sandboxing, how the asynchronous structure was written out of necessity (yes, I already knew these things or learned them without realizing it). The part about the reason for writing the V8 js engine and the lack of a good garbage collector was also a very enjoyable read. If Ataturk were alive, I think he would have recommended reading it in general.",
        "14": "Months ago and even now (though not very often anymore), I was making an extreme effort to understand you. I was trying to learn how to comprehend, learn, use, speak the language without translating it into Turkish. I think I have progressed, but as a junior's junior, I still have a long way to go.",
        "15": "Day 214",
        "16": "Today I tried to make the application examples myself by looking completely at the electron document. As with browsers, Electron has different api's. For example, there is a separate api for clipboard. For example, the clipboard api is presented as a separate api in electron in a very similar way. I think the parts where there will be incompatibilities can be predicted and can be switched to electron without much difficulty. Tomorrow, if I am not given a different task, I will start switching to electron.",
        "17": "Today I also took note of what you said about the codes that were written, I will change the relevant parts and I have committed the reasons to memory.",
        "18": "Day 215",
        "19": "I actually switched the app directly to electron today. Everything that used to work was still working normally. The Inter Process Communication part is as I understand it (I'm writing it again because I may look at these notes in the future): When Chrome or any browser is running, the user can open multiple tabs. As far as I understand, the most primitive browsers are thought of as a single tab. In case of multiple tabs, it was necessary to separate the JavaScript operations and memory operations of each tab. Because if a site explodes in one tab, all other tabs are affected and the browser crashes (I remember it hard because it was a long time ago, but yes there was such a thing). Each tab was called a separate process and all these small processes were managed by a main process. This method was later adopted by all other browsers. Electron follows the same logic here and divides it into main process and rendering process. It seemed like it could be considered as two separate contexts. ",
        "20": "I haven't looked at the session/cookie part in detail yet. I will check tomorrow to see if there is a problem there.",
        "21": "Now, while I was writing these lines, the idea of creating a template for daily reports came to my mind, but I gave up because the template I had in my mind was very simple and it was not difficult to write.",
        "22": "Day 216",
        "23": "Today, I first updated the application icon and name in the top bar of the Electron application. Since I had problems changing the color of the top bar, I completely hid the top bar and rewrote it in the rendering process section as I wanted. While writing, I added minimizing, maximizing, unmaximizing, closing functions to this section. Normally incoming notifications only appear in the application. But if the page of the person using the application is minimized, I should ensure that the desktop notification comes. Tomorrow I will add this part. Of course, I will do this with the api provided by electron. Today I also organized the page sizing part according to the case of using electron. In general, I will only give electron-specific rendering operations to the relevant files as a separate file. Tomorrow I will complete that part as well.",
        "24": "Day 217",
        "25": "Trying to show a notification box with an input field in windows os seems like a lot of work.  You need to add a lot of separate software to use the module. I don't know why it wasn't included in electron.js or why it wasn't made easier to use, but it felt like a bit more of an overly detailed part.",
        "26": "I'll try again tonight at the office, but probably tomorrow I'll just have it show a normal notification without going into that much detail, unless otherwise required. Then I will try to package the app and make it ready to use. I think it can be added in later versions of the app.",
        "27": "Thank you very much for giving me this project again. I learned and did so much when it came down to it (in my opinion). Good night.",
        "28": "Day 218",
        "29": "First of all, I apologize for the late report. I wanted to write it anyway.",
        "30": "Today I completed the notification part within the specifications electron gave me. Then I created a flash-like image on the icon in the taskbar when a new notification arrives and when the application is first opened. Then I packaged the application with the electron builder library. It worked. But there was a problem. The cookie data was lost when the application was closed. It was also disappearing when running in Electron, but I thought it would be fixed when it was built. It didn't. Then I searched for how to fix it. I haven't solved this problem yet, but just like with notifications, I can use a native api that electron provides for sessions. I think it could be done without using it, but I couldn't do it even if I tried. I will try a different solution first thing tomorrow.",
        "31": "Day 219",
        "32": "After clarifying my thinking this morning, I solved my problem with a little google search. Basically, the cookie information was already coming into the electron app. But it wasn't storing this data somewhere permanently (like modern browsers do). The \"changed\" event was listened for changes in cookies. When the cookies changed, the session information was saved to a default location that Electron itself set. Then the application was packaged and ready to use. At this stage, the application satisfies me. But it needs further development (Webrtc, fixing the notification part, front-end improvements, and of course optimizing the process of pulling chat data from the backend to make it scalable).",
        "33": "After that, I continued reading the book on functional programming that I had started reading before, I guess to discover new horizons, to broaden my perspective and to feel stronger. The parts I'm looking at now are all about math, logic, basic Haskell data structures. I just want to read it as a hobby and in my free time and finish it.",
        "34": "Day 220",
        "35": "I only read the PHP document today. At the beginning I wanted to do a quick review and be ready when you gave me a task. I wanted to reinforce what I had forgotten. But I felt like my memory came back as soon as I looked at each topic I looked at. I got a little carried away and thought, why don't I develop my own language, it's not that difficult (again, it could be ignorant courage). I thought about the possibility of applying your idea of \"writing the algorithm and outputting it in a programming language\" to all languages. It would be nice (Of course, it would be meaningful and advanced if such a thing was open source and open for everyone to develop). Today was spent briefly brushing up on my PHP knowledge."
    },
    "part23": {
        "1": "Day 221",
        "2": "Today I finished reading the PHP document (skipping parts like array methods). After that, I read and researched various software information, and then I started to look at the files you sent me, but I felt mentally exhausted and then I looked at some other topics. That's all for today.",
        "3": "Day 222",
        "4": "Today I read the Lumen document and therefore Laravel a bit. Since I haven't used frameworks and similar structures for 9 months (or very, very little), I guess I didn't like these ready-to-use templates (I think I had a reaction because I encountered them for the first time, like the body's allergy to certain stimuli). Even if I didn't like it, of course I was going to learn/study it because it was a given task and it was accepted.",
        "5": "I'd like to make one last description so that I don't get carried away. A framework is like a faith/culture. Developers who use the same framework find a common ground, get along with each other and live in tolerance and live happily in the future generations by continuing the same belief and culture. The language of this belief/culture is the spoken language of the developers. Some developers can be nationalistic in their beliefs/language. Some are multicultural by saying \"make peace don't war\", taking pollen from every language and belief and making honey. Laravel is like Judaism. It is an ancient faith and it derived from other faiths. And it opened the door to other beliefs. It has such a strong structure that it and the beliefs from which it derives have a very strong following. The language it uses is not very common anymore. And other languages are very popular. This does not cause the death of the language, but it decreases its popularity and decreases its community. ",
        "6": "What did I do today? I got bored looking at Lumen's documentation and wanted to run the file you sent to start practicing. I couldn't get it to work. I was getting an error about the database. Then I read and followed the tutorial about writing a rest api using Lumen and created it myself for a simple practice. I accessed the data in the database from postman with the corresponding endpoint.",
        "7": "As far as I understand, lumen was created to create rest api and microservice (I don't know what it is). In the given file, there were views and therefore the concept left lumen and connected back to Laravel. That's why using lumen in the beginning didn't match with their warning 'don't use me in your new projects'. But I think something that works anyway has been created. I guess I'm too empty again.",
        "8": "Tomorrow I will try to run the file you gave me.",
        "9": "Day 223",
        "10": "Today, I first ran the first files you sent me by writing the necessary sql queries (adding database and tables). Then I tried to create objects in my mind by looking at the front-end of the actual finance application. It was not very brain-taxing because everything was ready in front of me. Then I looked and read Laravel's documentation again. Today was a bit calmer. Covid situations and the iphone thought took place in the mind a little bit.",
        "11": "Day 224",
        "12": "Yes, using a framework may seem simple, but it may not be easy to understand the code written with that framework. Even though the Laravel documentation is very detailed and understandable, for a person who is not directly familiar with the concept, not including why the code is written can be a bit difficult for the next developer. The lesson I learned today was that if I write a piece of code, I need to explain why that code exists. Of course, when you read a piece of code, you can understand what it does, but trying to put all the pieces together can be difficult.",
        "13": "Today I tried to understand one by one what the code on the backend side is doing. I saw some unnecessary extended code in some parts, but I didn't touch it. There were red warnings in some places (even in many pieces of code) and I haven't figured out how to make them work properly yet.",
        "14": "I haven't quite figured out how the system works yet. I'll try to figure it out, I'm trying.",
        "15": "Day 225",
        "16": "Today, I examined the application. I tried to understand the connection between the view files and the backend. Again, I tried to understand MVC and its implementation in laravel. Tomorrow afternoon, I will try to watch and understand how the application works from the first opening of the application, how it affects the model with the routes, controller and the modules it uses, and how the frontend code works.",
        "17": "Day 226",
        "18": "Today I looked and worked on the accounting application again. I tried to understand how the system works. I tried to figure out the route transitions, what the controller does, the views and the blade engine. I tried to make a few very small changes.",
        "19": "After a one-week break I felt like I had forgotten everything, but I think I quickly remembered a lot of things and adapted.",
        "20": "The most interesting part of the project for me was that the backend was in a different domain. I don't know why such a need arose. Maybe this usage has always existed and I just learned it.",
        "21": "I have a problem. I have not yet figured out how to access the database used in a live system using laragon and make changes. For example, logging in with the person information registered in the system. It is also possible to log in with person information that is not registered in the system. However, in the 2nd case, it should not be able to log in. I will try to understand and solve how this control works, how to access the data in the database directly with laragon, how to solve Cors problems, why I get an error about autoloader when I want to run the live system locally.",
        "22": "Day 227",
        "23": "I tried to fix a few bugs I saw yesterday today. First of all, due to the cors error, no data was being pulled from the backend api and not appearing in the front app. The relevant deficiencies in the request header were completed and the problem was solved. Afterwards, my body, which has never worked in a live application, was trying to access the database locally. I couldn't do it. Then I discovered a place where the app crashed. I saw that dozens of requests were being sent with axios when trying to access a url, which caused a \"429 too many requests\" error on several page refreshes. I haven't fixed it yet, but I think I can fix it tomorrow. There are two more problems: the interface changes as if logging into the system with the wrong login information, but then it returns to the login page. This should be fixed. There are also a few different front end bugs. We will try to complete those parts as well.",
        "24": "Day 228",
        "25": "This morning, I fixed the \"too many requests\" problem I encountered yesterday, but I also saw the same \"429 too many requests\" error in a few places (it happens more frequently on page refreshes). I haven't made any changes in those parts yet. Then I fixed the problem with the login page being transferred to the main page after entering the wrong data. It won't log in and reports that an incorrect password or username has been entered. Then I did some theoretical computer science stuff (near the end of the working day). ",
        "26": "Day 229",
        "27": "I didn't make any changes to the accounting program today. I created two separate applications for both laravel and delumen and compared the code written with the most basic lumen and laravel application. I noted the added parts and tried to understand what was considered when making such an application. I read a few algorithms, logic gates, and questions and answers on Stackoverflow about php that I encountered or wondered about during the day. At the end of the day, I searched for the topic you mentioned. I tried to summarize what I remembered from a few articles I read, but I think I may have misunderstood or interpreted it. Now I will look at that topic again because I am curious.",
        "28": "Day 230",
        "29": "Today I wanted to read ",
        "30": "some of the C programming notes",
        "31": " (Kaan Aslan- C Programming Language Course Notes). Of course, before that I checked the accounting program again and fixed two parts that I missed (not sending form data when two buttons related to save or update are pressed in the frontend). I did not encounter any other problem that prevents or restricts the main functions of the program."
    },
    "part24": {
        "1": "Day 231",
        "2": "Today, I listed the list of all endpoints (almost all of them) by looking at the frontend codes and ran every state in the list. There was an error in login/logout and it was fixed. In the case where deletion cannot be done in the VAT rate section (If it is used, it cannot be deleted), a warning message was removed. Tomorrow I will test where errors 429 occur and take notes.",
        "3": "Day 232",
        "4": "Although I hate not being able to do it, I couldn't do the task given today. Actually, it can be done, but I had a hard time doing it because I couldn't warm up to the dynamics of Laravel. If I solve the \"too many requests\" problem, it seems that there will be no problem with http requests. Then I can fix the frontend code. ",
        "5": "Day 233",
        "6": "Today, almost all 429 bugs have been fixed (well, a small 20 minutes to be exact). The options to add and update currency in the account information section were static. It has been dynamized. The number of requests sent to the endpoint in each url has been made to be maximum 3, mostly 1.",
        "7": "Although yesterday was not very productive, today was much more productive. One thing I realized was that it was not enough to know only the backend or only the frontend. Even if only one of them is known, it is necessary to know the connection between them.",
        "8": "Day 234",
        "9": "Today, the url from which all endpoints are called in the front end was documented. An overlooked deficiency was detected in a single url and that part will be corrected tomorrow morning.",
        "10": "Day 235",
        "11": "I missed to see producing instead of fixing things. Today, while trying to make changes on the front end, I wanted to redesign in a simple way to fix the bootstrap look that was seen a lot and disturbing. It was a lot of fun. I think I can finish it before it takes too long.",
        "12": "Today's most beautiful non-technical post: On living (Nazim Hikmet): ",
        "13": "... I mean, you have to take life so seriously,",
        "14": "even at seventy, for example, you will plant olives,",
        "15": "and not just for the kids,",
        "16": "for not believing in death when you're afraid of dying,",
        "17": "because the living part is overpowering ....",
        "18": "Day 236",
        "19": "I finished the homepage today. It may have flaws, it may be a bad design, but I like it overall. Now it's time to complete the other pages.",
        "20": "Day 237",
        "21": "Today, I was going to get the information I needed to show on the homepage from you and show it. After writing the front end part for VAT-related information, I had a problem pulling it from the backend. I couldn't pull it. I couldn't do it because I couldn't figure out where my mistake was. Then, with the help of my seniors, this situation was completed (Although I tried my best to do it, I couldn't complete that part). I will finalize how to transfer it to the front and show it, and then I will try to finish the remaining parts as much as I can.",
        "22": "Day 238",
        "23": "Today I showed two more data on the home page (monthly profit/loss, monthly sales amount due to income tax). Then I completed the accounts page, then I started to edit the page for adding new accounts, but I think it will be finished by noon tomorrow. After that, the account update page is expected to be completed.",
        "24": "Day 239",
        "25": "Today I edited the \"accounts, currency, payment methods\" pages (/index, /edit, /create). Since the category page needs pagination, I wanted to rewrite that part (actually pagination is working now, but I don't think it's good enough). When I create \"/edit, /index, /create\" pages as templates for all pages, since all pages are similar, the specific parts related to the pages can be changed and used in all of them. So it doesn't seem to take much time. Unless otherwise specified, I plan to add the filtering and search sections last.",
        "26": "Day 240",
        "27": "Today the categories page was completed. The most time consuming part was pagination. That was also completed. Tomorrow we will try to complete the invoice details pages."
    },
    "part25": {
        "1": "Day 241",
        "2": "The page showing sales invoices was completed today. The page for adding sales invoices could not be completed. Tomorrow we will try to duplicate the parasut.com (an accounting website) page. Then the functions will be added.",
        "3": "Day 242",
        "4": "Today I was a bit distracted and I was not thinking much about what he talked about in the meeting. Other than that, I'm going to replicate the front end of the parachute with the methods I've learned so far (like flex).",
        "5": "Day 243",
        "6": "Worked on the new add invoice page today. I tried to make a similar page to the one in Parasut, but it's not finished yet. But I think tomorrow at least the static part will be completed and the functionality will be started.",
        "7": "Day 244",
        "8": "Today I completed most of the static part of the invoice page, but it's not finished yet. It inevitably takes more time when designing it in detail. Tomorrow I will try to finish the invoice insertion page.",
        "9": "Day 245",
        "10": "Although the majority of the page is statically complete, it is taking more time than I expected. While my goal was to complete 1 page a day, the basic 'HTML/CSS/JS' part of a single invoice insertion page of the parachute took 3 days (90%). Either I was too slow or the page was really detailed even though it looked like it was not. I think the second option is correct. I will try to complete the static parts quickly until tomorrow lunch break and now show the information from the api on the page.",
        "11": "Day 246",
        "12": "The static part of the add sales invoice page has been completed. It was made as similar as possible to the relevant page of the parachute. The JavaScript parts inevitably took a little more time as they involve more logical operations. Dynamic data will be added tomorrow.",
        "13": "Day 247",
        "14": "Today I started showing the data received from API on the invoice insertion page. Customer search, tax rates, currency information are shown in the required sections. Category, product and tag search results will also be shown in the relevant sections on the page. The calculations may also need to be redone (as the functions for subtotaling and discounts for each individual product in Parachute have been added). Finally, it remains to send the data by post and show any errors.",
        "15": "This page took too much time. A similar structure could be put in place for the expense invoices page so that at least less time is spent there.",
        "16": "Day 248",
        "17": "The inaccuracies in category search, product search, formatting of numbers were fixed today. Tomorrow first thing is to fix the problem of adding too many event listener in the code I wrote for the products search. Then I will complete the invoice calculations and sending the relevant post request to the api.",
        "18": "Day 249",
        "19": "Today I completed most of the price calculations of the products on the invoice adding page. When I write the gross total calculation part and the Turkish Lira equivalent of the total amount according to the selected currency, it will only remain to send the post request to save the invoice to the api.",
        "20": "Day 250",
        "21": "I completed the page today. There's still the part about sending the post and the viruses. This page was a failure for me. The JavaScript codes were too complicated and there was no trace of simplicity. I will learn from this page and try to write better on other pages.",
        "22": "Day 251",
        "23": "Today the sales invoice adding page was completed. There were errors in the relevant API methods and they were fixed.",
        "24": "The display of error messages in the front end code, sending the data in the appropriate format in the API request; When we encountered the problem that some columns in the database were not filled, the relevant repository and model were fixed.",
        "25": "Tomorrow I'll start a different page.",
        "26": "Day 252",
        "27": "Today, invoice adding pages have been completed. Filtering and search section has been added on the page where expense invoices are listed. However, since the accuracy of the data in the search section is low, the display of the results has not yet been done. Then the expense invoice editing page was started. It is estimated that the sales and expense invoice editing pages will be completed tomorrow.",
        "28": "Day 253",
        "29": "Today the majority of both invoice update pages have been completed. Although the calculations are done correctly, there are a few formatting issues left, but that will be fixed later. In addition, corrections were made in the backend code and database (Today was generally spent with these corrections). Tomorrow, after a few deficiencies of the sales invoice editing page are fixed, the invoice detail pages will be started.",
        "30": "Day 254",
        "31": "Today, the deficiencies in the add/correct invoice pages were completed (some roughness remained in the number formatting part) and the invoice detail/payment page was started.",
        "32": "There was poor performance today. There were a lot of questions and issues on my mind. The departure of my supervisor (teacher) and not saying goodbye (ghosting) left a bad emotional scar. At a moment during the day when I couldn't pay attention to work, I reread the article you shared with us titled \"What is an engineer, what does he/she do, how many types of engineers are there?\"",
        "33": "\"Today, I realize once again that my professors actually helped me find the best answer to the questions \"who is an engineer and what does he/she do\". The engineer solves problems. The problem-solving engineer is the synthesis of the eastern and western perspectives, writes, gives and reads reports. The engineer who gives a written report is acceptable. While writing a report, he/she defines problems, finds creative solutions, has the opportunity to see what he/she has not seen, has to interpret what he/she has written and draw conclusions, and the writing stays and the words fly away. The engineer who writes good reports reads good reports and questions well. The engineer who sees this fact has completed his/her individual institutionalization and is a very good managerial candidate. Senior managers who are aware of this fact know the value of the treasure in their hands. Those who cannot see it realize their material and moral losses later.\"",
        "34": "The woman who wrote the article's description of the ideal engineer fit my manager. It should have suited me too, because I wanted to be a good engineer. I had studied at school, but I realized that it was not enough to study at school. It was in this office that I saw engineering in its fullest sense for the first time. It was the first time I was so fascinated by magic, and then of course I learned it was illusion. By the time I realized the illusion, what I had learned had increased a lot compared to my previous level, and therefore the rush and panic in my mind started to decrease.",
        "35": "It reads like my suicide note and the report is quite out of context, but the final report may have the right to add a little bit of sentimentality.",
        "36": "One of the greatest chances and opportunities in my life was to meet you. I found a treasure. I tried to grab something from the treasure as much as I could. I tried to add something to the treasure with this intellectual poverty. Even though I don't know what my abilities are more or less, I tried. Hoping that fortune favors the one who tries, I will continue to learn with a great appetite, to find better solutions to problems, to create good relationships with people and myself. My biggest goal right now is to try to be as good as you and then to rise above that level (if any).",
        "37": "I think this 11-month period and you will remain very, very, very precious in my mind because I met you and established a beautiful bond."
    }
}